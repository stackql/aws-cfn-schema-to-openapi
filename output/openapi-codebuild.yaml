openapi: 3.0.0
info:
  title: CodeBuild
  version: 1.0.0
paths: {}
components:
  schemas:
    ProjectSourceVersion:
      type: object
      additionalProperties: false
      properties:
        SourceIdentifier:
          type: string
        SourceVersion:
          type: string
      required:
        - SourceIdentifier
    VpcConfig:
      type: object
      additionalProperties: false
      properties:
        Subnets:
          type: array
          uniqueItems: false
          items:
            type: string
        VpcId:
          type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
    SourceAuth:
      type: object
      additionalProperties: false
      properties:
        Resource:
          type: string
        Type:
          type: string
      required:
        - Type
    RegistryCredential:
      type: object
      additionalProperties: false
      properties:
        Credential:
          type: string
        CredentialProvider:
          type: string
      required:
        - Credential
        - CredentialProvider
    FilterGroup:
      type: object
      additionalProperties: false
    Source:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        ReportBuildStatus:
          type: boolean
        Auth:
          $ref: '#/components/schemas/SourceAuth'
        SourceIdentifier:
          type: string
        BuildSpec:
          type: string
        GitCloneDepth:
          type: integer
        BuildStatusConfig:
          $ref: '#/components/schemas/BuildStatusConfig'
        GitSubmodulesConfig:
          $ref: '#/components/schemas/GitSubmodulesConfig'
        InsecureSsl:
          type: boolean
        Location:
          type: string
      required:
        - Type
    ProjectCache:
      type: object
      additionalProperties: false
      properties:
        Modes:
          type: array
          uniqueItems: false
          items:
            type: string
        Type:
          type: string
        Location:
          type: string
      required:
        - Type
    Artifacts:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Type:
          type: string
        ArtifactIdentifier:
          type: string
        OverrideArtifactName:
          type: boolean
        Packaging:
          type: string
        EncryptionDisabled:
          type: boolean
        Location:
          type: string
        Name:
          type: string
        NamespaceType:
          type: string
      required:
        - Type
    LogsConfig:
      type: object
      additionalProperties: false
      properties:
        CloudWatchLogs:
          $ref: '#/components/schemas/CloudWatchLogsConfig'
        S3Logs:
          $ref: '#/components/schemas/S3LogsConfig'
    BatchRestrictions:
      type: object
      additionalProperties: false
      properties:
        ComputeTypesAllowed:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumBuildsAllowed:
          type: integer
    ProjectBuildBatchConfig:
      type: object
      additionalProperties: false
      properties:
        CombineArtifacts:
          type: boolean
        ServiceRole:
          type: string
        BatchReportMode:
          type: string
        TimeoutInMins:
          type: integer
        Restrictions:
          $ref: '#/components/schemas/BatchRestrictions'
    CloudWatchLogsConfig:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        GroupName:
          type: string
        StreamName:
          type: string
      required:
        - Status
    Environment:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        EnvironmentVariables:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
        PrivilegedMode:
          type: boolean
        ImagePullCredentialsType:
          type: string
        Image:
          type: string
        RegistryCredential:
          $ref: '#/components/schemas/RegistryCredential'
        ComputeType:
          type: string
        Certificate:
          type: string
      required:
        - Type
        - Image
        - ComputeType
    EnvironmentVariable:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Type:
          type: string
        Name:
          type: string
      required:
        - Value
        - Name
    ProjectFileSystemLocation:
      type: object
      additionalProperties: false
      properties:
        MountPoint:
          type: string
        Type:
          type: string
        Identifier:
          type: string
        MountOptions:
          type: string
        Location:
          type: string
      required:
        - MountPoint
        - Type
        - Identifier
        - Location
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    ProjectTriggers:
      type: object
      additionalProperties: false
      properties:
        BuildType:
          type: string
        FilterGroups:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/FilterGroup'
        Webhook:
          type: boolean
    BuildStatusConfig:
      type: object
      additionalProperties: false
      properties:
        Context:
          type: string
        TargetUrl:
          type: string
    GitSubmodulesConfig:
      type: object
      additionalProperties: false
      properties:
        FetchSubmodules:
          type: boolean
      required:
        - FetchSubmodules
    S3LogsConfig:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        EncryptionDisabled:
          type: boolean
        Location:
          type: string
      required:
        - Status
    Project:
      type: object
      properties:
        Description:
          type: string
          x-is-top-level-property: true
        ResourceAccessRole:
          type: string
          x-is-top-level-property: true
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
          x-is-top-level-property: true
        SecondarySources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Source'
          x-is-top-level-property: true
        EncryptionKey:
          type: string
          x-is-top-level-property: true
        SecondaryArtifacts:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Artifacts'
          x-is-top-level-property: true
        Source:
          $ref: '#/components/schemas/Source'
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        LogsConfig:
          $ref: '#/components/schemas/LogsConfig'
          x-is-top-level-property: true
        ServiceRole:
          type: string
          x-is-top-level-property: true
        QueuedTimeoutInMinutes:
          type: integer
          x-is-top-level-property: true
        SecondarySourceVersions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ProjectSourceVersion'
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
        SourceVersion:
          type: string
          x-is-top-level-property: true
        Triggers:
          $ref: '#/components/schemas/ProjectTriggers'
          x-is-top-level-property: true
        Artifacts:
          $ref: '#/components/schemas/Artifacts'
          x-is-top-level-property: true
        BadgeEnabled:
          type: boolean
          x-is-top-level-property: true
        FileSystemLocations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ProjectFileSystemLocation'
          x-is-top-level-property: true
        Environment:
          $ref: '#/components/schemas/Environment'
          x-is-top-level-property: true
        ConcurrentBuildLimit:
          type: integer
          x-is-top-level-property: true
        Visibility:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        BuildBatchConfig:
          $ref: '#/components/schemas/ProjectBuildBatchConfig'
          x-is-top-level-property: true
        TimeoutInMinutes:
          type: integer
          x-is-top-level-property: true
        Cache:
          $ref: '#/components/schemas/ProjectCache'
          x-is-top-level-property: true
      required:
        - Artifacts
        - ServiceRole
        - Environment
        - Source
      x-stackql-resource-name: Project
    S3ReportExportConfig:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Bucket:
          type: string
        Packaging:
          type: string
        EncryptionKey:
          type: string
        BucketOwner:
          type: string
        EncryptionDisabled:
          type: boolean
      required:
        - Bucket
    ReportExportConfig:
      type: object
      additionalProperties: false
      properties:
        S3Destination:
          $ref: '#/components/schemas/S3ReportExportConfig'
        ExportConfigType:
          type: string
      required:
        - ExportConfigType
    ReportGroup:
      type: object
      properties:
        Type:
          type: string
          x-is-top-level-property: true
        ExportConfig:
          $ref: '#/components/schemas/ReportExportConfig'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        DeleteReports:
          type: boolean
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
      required:
        - Type
        - ExportConfig
      x-stackql-resource-name: ReportGroup
    SourceCredential:
      type: object
      properties:
        ServerType:
          type: string
          x-is-top-level-property: true
        Token:
          type: string
          x-is-top-level-property: true
        AuthType:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Username:
          type: string
          x-is-top-level-property: true
      required:
        - ServerType
        - Token
        - AuthType
      x-stackql-resource-name: SourceCredential
x-stackql-views:
  - Project:
      name: Project
      id: aws.codebuild.Project
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ResourceAccessRole') as
              resource_access_role,

              JSON_EXTRACT(Properties, '$.VpcConfig.Subnets') as
              vpc_config_subnets,

              JSON_EXTRACT(Properties, '$.VpcConfig.VpcId') as
              vpc_config_vpc_id,

              JSON_EXTRACT(Properties, '$.VpcConfig.SecurityGroupIds') as
              vpc_config_security_group_ids,

              JSON_EXTRACT(Properties, '$.SecondarySources') as
              secondary_sources,

              JSON_EXTRACT(Properties, '$.EncryptionKey') as encryption_key,

              JSON_EXTRACT(Properties, '$.SecondaryArtifacts') as
              secondary_artifacts,

              JSON_EXTRACT(Properties, '$.Source.Type') as source_type,

              JSON_EXTRACT(Properties, '$.Source.ReportBuildStatus') as
              source_report_build_status,

              JSON_EXTRACT(Properties, '$.Source.Auth') as source_auth,

              JSON_EXTRACT(Properties, '$.Source.SourceIdentifier') as
              source_source_identifier,

              JSON_EXTRACT(Properties, '$.Source.BuildSpec') as
              source_build_spec,

              JSON_EXTRACT(Properties, '$.Source.GitCloneDepth') as
              source_git_clone_depth,

              JSON_EXTRACT(Properties, '$.Source.BuildStatusConfig') as
              source_build_status_config,

              JSON_EXTRACT(Properties, '$.Source.GitSubmodulesConfig') as
              source_git_submodules_config,

              JSON_EXTRACT(Properties, '$.Source.InsecureSsl') as
              source_insecure_ssl,

              JSON_EXTRACT(Properties, '$.Source.Location') as source_location,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.LogsConfig.CloudWatchLogs') as
              logs_config_cloud_watch_logs,

              JSON_EXTRACT(Properties, '$.LogsConfig.S3Logs') as
              logs_config_s3_logs,

              JSON_EXTRACT(Properties, '$.ServiceRole') as service_role,

              JSON_EXTRACT(Properties, '$.QueuedTimeoutInMinutes') as
              queued_timeout_in_minutes,

              JSON_EXTRACT(Properties, '$.SecondarySourceVersions') as
              secondary_source_versions,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.SourceVersion') as source_version,

              JSON_EXTRACT(Properties, '$.Triggers.BuildType') as
              triggers_build_type,

              JSON_EXTRACT(Properties, '$.Triggers.FilterGroups') as
              triggers_filter_groups,

              JSON_EXTRACT(Properties, '$.Triggers.Webhook') as
              triggers_webhook,

              JSON_EXTRACT(Properties, '$.Artifacts.Path') as artifacts_path,

              JSON_EXTRACT(Properties, '$.Artifacts.Type') as artifacts_type,

              JSON_EXTRACT(Properties, '$.Artifacts.ArtifactIdentifier') as
              artifacts_artifact_identifier,

              JSON_EXTRACT(Properties, '$.Artifacts.OverrideArtifactName') as
              artifacts_override_artifact_name,

              JSON_EXTRACT(Properties, '$.Artifacts.Packaging') as
              artifacts_packaging,

              JSON_EXTRACT(Properties, '$.Artifacts.EncryptionDisabled') as
              artifacts_encryption_disabled,

              JSON_EXTRACT(Properties, '$.Artifacts.Location') as
              artifacts_location,

              JSON_EXTRACT(Properties, '$.Artifacts.Name') as artifacts_name,

              JSON_EXTRACT(Properties, '$.Artifacts.NamespaceType') as
              artifacts_namespace_type,

              JSON_EXTRACT(Properties, '$.BadgeEnabled') as badge_enabled,

              JSON_EXTRACT(Properties, '$.FileSystemLocations') as
              file_system_locations,

              JSON_EXTRACT(Properties, '$.Environment.Type') as
              environment_type,

              JSON_EXTRACT(Properties, '$.Environment.EnvironmentVariables') as
              environment_environment_variables,

              JSON_EXTRACT(Properties, '$.Environment.PrivilegedMode') as
              environment_privileged_mode,

              JSON_EXTRACT(Properties, '$.Environment.ImagePullCredentialsType')
              as environment_image_pull_credentials_type,

              JSON_EXTRACT(Properties, '$.Environment.Image') as
              environment_image,

              JSON_EXTRACT(Properties, '$.Environment.RegistryCredential') as
              environment_registry_credential,

              JSON_EXTRACT(Properties, '$.Environment.ComputeType') as
              environment_compute_type,

              JSON_EXTRACT(Properties, '$.Environment.Certificate') as
              environment_certificate,

              JSON_EXTRACT(Properties, '$.ConcurrentBuildLimit') as
              concurrent_build_limit,

              JSON_EXTRACT(Properties, '$.Visibility') as visibility,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.BuildBatchConfig.CombineArtifacts') as
              build_batch_config_combine_artifacts,

              JSON_EXTRACT(Properties, '$.BuildBatchConfig.ServiceRole') as
              build_batch_config_service_role,

              JSON_EXTRACT(Properties, '$.BuildBatchConfig.BatchReportMode') as
              build_batch_config_batch_report_mode,

              JSON_EXTRACT(Properties, '$.BuildBatchConfig.TimeoutInMins') as
              build_batch_config_timeout_in_mins,

              JSON_EXTRACT(Properties, '$.BuildBatchConfig.Restrictions') as
              build_batch_config_restrictions,

              JSON_EXTRACT(Properties, '$.TimeoutInMinutes') as
              timeout_in_minutes,

              JSON_EXTRACT(Properties, '$.Cache.Modes') as cache_modes,

              JSON_EXTRACT(Properties, '$.Cache.Type') as cache_type,

              JSON_EXTRACT(Properties, '$.Cache.Location') as cache_location

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::CodeBuild::Project' ;
  - ReportGroup:
      name: ReportGroup
      id: aws.codebuild.ReportGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Type') as type,

              JSON_EXTRACT(Properties, '$.ExportConfig.S3Destination') as
              export_config_s3_destination,

              JSON_EXTRACT(Properties, '$.ExportConfig.ExportConfigType') as
              export_config_export_config_type,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.DeleteReports') as delete_reports,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::CodeBuild::ReportGroup' ;
  - SourceCredential:
      name: SourceCredential
      id: aws.codebuild.SourceCredential
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ServerType') as server_type,

              JSON_EXTRACT(Properties, '$.Token') as token,

              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Username') as username

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::CodeBuild::SourceCredential' ;
