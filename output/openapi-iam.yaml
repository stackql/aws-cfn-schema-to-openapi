openapi: 3.0.0
info:
  title: IAM
  version: 1.0.0
paths: {}
components:
  schemas:
    AccessKey:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        SecretAccessKey:
          type: string
          x-is-top-level-property: true
        Serial:
          type: integer
          x-is-top-level-property: true
        Status:
          type: string
          x-is-top-level-property: true
        UserName:
          type: string
          x-is-top-level-property: true
      required:
        - UserName
      x-stackql-resource-name: AccessKey
    Policy:
      type: object
      additionalProperties: false
      properties:
        PolicyDocument:
          type: object
        PolicyName:
          type: string
      required:
        - PolicyName
        - PolicyDocument
    Group:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        GroupName:
          type: string
          x-is-top-level-property: true
        ManagedPolicyArns:
          type: array
          uniqueItems: true
          items:
            type: string
          x-is-top-level-property: true
        Path:
          type: string
          x-is-top-level-property: true
        Policies:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Policy'
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: Group
    InstanceProfile:
      type: object
      properties:
        Path:
          type: string
          description: The path to the instance profile.
          x-is-top-level-property: true
        Roles:
          type: array
          description: >-
            The name of the role to associate with the instance profile. Only
            one role can be assigned to an EC2 instance at a time, and all
            applications on the instance share the same role and permissions.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          x-is-top-level-property: true
        InstanceProfileName:
          type: string
          description: The name of the instance profile to create.
          x-is-top-level-property: true
        Arn:
          type: string
          description: The Amazon Resource Name (ARN) of the instance profile.
          x-is-top-level-property: true
      required:
        - Roles
      x-stackql-resource-name: InstanceProfile
    ManagedPolicy:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        Groups:
          type: array
          uniqueItems: true
          items:
            type: string
          x-is-top-level-property: true
        ManagedPolicyName:
          type: string
          x-is-top-level-property: true
        Path:
          type: string
          x-is-top-level-property: true
        PolicyDocument:
          type: object
          x-is-top-level-property: true
        Roles:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        Users:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
      required:
        - PolicyDocument
      x-stackql-resource-name: ManagedPolicy
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Value:
          description: >-
            The value for the tag. You can specify a value that is 0 to 256
            Unicode characters in length and cannot be prefixed with aws:. You
            can use any of the following characters: the set of Unicode letters,
            digits, whitespace, _, ., /, =, +, and -.
          type: string
          minLength: 1
          maxLength: 256
        Key:
          description: >-
            The key name of the tag. You can specify a value that is 1 to 128
            Unicode characters in length and cannot be prefixed with aws:. You
            can use any of the following characters: the set of Unicode letters,
            digits, whitespace, _, ., /, =, +, and -.
          type: string
          minLength: 1
          maxLength: 128
      required:
        - Value
        - Key
    OIDCProvider:
      type: object
      properties:
        ClientIdList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 1
            maxLength: 255
            type: string
          x-is-top-level-property: true
        Url:
          minLength: 1
          maxLength: 255
          type: string
          x-is-top-level-property: true
        ThumbprintList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 40
            maxLength: 40
            pattern: '[0-9A-Fa-f]{40}'
            type: string
          maxItems: 5
          x-is-top-level-property: true
        Arn:
          description: Amazon Resource Name (ARN) of the OIDC provider
          minLength: 20
          maxLength: 2048
          type: string
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
      required:
        - ThumbprintList
      x-stackql-resource-name: OIDCProvider
    Role:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) for the role.
          type: string
          x-is-top-level-property: true
        AssumeRolePolicyDocument:
          description: The trust policy that is associated with this role.
          type:
            - object
            - string
          x-is-top-level-property: true
        Description:
          description: A description of the role that you provide.
          type: string
          x-is-top-level-property: true
        ManagedPolicyArns:
          description: >-
            A list of Amazon Resource Names (ARNs) of the IAM managed policies
            that you want to attach to the role. 
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          x-is-top-level-property: true
        MaxSessionDuration:
          description: >-
            The maximum session duration (in seconds) that you want to set for
            the specified role. If you do not specify a value for this setting,
            the default maximum of one hour is applied. This setting can have a
            value from 1 hour to 12 hours. 
          type: integer
          x-is-top-level-property: true
        Path:
          description: The path to the role.
          type: string
          x-is-top-level-property: true
        PermissionsBoundary:
          description: >-
            The ARN of the policy used to set the permissions boundary for the
            role.
          type: string
          x-is-top-level-property: true
        Policies:
          description: >-
            Adds or updates an inline policy document that is embedded in the
            specified IAM role. 
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Policy'
          x-is-top-level-property: true
        RoleId:
          description: The stable and unique string identifying the role.
          type: string
          x-is-top-level-property: true
        RoleName:
          description: A name for the IAM role, up to 64 characters in length.
          type: string
          x-is-top-level-property: true
        Tags:
          description: A list of tags that are attached to the role.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
      required:
        - AssumeRolePolicyDocument
      x-stackql-resource-name: Role
    SAMLProvider:
      type: object
      properties:
        Name:
          minLength: 1
          maxLength: 128
          pattern: '[\w._-]+'
          type: string
          x-is-top-level-property: true
        SamlMetadataDocument:
          minLength: 1000
          maxLength: 10000000
          type: string
          x-is-top-level-property: true
        Arn:
          description: Amazon Resource Name (ARN) of the SAML provider
          minLength: 1
          maxLength: 1600
          type: string
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
      required:
        - SamlMetadataDocument
      x-stackql-resource-name: SAMLProvider
    ServerCertificate:
      type: object
      properties:
        CertificateBody:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
          x-is-top-level-property: true
        CertificateChain:
          minLength: 1
          maxLength: 2097152
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
          x-is-top-level-property: true
        ServerCertificateName:
          minLength: 1
          maxLength: 128
          pattern: '[\w+=,.@-]+'
          type: string
          x-is-top-level-property: true
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
          x-is-top-level-property: true
        PrivateKey:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
          x-is-top-level-property: true
        Arn:
          description: Amazon Resource Name (ARN) of the server certificate
          minLength: 1
          maxLength: 1600
          type: string
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: ServerCertificate
    ServiceLinkedRole:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        CustomSuffix:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        AWSServiceName:
          type: string
          x-is-top-level-property: true
      required:
        - AWSServiceName
      x-stackql-resource-name: ServiceLinkedRole
    LoginProfile:
      type: object
      additionalProperties: false
      properties:
        PasswordResetRequired:
          type: boolean
        Password:
          type: string
      required:
        - Password
    User:
      type: object
      properties:
        Path:
          type: string
          x-is-top-level-property: true
        ManagedPolicyArns:
          type: array
          uniqueItems: true
          items:
            type: string
          x-is-top-level-property: true
        Policies:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Policy'
          x-is-top-level-property: true
        UserName:
          type: string
          x-is-top-level-property: true
        Groups:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        LoginProfile:
          $ref: '#/components/schemas/LoginProfile'
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
        PermissionsBoundary:
          type: string
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: User
    UserToGroupAddition:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        GroupName:
          type: string
          x-is-top-level-property: true
        Users:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
      required:
        - GroupName
        - Users
      x-stackql-resource-name: UserToGroupAddition
    VirtualMFADevice:
      type: object
      properties:
        VirtualMfaDeviceName:
          minLength: 1
          maxLength: 226
          pattern: '[\w+=,.@-]+'
          type: string
          x-is-top-level-property: true
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
          x-is-top-level-property: true
        SerialNumber:
          minLength: 9
          maxLength: 256
          pattern: '[\w+=/:,.@-]+'
          type: string
          x-is-top-level-property: true
        Users:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
      required:
        - Users
      x-stackql-resource-name: VirtualMFADevice
x-stackql-views:
  - AccessKey:
      name: AccessKey
      id: aws.iam.AccessKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.SecretAccessKey') as
              secret_access_key,

              JSON_EXTRACT(Properties, '$.Serial') as serial,

              JSON_EXTRACT(Properties, '$.Status') as status,

              JSON_EXTRACT(Properties, '$.UserName') as user_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::AccessKey' ;
  - Group:
      name: Group
      id: aws.iam.Group
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.GroupName') as group_name,

              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as
              managed_policy_arns,

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.Policies') as policies

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::Group' ;
  - InstanceProfile:
      name: InstanceProfile
      id: aws.iam.InstanceProfile
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.Roles') as roles,

              JSON_EXTRACT(Properties, '$.InstanceProfileName') as
              instance_profile_name,

              JSON_EXTRACT(Properties, '$.Arn') as arn

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::InstanceProfile' ;
  - ManagedPolicy:
      name: ManagedPolicy
      id: aws.iam.ManagedPolicy
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Groups') as groups,

              JSON_EXTRACT(Properties, '$.ManagedPolicyName') as
              managed_policy_name,

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,

              JSON_EXTRACT(Properties, '$.Roles') as roles,

              JSON_EXTRACT(Properties, '$.Users') as users

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::ManagedPolicy' ;
  - OIDCProvider:
      name: OIDCProvider
      id: aws.iam.OIDCProvider
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ClientIdList') as client_id_list,

              JSON_EXTRACT(Properties, '$.Url') as url,

              JSON_EXTRACT(Properties, '$.ThumbprintList') as thumbprint_list,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::OIDCProvider' ;
  - Role:
      name: Role
      id: aws.iam.Role
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.AssumeRolePolicyDocument') as
              assume_role_policy_document,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as
              managed_policy_arns,

              JSON_EXTRACT(Properties, '$.MaxSessionDuration') as
              max_session_duration,

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as
              permissions_boundary,

              JSON_EXTRACT(Properties, '$.Policies') as policies,

              JSON_EXTRACT(Properties, '$.RoleId') as role_id,

              JSON_EXTRACT(Properties, '$.RoleName') as role_name,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::Role' ;
  - SAMLProvider:
      name: SAMLProvider
      id: aws.iam.SAMLProvider
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.SamlMetadataDocument') as
              saml_metadata_document,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::SAMLProvider' ;
  - ServerCertificate:
      name: ServerCertificate
      id: aws.iam.ServerCertificate
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.CertificateBody') as certificate_body,

              JSON_EXTRACT(Properties, '$.CertificateChain') as
              certificate_chain,

              JSON_EXTRACT(Properties, '$.ServerCertificateName') as
              server_certificate_name,

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::ServerCertificate' ;
  - ServiceLinkedRole:
      name: ServiceLinkedRole
      id: aws.iam.ServiceLinkedRole
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.CustomSuffix') as custom_suffix,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.AWSServiceName') as a_ws_service_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::ServiceLinkedRole' ;
  - User:
      name: User
      id: aws.iam.User
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as
              managed_policy_arns,

              JSON_EXTRACT(Properties, '$.Policies') as policies,

              JSON_EXTRACT(Properties, '$.UserName') as user_name,

              JSON_EXTRACT(Properties, '$.Groups') as groups,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.LoginProfile.PasswordResetRequired')
              as login_profile_password_reset_required,

              JSON_EXTRACT(Properties, '$.LoginProfile.Password') as
              login_profile_password,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as
              permissions_boundary

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::User' ;
  - UserToGroupAddition:
      name: UserToGroupAddition
      id: aws.iam.UserToGroupAddition
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.GroupName') as group_name,

              JSON_EXTRACT(Properties, '$.Users') as users

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::UserToGroupAddition' ;
  - VirtualMFADevice:
      name: VirtualMFADevice
      id: aws.iam.VirtualMFADevice
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.VirtualMfaDeviceName') as
              virtual_mfa_device_name,

              JSON_EXTRACT(Properties, '$.Path') as path,

              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number,

              JSON_EXTRACT(Properties, '$.Users') as users,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::IAM::VirtualMFADevice' ;
