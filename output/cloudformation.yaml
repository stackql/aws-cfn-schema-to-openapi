openapi: 3.0.0
info:
  title: CloudFormation
  version: 1.0.0
paths: {}
components:
  schemas:
    CustomResource:
      type: object
      properties:
        Id:
          type: string
        ServiceToken:
          type: string
      required:
        - ServiceToken
      x-stackql-resource-name: CustomResource
    HookDefaultVersion:
      type: object
      properties:
        TypeVersionArn:
          description: The Amazon Resource Name (ARN) of the type version.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/hook/.+$
          type: string
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the type. This is used to uniquely identify a HookDefaultVersion
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/hook/.+$
          type: string
        VersionId:
          description: The ID of an existing version of the hook to set as the default.
          pattern: ^[A-Za-z0-9-]{1,128}$
          type: string
      x-stackql-resource-name: HookDefaultVersion
    HookTypeConfig:
      type: object
      properties:
        TypeArn:
          description: The Amazon Resource Name (ARN) of the type without version number.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/hook/.+$
          type: string
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$
          type: string
        ConfigurationArn:
          description: The Amazon Resource Name (ARN) for the configuration data, in this account and region.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type(-configuration)?/hook/.+$
          type: string
        Configuration:
          description: The configuration data for the extension, in this account and region.
          pattern: '[\s\S]+'
          type: string
        ConfigurationAlias:
          description: An alias by which to refer to this extension configuration data.
          pattern: ^[a-zA-Z0-9]{1,256}$
          default: default
          enum:
            - default
          type: string
      x-stackql-resource-name: HookTypeConfig
    LoggingConfig:
      type: object
      properties:
        LogGroupName:
          description: The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
          type: string
          pattern: ^[\.\-_/#A-Za-z0-9]+$
          minLength: 1
          maxLength: 512
        LogRoleArn:
          description: The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
          type: string
          minLength: 1
          maxLength: 256
      additionalProperties: false
    HookVersion:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the type, here the HookVersion. This is used to uniquely identify a HookVersion resource
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/hook/.+$
          type: string
        TypeArn:
          description: The Amazon Resource Name (ARN) of the type without the versionID.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/hook/.+$
          type: string
        ExecutionRoleArn:
          description: The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
          pattern: arn:.+:iam::[0-9]{12}:role/.+
          maxLength: 256
          type: string
        IsDefaultVersion:
          description: Indicates if this type version is the current default version
          type: boolean
        LoggingConfig:
          $ref: '#/components/schemas/LoggingConfig'
          description: Specifies logging configuration information for a type.
        SchemaHandlerPackage:
          description: |-
            A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated files for the type you want to register.

            For information on generating a schema handler package for the type you want to register, see submit in the CloudFormation CLI User Guide.
          maxLength: 4096
          type: string
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$
          type: string
        VersionId:
          description: The ID of the version of the type represented by this hook instance.
          pattern: ^[A-Za-z0-9-]{1,128}$
          type: string
        Visibility:
          description: |-
            The scope at which the type is visible and usable in CloudFormation operations.

            Valid values include:

            PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.

            PUBLIC: The type is publically visible and usable within any Amazon account.
          enum:
            - PUBLIC
            - PRIVATE
          type: string
      required:
        - SchemaHandlerPackage
        - TypeName
      x-stackql-resource-name: HookVersion
    Macro:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        FunctionName:
          type: string
        LogGroupName:
          type: string
        LogRoleARN:
          type: string
        Name:
          type: string
      required:
        - FunctionName
        - Name
      x-stackql-resource-name: Macro
    ModuleDefaultVersion:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the module version to set as the default version.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/module/.+/[0-9]{8}$
          type: string
        ModuleName:
          description: The name of a module existing in the registry.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::MODULE
          type: string
        VersionId:
          description: The ID of an existing version of the named module to set as the default.
          pattern: ^[0-9]{8}$
          type: string
      x-stackql-resource-name: ModuleDefaultVersion
    ModuleVersion:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the module.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/module/.+$
          type: string
        Description:
          description: The description of the registered module.
          maxLength: 1024
          minLength: 1
          type: string
        DocumentationUrl:
          description: The URL of a page providing detailed documentation for this module.
          maxLength: 4096
          type: string
        ModuleName:
          description: |-
            The name of the module being registered.

            Recommended module naming pattern: company_or_organization::service::type::MODULE.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::MODULE
          type: string
        ModulePackage:
          description: The url to the S3 bucket containing the schema and template fragment for the module you want to register.
          type: string
        IsDefaultVersion:
          description: Indicator of whether this module version is the current default version
          type: boolean
        Schema:
          description: The schema defining input parameters to and resources generated by the module.
          maxLength: 16777216
          minLength: 1
          type: string
        TimeCreated:
          description: The time that the specified module version was registered.
          type: string
        VersionId:
          description: The version ID of the module represented by this module instance.
          pattern: ^[0-9]{8}$
          type: string
        Visibility:
          description: |-
            The scope at which the type is visible and usable in CloudFormation operations.

            The only allowed value at present is:

            PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
          enum:
            - PRIVATE
          type: string
      required:
        - ModuleName
        - ModulePackage
      x-stackql-resource-name: ModuleVersion
    PublicTypeVersion:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Number (ARN) of the extension.
          pattern: arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:[0-9]{12}:type/.+
          type: string
        TypeVersionArn:
          description: The Amazon Resource Number (ARN) of the extension with the versionId.
          pattern: arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:[0-9]{12}:type/.+
          type: string
        PublicVersionNumber:
          description: The version number of a public third-party extension
          type: string
          minLength: 5
          maxLength: 64
        PublisherId:
          description: The publisher id assigned by CloudFormation for publishing in this region.
          pattern: '[0-9a-zA-Z]{40}'
          type: string
          minLength: 1
          maxLength: 40
        PublicTypeArn:
          description: The Amazon Resource Number (ARN) assigned to the public extension upon publication
          pattern: arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/.+
          type: string
          maxLength: 1024
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}(::MODULE){0,1}'
          type: string
        LogDeliveryBucket:
          description: A url to the S3 bucket where logs for the testType run will be available
          type: string
        Type:
          description: The kind of extension
          enum:
            - RESOURCE
            - MODULE
            - HOOK
          type: string
      x-stackql-resource-name: PublicTypeVersion
    Publisher:
      type: object
      properties:
        AcceptTermsAndConditions:
          description: Whether you accept the terms and conditions for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to publish public extensions to the CloudFormation registry. The terms and conditions can be found at https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf
          type: boolean
        PublisherId:
          description: The publisher id assigned by CloudFormation for publishing in this region.
          pattern: '[0-9a-zA-Z]{40}'
          type: string
          minLength: 1
          maxLength: 40
        ConnectionArn:
          description: If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account.
          type: string
          pattern: arn:aws(-[w]+)*:.+:.+:[0-9]{12}:.+
        PublisherStatus:
          description: Whether the publisher is verified.
          type: string
          enum:
            - VERIFIED
            - UNVERIFIED
        PublisherProfile:
          description: The URL to the publisher's profile with the identity provider.
          pattern: (http:|https:)+[^s]+[w]
          type: string
          maxLength: 1024
        IdentityProvider:
          description: The type of account used as the identity provider when registering this publisher with CloudFormation.
          type: string
          enum:
            - AWS_Marketplace
            - GitHub
            - Bitbucket
      required:
        - AcceptTermsAndConditions
      x-stackql-resource-name: Publisher
    ResourceDefaultVersion:
      type: object
      properties:
        TypeVersionArn:
          description: The Amazon Resource Name (ARN) of the type version.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/resource/.+$
          type: string
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the type. This is used to uniquely identify a ResourceDefaultVersion
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/resource/.+$
          type: string
        VersionId:
          description: The ID of an existing version of the resource to set as the default.
          pattern: ^[A-Za-z0-9-]{1,128}$
          type: string
      x-stackql-resource-name: ResourceDefaultVersion
    ResourceVersion:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the type, here the ResourceVersion. This is used to uniquely identify a ResourceVersion resource
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/resource/.+$
          type: string
        TypeArn:
          description: The Amazon Resource Name (ARN) of the type without the versionID.
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/resource/.+$
          type: string
        ExecutionRoleArn:
          description: The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
          type: string
        IsDefaultVersion:
          description: Indicates if this type version is the current default version
          type: boolean
        LoggingConfig:
          $ref: '#/components/schemas/LoggingConfig'
          description: Specifies logging configuration information for a type.
        ProvisioningType:
          description: The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.
          enum:
            - NON_PROVISIONABLE
            - IMMUTABLE
            - FULLY_MUTABLE
          type: string
        SchemaHandlerPackage:
          description: |-
            A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated files for the type you want to register.

            For information on generating a schema handler package for the type you want to register, see submit in the CloudFormation CLI User Guide.
          type: string
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: ^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$
          type: string
        VersionId:
          description: The ID of the version of the type represented by this resource instance.
          pattern: ^[A-Za-z0-9-]{1,128}$
          type: string
        Visibility:
          description: |-
            The scope at which the type is visible and usable in CloudFormation operations.

            Valid values include:

            PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.

            PUBLIC: The type is publically visible and usable within any Amazon account.
          enum:
            - PUBLIC
            - PRIVATE
          type: string
      required:
        - SchemaHandlerPackage
        - TypeName
      x-stackql-resource-name: ResourceVersion
    Tag:
      description: Tag type enables you to specify a key-value pair that can be used to store information about an AWS CloudFormation StackSet.
      type: object
      properties:
        Key:
          description: A string used to identify this tag. You can specify a maximum of 127 characters for a tag key.
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^(?!aws:.*)[a-zA-Z0-9\s\:\_\.\/\=\+\-]+$
        Value:
          description: A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Stack:
      type: object
      properties:
        Id:
          type: string
        NotificationARNs:
          type: array
          uniqueItems: true
          items:
            type: string
        Parameters:
          type: object
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        TemplateURL:
          type: string
        TimeoutInMinutes:
          type: integer
      required:
        - TemplateURL
      x-stackql-resource-name: Stack
    AutoDeployment:
      type: object
      properties:
        Enabled:
          description: If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
          type: boolean
        RetainStacksOnAccountRemoval:
          description: If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
          type: boolean
      additionalProperties: false
    Account:
      description: AWS account that you want to create stack instances in the specified Region(s) for.
      type: string
      pattern: ^[0-9]{12}$
    Region:
      type: string
      pattern: ^[a-zA-Z0-9-]{1,128}$
    OrganizationalUnitId:
      type: string
      pattern: ^(ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}|r-[a-z0-9]{4,32})$
    Capability:
      type: string
      enum:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_AUTO_EXPAND
    RegionConcurrencyType:
      description: The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time
      type: string
      enum:
        - SEQUENTIAL
        - PARALLEL
    Active:
      description: When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.
      type: boolean
    OperationPreferences:
      description: The user-specified preferences for how AWS CloudFormation performs a stack set operation.
      type: object
      properties:
        FailureToleranceCount:
          type: integer
          minimum: 0
        FailureTolerancePercentage:
          type: integer
          minimum: 0
          maximum: 100
        MaxConcurrentCount:
          type: integer
          minimum: 1
        MaxConcurrentPercentage:
          type: integer
          minimum: 0
          maximum: 100
        RegionOrder:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        RegionConcurrencyType:
          $ref: '#/components/schemas/RegionConcurrencyType'
      additionalProperties: false
    Parameter:
      type: object
      properties:
        ParameterKey:
          description: The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
          type: string
        ParameterValue:
          description: The input value associated with the parameter.
          type: string
      required:
        - ParameterKey
        - ParameterValue
      additionalProperties: false
    DeploymentTargets:
      description: ' The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.'
      type: object
      properties:
        Accounts:
          description: AWS accounts that you want to create stack instances in the specified Region(s) for.
          type: array
          minItems: 1
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Account'
        OrganizationalUnitIds:
          description: The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
          type: array
          minItems: 1
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/OrganizationalUnitId'
        AccountFilterType:
          description: The filter type you want to apply on organizational units and accounts.
          type: string
          enum:
            - NONE
            - UNION
            - INTERSECTION
            - DIFFERENCE
      additionalProperties: false
    StackInstances:
      description: Stack instances in some specific accounts and Regions.
      type: object
      properties:
        DeploymentTargets:
          $ref: '#/components/schemas/DeploymentTargets'
        Regions:
          description: The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
          type: array
          minItems: 1
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Region'
        ParameterOverrides:
          description: A list of stack set parameters whose values you want to override in the selected stack instances.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Parameter'
      required:
        - DeploymentTargets
        - Regions
      additionalProperties: false
    StackSet:
      type: object
      properties:
        StackSetName:
          description: The name to associate with the stack set. The name must be unique in the Region where you create your stack set.
          type: string
          pattern: ^[a-zA-Z][a-zA-Z0-9\-]{0,127}$
          maxLength: 128
        StackSetId:
          description: The ID of the stack set that you're creating.
          type: string
        AdministrationRoleARN:
          description: The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
          type: string
          minLength: 20
          maxLength: 2048
        AutoDeployment:
          description: Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
          $ref: '#/components/schemas/AutoDeployment'
        Capabilities:
          description: In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Capability'
        Description:
          description: A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
          type: string
          minLength: 1
          maxLength: 1024
        ExecutionRoleName:
          description: The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
          type: string
          minLength: 1
          maxLength: 64
        OperationPreferences:
          $ref: '#/components/schemas/OperationPreferences'
        StackInstancesGroup:
          description: A group of stack instances with parameters in some specific accounts and regions.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/StackInstances'
        Parameters:
          description: The input parameters for the stack set template.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Parameter'
        PermissionModel:
          description: Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
          type: string
          enum:
            - SERVICE_MANAGED
            - SELF_MANAGED
        Tags:
          description: The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
        TemplateBody:
          description: The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
          type: string
          minLength: 1
          maxLength: 51200
        TemplateURL:
          description: 'Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket.'
          type: string
          minLength: 1
          maxLength: 5120
        CallAs:
          description: Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the organization's management account, specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
          type: string
          enum:
            - SELF
            - DELEGATED_ADMIN
        ManagedExecution:
          description: Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
          type: object
          properties:
            Active:
              $ref: '#/components/schemas/Active'
          additionalProperties: false
      required:
        - StackSetName
        - PermissionModel
      x-stackql-resource-name: StackSet
    TypeActivation:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the extension.
          pattern: arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/.+
          type: string
        ExecutionRoleArn:
          description: The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
          type: string
        PublisherId:
          description: The publisher id assigned by CloudFormation for publishing in this region.
          pattern: '[0-9a-zA-Z]{40}'
          type: string
          minLength: 1
          maxLength: 40
        LoggingConfig:
          $ref: '#/components/schemas/LoggingConfig'
          description: Specifies logging configuration information for a type.
        PublicTypeArn:
          description: The Amazon Resource Number (ARN) assigned to the public extension upon publication
          pattern: arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/.+
          type: string
          maxLength: 1024
        AutoUpdate:
          description: Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated.
          type: boolean
        TypeNameAlias:
          description: An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you must then use the alias to refer to the extension in your templates.
          pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}(::MODULE){0,1}'
          type: string
          minLength: 10
          maxLength: 204
        VersionBump:
          description: Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
          type: string
          enum:
            - MAJOR
            - MINOR
        MajorVersion:
          description: The Major Version of the type you want to enable
          type: string
          minLength: 1
          maxLength: 100000
        TypeName:
          description: |-
            The name of the type being registered.

            We recommend that type names adhere to the following pattern: company_or_organization::service::type.
          pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}(::MODULE){0,1}'
          type: string
        Type:
          description: The kind of extension
          enum:
            - RESOURCE
            - MODULE
            - HOOK
          type: string
      x-stackql-resource-name: TypeActivation
    WaitCondition:
      type: object
      properties:
        Id:
          type: string
        Data:
          type: object
        Count:
          type: integer
        Handle:
          type: string
        Timeout:
          type: string
      x-stackql-resource-name: WaitCondition
    WaitConditionHandle:
      type: object
      properties:
        Id:
          type: string
      x-stackql-resource-name: WaitConditionHandle
x-stackql-views:
  - CustomResource:
      name: CustomResource
      id: aws.cloudformation.CustomResource
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceToken') as service_token
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::CustomResource' ;
  - HookDefaultVersion:
      name: HookDefaultVersion
      id: aws.cloudformation.HookDefaultVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.TypeVersionArn') as type_version_arn,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::HookDefaultVersion' ;
  - HookTypeConfig:
      name: HookTypeConfig
      id: aws.cloudformation.HookTypeConfig
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.TypeArn') as type_arn,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.ConfigurationArn') as configuration_arn,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.ConfigurationAlias') as configuration_alias
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::HookTypeConfig' ;
  - HookVersion:
      name: HookVersion
      id: aws.cloudformation.HookVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TypeArn') as type_arn,
              JSON_EXTRACT(Properties, '$.ExecutionRoleArn') as execution_role_arn,
              JSON_EXTRACT(Properties, '$.IsDefaultVersion') as is_default_version,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogGroupName') as logging_config_log_group_name,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogRoleArn') as logging_config_log_role_arn,
              JSON_EXTRACT(Properties, '$.SchemaHandlerPackage') as schema_handler_package,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id,
              JSON_EXTRACT(Properties, '$.Visibility') as visibility
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::HookVersion' ;
  - Macro:
      name: Macro
      id: aws.cloudformation.Macro
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.LogRoleARN') as log_role_ar_n,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::Macro' ;
  - ModuleDefaultVersion:
      name: ModuleDefaultVersion
      id: aws.cloudformation.ModuleDefaultVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ModuleName') as module_name,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::ModuleDefaultVersion' ;
  - ModuleVersion:
      name: ModuleVersion
      id: aws.cloudformation.ModuleVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationUrl') as documentation_url,
              JSON_EXTRACT(Properties, '$.ModuleName') as module_name,
              JSON_EXTRACT(Properties, '$.ModulePackage') as module_package,
              JSON_EXTRACT(Properties, '$.IsDefaultVersion') as is_default_version,
              JSON_EXTRACT(Properties, '$.Schema') as schema,
              JSON_EXTRACT(Properties, '$.TimeCreated') as time_created,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id,
              JSON_EXTRACT(Properties, '$.Visibility') as visibility
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::ModuleVersion' ;
  - PublicTypeVersion:
      name: PublicTypeVersion
      id: aws.cloudformation.PublicTypeVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TypeVersionArn') as type_version_arn,
              JSON_EXTRACT(Properties, '$.PublicVersionNumber') as public_version_number,
              JSON_EXTRACT(Properties, '$.PublisherId') as publisher_id,
              JSON_EXTRACT(Properties, '$.PublicTypeArn') as public_type_arn,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.LogDeliveryBucket') as log_delivery_bucket,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::PublicTypeVersion' ;
  - Publisher:
      name: Publisher
      id: aws.cloudformation.Publisher
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.AcceptTermsAndConditions') as accept_terms_and_conditions,
              JSON_EXTRACT(Properties, '$.PublisherId') as publisher_id,
              JSON_EXTRACT(Properties, '$.ConnectionArn') as connection_arn,
              JSON_EXTRACT(Properties, '$.PublisherStatus') as publisher_status,
              JSON_EXTRACT(Properties, '$.PublisherProfile') as publisher_profile,
              JSON_EXTRACT(Properties, '$.IdentityProvider') as identity_provider
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::Publisher' ;
  - ResourceDefaultVersion:
      name: ResourceDefaultVersion
      id: aws.cloudformation.ResourceDefaultVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.TypeVersionArn') as type_version_arn,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::ResourceDefaultVersion' ;
  - ResourceVersion:
      name: ResourceVersion
      id: aws.cloudformation.ResourceVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TypeArn') as type_arn,
              JSON_EXTRACT(Properties, '$.ExecutionRoleArn') as execution_role_arn,
              JSON_EXTRACT(Properties, '$.IsDefaultVersion') as is_default_version,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogGroupName') as logging_config_log_group_name,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogRoleArn') as logging_config_log_role_arn,
              JSON_EXTRACT(Properties, '$.ProvisioningType') as provisioning_type,
              JSON_EXTRACT(Properties, '$.SchemaHandlerPackage') as schema_handler_package,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id,
              JSON_EXTRACT(Properties, '$.Visibility') as visibility
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::ResourceVersion' ;
  - Stack:
      name: Stack
      id: aws.cloudformation.Stack
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.NotificationARNs') as notification_ar_ns,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TemplateURL') as template_ur_l,
              JSON_EXTRACT(Properties, '$.TimeoutInMinutes') as timeout_in_minutes
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::Stack' ;
  - StackSet:
      name: StackSet
      id: aws.cloudformation.StackSet
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.StackSetName') as stack_set_name,
              JSON_EXTRACT(Properties, '$.StackSetId') as stack_set_id,
              JSON_EXTRACT(Properties, '$.AdministrationRoleARN') as administration_role_ar_n,
              JSON_EXTRACT(Properties, '$.AutoDeployment.Enabled') as auto_deployment_enabled,
              JSON_EXTRACT(Properties, '$.AutoDeployment.RetainStacksOnAccountRemoval') as auto_deployment_retain_stacks_on_account_removal,
              JSON_EXTRACT(Properties, '$.Capabilities') as capabilities,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ExecutionRoleName') as execution_role_name,
              JSON_EXTRACT(Properties, '$.OperationPreferences.FailureToleranceCount') as operation_preferences_failure_tolerance_count,
              JSON_EXTRACT(Properties, '$.OperationPreferences.FailureTolerancePercentage') as operation_preferences_failure_tolerance_percentage,
              JSON_EXTRACT(Properties, '$.OperationPreferences.MaxConcurrentCount') as operation_preferences_max_concurrent_count,
              JSON_EXTRACT(Properties, '$.OperationPreferences.MaxConcurrentPercentage') as operation_preferences_max_concurrent_percentage,
              JSON_EXTRACT(Properties, '$.OperationPreferences.RegionOrder') as operation_preferences_region_order,
              JSON_EXTRACT(Properties, '$.OperationPreferences.RegionConcurrencyType') as operation_preferences_region_concurrency_type,
              JSON_EXTRACT(Properties, '$.StackInstancesGroup') as stack_instances_group,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.PermissionModel') as permission_model,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.TemplateURL') as template_ur_l,
              JSON_EXTRACT(Properties, '$.CallAs') as call_as,
              JSON_EXTRACT(Properties, '$.ManagedExecution') as managed_execution
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::StackSet' ;
  - TypeActivation:
      name: TypeActivation
      id: aws.cloudformation.TypeActivation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ExecutionRoleArn') as execution_role_arn,
              JSON_EXTRACT(Properties, '$.PublisherId') as publisher_id,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogGroupName') as logging_config_log_group_name,
              JSON_EXTRACT(Properties, '$.LoggingConfig.LogRoleArn') as logging_config_log_role_arn,
              JSON_EXTRACT(Properties, '$.PublicTypeArn') as public_type_arn,
              JSON_EXTRACT(Properties, '$.AutoUpdate') as auto_update,
              JSON_EXTRACT(Properties, '$.TypeNameAlias') as type_name_alias,
              JSON_EXTRACT(Properties, '$.VersionBump') as version_bump,
              JSON_EXTRACT(Properties, '$.MajorVersion') as major_version,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::TypeActivation' ;
  - WaitCondition:
      name: WaitCondition
      id: aws.cloudformation.WaitCondition
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Data') as data,
              JSON_EXTRACT(Properties, '$.Count') as count,
              JSON_EXTRACT(Properties, '$.Handle') as handle,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::WaitCondition' ;
  - WaitConditionHandle:
      name: WaitConditionHandle
      id: aws.cloudformation.WaitConditionHandle
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::CloudFormation::WaitConditionHandle' ;
