openapi: 3.0.0
info:
  title: EFS
  version: 1.0.0
paths: {}
components:
  schemas:
    AccessPointTag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 1
          maxLength: 256
      additionalProperties: false
    CreationInfo:
      type: object
      properties:
        OwnerUid:
          type: string
          description: >-
            Specifies the POSIX user ID to apply to the RootDirectory. Accepts
            values from 0 to 2^32 (4294967295).
        OwnerGid:
          type: string
          description: >-
            Specifies the POSIX group ID to apply to the RootDirectory. Accepts
            values from 0 to 2^32 (4294967295).
        Permissions:
          type: string
          description: >-
            Specifies the POSIX permissions to apply to the RootDirectory, in
            the format of an octal number representing the file's mode bits.
          pattern: ^[0-7]{3,4}$
      required:
        - OwnerUid
        - OwnerGid
        - Permissions
      additionalProperties: false
    RootDirectory:
      type: object
      properties:
        Path:
          type: string
          description: >-
            Specifies the path on the EFS file system to expose as the root
            directory to NFS clients using the access point to access the EFS
            file system. A path can have up to four subdirectories. If the
            specified path does not exist, you are required to provide the
            CreationInfo.
          minLength: 1
          maxLength: 100
        CreationInfo:
          description: >-
            (Optional) Specifies the POSIX IDs and permissions to apply to the
            access point's RootDirectory. If the RootDirectory>Path specified
            does not exist, EFS creates the root directory using the
            CreationInfo settings when a client connects to an access point.
            When specifying the CreationInfo, you must provide values for all
            properties.   If you do not provide CreationInfo and the specified
            RootDirectory>Path does not exist, attempts to mount the file system
            using the access point will fail. 
          $ref: '#/components/schemas/CreationInfo'
      additionalProperties: false
    PosixUser:
      type: object
      properties:
        Uid:
          type: string
          description: >-
            The POSIX user ID used for all file system operations using this
            access point.
        Gid:
          type: string
          description: >-
            The POSIX group ID used for all file system operations using this
            access point.
        SecondaryGids:
          type: array
          description: >-
            Secondary POSIX group IDs used for all file system operations using
            this access point.
          items:
            type: string
      required:
        - Uid
        - Gid
      additionalProperties: false
    AccessPoint:
      type: object
      properties:
        AccessPointId:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        ClientToken:
          description: >-
            (optional) A string of up to 64 ASCII characters that Amazon EFS
            uses to ensure idempotent creation.
          type: string
          x-is-top-level-property: true
        AccessPointTags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AccessPointTag'
          x-is-top-level-property: true
        FileSystemId:
          description: >-
            The ID of the EFS file system that the access point provides access
            to.
          type: string
          x-is-top-level-property: true
        PosixUser:
          description: >-
            The operating system user and group applied to all file system
            requests made using the access point.
          $ref: '#/components/schemas/PosixUser'
          x-is-top-level-property: true
        RootDirectory:
          description: >-
            Specifies the directory on the Amazon EFS file system that the
            access point exposes as the root directory of your file system to
            NFS clients using the access point. The clients using the access
            point can only access the root directory and below. If the
            RootDirectory>Path specified does not exist, EFS creates it and
            applies the CreationInfo settings when a client connects to an
            access point. When specifying a RootDirectory, you need to provide
            the Path, and the CreationInfo is optional.
          $ref: '#/components/schemas/RootDirectory'
          x-is-top-level-property: true
      required:
        - FileSystemId
      x-stackql-resource-name: AccessPoint
    ElasticFileSystemTag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    LifecyclePolicy:
      type: object
      additionalProperties: false
      properties:
        TransitionToIA:
          type: string
        TransitionToPrimaryStorageClass:
          type: string
    BackupPolicy:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
      required:
        - Status
    FileSystem:
      type: object
      properties:
        FileSystemId:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        Encrypted:
          type: boolean
          x-is-top-level-property: true
        FileSystemTags:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ElasticFileSystemTag'
          x-is-top-level-property: true
        KmsKeyId:
          type: string
          x-is-top-level-property: true
        LifecyclePolicies:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LifecyclePolicy'
          x-is-top-level-property: true
        PerformanceMode:
          type: string
          x-is-top-level-property: true
        ProvisionedThroughputInMibps:
          type: number
          x-is-top-level-property: true
        ThroughputMode:
          type: string
          x-is-top-level-property: true
        FileSystemPolicy:
          type: object
          x-is-top-level-property: true
        BypassPolicyLockoutSafetyCheck:
          description: >-
            Whether to bypass the FileSystemPolicy lockout safety check. The
            policy lockout safety check determines whether the policy in the
            request will prevent the principal making the request to be locked
            out from making future PutFileSystemPolicy requests on the file
            system. Set BypassPolicyLockoutSafetyCheck to True only when you
            intend to prevent the principal that is making the request from
            making a subsequent PutFileSystemPolicy request on the file system.
            Defaults to false
          type: boolean
          x-is-top-level-property: true
        BackupPolicy:
          $ref: '#/components/schemas/BackupPolicy'
          x-is-top-level-property: true
        AvailabilityZoneName:
          type: string
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: FileSystem
    MountTarget:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        IpAddress:
          type: string
          x-is-top-level-property: true
        FileSystemId:
          type: string
          x-is-top-level-property: true
        SecurityGroups:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
          x-is-top-level-property: true
        SubnetId:
          type: string
          x-is-top-level-property: true
      required:
        - FileSystemId
        - SecurityGroups
        - SubnetId
      x-stackql-resource-name: MountTarget
x-stackql-views:
  - AccessPoint:
      name: AccessPoint
      id: aws.efs.AccessPoint
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.AccessPointId') as access_point_id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,

              JSON_EXTRACT(Properties, '$.AccessPointTags') as
              access_point_tags,

              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,

              JSON_EXTRACT(Properties, '$.PosixUser.Uid') as posix_user_uid,

              JSON_EXTRACT(Properties, '$.PosixUser.Gid') as posix_user_gid,

              JSON_EXTRACT(Properties, '$.PosixUser.SecondaryGids') as
              posix_user_secondary_gids,

              JSON_EXTRACT(Properties, '$.RootDirectory.Path') as
              root_directory_path,

              JSON_EXTRACT(Properties, '$.RootDirectory.CreationInfo') as
              root_directory_creation_info

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::EFS::AccessPoint' ;
  - FileSystem:
      name: FileSystem
      id: aws.efs.FileSystem
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,

              JSON_EXTRACT(Properties, '$.FileSystemTags') as file_system_tags,

              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,

              JSON_EXTRACT(Properties, '$.LifecyclePolicies') as
              lifecycle_policies,

              JSON_EXTRACT(Properties, '$.PerformanceMode') as performance_mode,

              JSON_EXTRACT(Properties, '$.ProvisionedThroughputInMibps') as
              provisioned_throughput_in_mibps,

              JSON_EXTRACT(Properties, '$.ThroughputMode') as throughput_mode,

              JSON_EXTRACT(Properties, '$.FileSystemPolicy') as
              file_system_policy,

              JSON_EXTRACT(Properties, '$.BypassPolicyLockoutSafetyCheck') as
              bypass_policy_lockout_safety_check,

              JSON_EXTRACT(Properties, '$.BackupPolicy.Status') as
              backup_policy_status,

              JSON_EXTRACT(Properties, '$.AvailabilityZoneName') as
              availability_zone_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::EFS::FileSystem' ;
  - MountTarget:
      name: MountTarget
      id: aws.efs.MountTarget
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.IpAddress') as ip_address,

              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,

              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,

              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::EFS::MountTarget' ;
