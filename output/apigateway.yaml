openapi: 3.0.0
info:
  title: ApiGateway
  version: 1.0.0
paths: {}
components:
  schemas:
    Account:
      type: object
      properties:
        Id:
          description: Primary identifier which is manually generated.
          type: string
        CloudWatchRoleArn:
          description: The Amazon Resource Name (ARN) of an IAM role that has write access to CloudWatch Logs in your account.
          type: string
      x-stackql-resource-name: Account
    StageKey:
      type: object
      additionalProperties: false
      properties:
        RestApiId:
          description: The ID of a RestApi resource that includes the stage with which you want to associate the API key.
          type: string
        StageName:
          description: 'The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property. '
          type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    ApiKey:
      type: object
      properties:
        APIKeyId:
          description: 'A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs '
          type: string
        CustomerId:
          description: An AWS Marketplace customer identifier to use when integrating with the AWS SaaS Marketplace.
          type: string
        Description:
          description: A description of the purpose of the API key.
          type: string
        Enabled:
          description: Indicates whether the API key can be used by clients.
          default: false
          type: boolean
        GenerateDistinctId:
          description: Specifies whether the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
          type: boolean
        Name:
          description: A name for the API key. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the API key name.
          type: string
        StageKeys:
          description: A list of stages to associate with this API key.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StageKey'
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the API key.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Value:
          description: The value of the API key. Must be at least 20 characters long.
          type: string
      x-stackql-resource-name: ApiKey
    Authorizer:
      type: object
      properties:
        IdentityValidationExpression:
          type: string
        AuthorizerUri:
          type: string
        AuthorizerCredentialsArn:
          type: string
        AuthorizerType:
          type: string
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
        AuthorizerResultTtlInSeconds:
          type: integer
        IdentitySource:
          type: array
          uniqueItems: false
          items:
            type: string
        AuthorizerPayloadFormatVersion:
          type: string
        ApiId:
          type: string
        EnableSimpleResponses:
          type: boolean
        AuthorizerId:
          type: string
        Name:
          type: string
      required:
        - AuthorizerType
        - ApiId
        - Name
      x-stackql-resource-name: Authorizer
    BasePathMapping:
      type: object
      properties:
        BasePath:
          type: string
          description: The base path name that callers of the API must provide in the URL after the domain name.
        DomainName:
          type: string
          description: The DomainName of an AWS::ApiGateway::DomainName resource.
        RestApiId:
          type: string
          description: The ID of the API.
        Stage:
          type: string
          description: The name of the API's stage.
      required:
        - DomainName
      x-stackql-resource-name: BasePathMapping
    ClientCertificate:
      type: object
      properties:
        ClientCertificateId:
          description: The Primary Identifier of the Client Certficate, generated by a Create API Call
          type: string
        Description:
          description: A description of the client certificate.
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the client certificate.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: ClientCertificate
    StageDescription:
      type: object
      additionalProperties: false
      properties:
        AccessLogSetting:
          description: Specifies settings for logging access in this stage.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: Indicates whether cache clustering is enabled for the stage.
          type: boolean
        CacheClusterSize:
          description: The size of the stage's cache cluster.
          type: string
        CacheDataEncrypted:
          description: 'The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses. '
          type: boolean
        CacheTtlInSeconds:
          description: 'The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses. '
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
          type: boolean
        CanarySetting:
          description: Specifies settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: 'The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage. '
          type: string
        DataTraceEnabled:
          description: 'Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs. '
          type: boolean
        Description:
          description: A description of the purpose of the stage.
          type: string
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
        LoggingLevel:
          description: 'The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference. '
          type: string
        MethodSettings:
          description: Configures settings for all of the stage's methods.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ThrottlingBurstLimit:
          description: The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: integer
        ThrottlingRateLimit:
          description: The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: number
        TracingEnabled:
          description: Specifies whether active tracing with X-ray is enabled for this stage.
          type: boolean
        Variables:
          description: 'A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&=,]+. '
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
    DeploymentCanarySettings:
      type: object
      additionalProperties: false
      properties:
        PercentTraffic:
          description: The percentage (0-100) of traffic diverted to a canary deployment.
          type: number
        StageVariableOverrides:
          description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values. Duplicates are not allowed.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: Whether the canary deployment uses the stage cache.
          type: boolean
    AccessLogSetting:
      description: Specifies settings for logging access in this stage.
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. This parameter is required to enable access logging.
          type: string
        Format:
          description: A single line format of the access logs of data, as specified by selected $context variables (https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least $context.requestId. This parameter is required to enable access logging.
          type: string
    CanarySetting:
      description: Specifies settings for the canary deployment in this stage.
      type: object
      additionalProperties: false
      properties:
        DeploymentId:
          description: The identifier of the deployment that the stage points to.
          type: string
        PercentTraffic:
          description: The percentage (0-100) of traffic diverted to a canary deployment.
          type: number
          minimum: 0
          maximum: 100
        StageVariableOverrides:
          description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: Whether the canary deployment uses the stage cache or not.
          type: boolean
    MethodSetting:
      description: Configures settings for all methods in a stage.
      type: object
      additionalProperties: false
      properties:
        CacheDataEncrypted:
          description: Indicates whether the cached responses are encrypted.
          type: boolean
        CacheTtlInSeconds:
          description: The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
          type: boolean
        DataTraceEnabled:
          description: Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
          type: boolean
        HttpMethod:
          description: The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
          type: string
        LoggingLevel:
          description: The logging level for this method. For valid values, see the loggingLevel property of the Stage (https://docs.aws.amazon.com/apigateway/api-reference/resource/stage/#loggingLevel) resource in the Amazon API Gateway API Reference.
          type: string
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        ResourcePath:
          description: The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/). You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
          type: string
        ThrottlingBurstLimit:
          description: The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: integer
          minimum: 0
        ThrottlingRateLimit:
          description: The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: number
          minimum: 0
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
        Description:
          type: string
        StageName:
          type: string
        ApiId:
          type: string
      required:
        - ApiId
      x-stackql-resource-name: Deployment
    Location:
      type: object
      additionalProperties: false
      properties:
        Method:
          description: The HTTP verb of a method.
          type: string
        Name:
          description: The name of the targeted API entity.
          type: string
        Path:
          description: The URL path of the target.
          type: string
        StatusCode:
          description: The HTTP status code of a response.
          type: string
        Type:
          description: The type of API entity that the documentation content applies to.
          type: string
          enum:
            - API
            - AUTHORIZER
            - MODEL
            - RESOURCE
            - METHOD
            - PATH_PARAMETER
            - QUERY_PARAMETER
            - REQUEST_HEADER
            - REQUEST_BODY
            - RESPONSE
            - RESPONSE_HEADER
            - RESPONSE_BODY
    DocumentationPart:
      type: object
      properties:
        DocumentationPartId:
          description: The identifier of the documentation Part.
          type: string
        Location:
          description: The location of the API entity that the documentation applies to.
          $ref: '#/components/schemas/Location'
        Properties:
          description: The documentation content map of the targeted API entity.
          type: string
        RestApiId:
          description: Identifier of the targeted API entity
          type: string
      required:
        - Location
        - Properties
        - RestApiId
      x-stackql-resource-name: DocumentationPart
    DocumentationVersion:
      type: object
      properties:
        Description:
          description: The description of the API documentation snapshot.
          type: string
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
          minLength: 1
        RestApiId:
          description: The identifier of the API.
          type: string
          minLength: 1
      required:
        - DocumentationVersion
        - RestApiId
      x-stackql-resource-name: DocumentationVersion
    EndpointConfiguration:
      type: object
      additionalProperties: false
      properties:
        Types:
          type: array
          uniqueItems: true
          items:
            type: string
        VpcEndpointIds:
          type: array
          uniqueItems: true
          items:
            type: string
    MutualTlsAuthentication:
      type: object
      additionalProperties: false
      properties:
        TruststoreVersion:
          type: string
        TruststoreUri:
          type: string
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalHostedZoneId:
          type: string
        RegionalDomainName:
          type: string
        DomainName:
          type: string
        DomainNameConfigurations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
        Id:
          type: string
        Tags:
          type: object
      required:
        - DomainName
      x-stackql-resource-name: DomainName
    GatewayResponse:
      type: object
      properties:
        Id:
          description: A Cloudformation auto generated ID.
          type: string
        RestApiId:
          description: The identifier of the API.
          type: string
        ResponseType:
          description: The type of the Gateway Response.
          type: string
        StatusCode:
          description: The HTTP status code for the response.
          type: string
        ResponseParameters:
          description: The response parameters (paths, query strings, and headers) for the response.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: The response templates for the response.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - ResponseType
        - RestApiId
      x-stackql-resource-name: GatewayResponse
    Integration:
      type: object
      properties:
        Description:
          type: string
        TemplateSelectionExpression:
          type: string
        ConnectionType:
          type: string
        ResponseParameters:
          type: object
        IntegrationMethod:
          type: string
        PassthroughBehavior:
          type: string
        RequestParameters:
          type: object
        ConnectionId:
          type: string
        IntegrationUri:
          type: string
        PayloadFormatVersion:
          type: string
        CredentialsArn:
          type: string
        RequestTemplates:
          type: object
        TimeoutInMillis:
          type: integer
        TlsConfig:
          $ref: '#/components/schemas/TlsConfig'
        ContentHandlingStrategy:
          type: string
        Id:
          type: string
        IntegrationSubtype:
          type: string
        ApiId:
          type: string
        IntegrationType:
          type: string
      required:
        - ApiId
        - IntegrationType
      x-stackql-resource-name: Integration
    MethodResponse:
      type: object
      additionalProperties: false
      properties:
        ResponseModels:
          description: The resources used for the response's content type. Specify response models as key-value pairs (string-to-string maps), with a content type as the key and a Model resource name as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseParameters:
          description: Response parameters that API Gateway sends to the client that called a method. Specify response parameters as key-value pairs (string-to-Boolean maps), with a destination as the key and a Boolean as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        StatusCode:
          description: The method response's status code, which you map to an IntegrationResponse.
          type: string
      required:
        - StatusCode
    IntegrationResponse:
      type: object
      properties:
        Id:
          type: string
        ResponseTemplates:
          type: object
        TemplateSelectionExpression:
          type: string
        ResponseParameters:
          type: object
        ContentHandlingStrategy:
          type: string
        IntegrationId:
          type: string
        IntegrationResponseKey:
          type: string
        ApiId:
          type: string
      required:
        - IntegrationId
        - IntegrationResponseKey
        - ApiId
      x-stackql-resource-name: IntegrationResponse
    Method:
      type: object
      properties:
        ApiKeyRequired:
          description: Indicates whether the method requires clients to submit a valid API key.
          type: boolean
        AuthorizationScopes:
          description: A list of authorization scopes configured on the method.
          type: array
          items:
            type: string
        AuthorizationType:
          description: The method's authorization type.
          type: string
          enum:
            - NONE
            - AWS_IAM
            - CUSTOM
            - COGNITO_USER_POOLS
        AuthorizerId:
          description: The identifier of the authorizer to use on this method.
          type: string
        HttpMethod:
          description: The backend system that the method calls when it receives a request.
          type: string
        Integration:
          description: The backend system that the method calls when it receives a request.
          $ref: '#/components/schemas/Integration'
        MethodResponses:
          description: The responses that can be sent to the client who calls the method.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MethodResponse'
        OperationName:
          description: A friendly operation name for the method.
          type: string
        RequestModels:
          description: The resources that are used for the request's content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestParameters:
          description: The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        RequestValidatorId:
          description: The ID of the associated request validator.
          type: string
        ResourceId:
          description: The ID of an API Gateway resource.
          type: string
        RestApiId:
          description: The ID of the RestApi resource in which API Gateway creates the method.
          type: string
      required:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-stackql-resource-name: Method
    Model:
      type: object
      properties:
        ModelId:
          type: string
        Description:
          type: string
        ContentType:
          type: string
        Schema:
          type: object
        ApiId:
          type: string
        Name:
          type: string
      required:
        - ApiId
        - Schema
        - Name
      x-stackql-resource-name: Model
    RequestValidator:
      type: object
      properties:
        RequestValidatorId:
          description: ID of the request validator.
          type: string
        Name:
          description: Name of the request validator.
          type: string
        RestApiId:
          description: The identifier of the targeted API entity.
          type: string
        ValidateRequestBody:
          description: 'Indicates whether to validate the request body according to the configured schema for the targeted API and method. '
          type: boolean
        ValidateRequestParameters:
          description: Indicates whether to validate request parameters.
          type: boolean
      required:
        - RestApiId
      x-stackql-resource-name: RequestValidator
    Resource:
      type: object
      properties:
        ResourceId:
          description: A unique primary identifier for a Resource
          type: string
        RestApiId:
          description: The ID of the RestApi resource in which you want to create this resource..
          type: string
        ParentId:
          description: The parent resource's identifier.
          type: string
        PathPart:
          description: The last path segment for this resource.
          type: string
      required:
        - ParentId
        - PathPart
        - RestApiId
      x-stackql-resource-name: Resource
    S3Location:
      type: object
      additionalProperties: false
      properties:
        Bucket:
          type: string
        ETag:
          type: string
        Version:
          type: string
        Key:
          type: string
    RestApi:
      type: object
      properties:
        RestApiId:
          type: string
        RootResourceId:
          type: string
        ApiKeySourceType:
          type: string
        BinaryMediaTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        Body:
          type: string
        BodyS3Location:
          $ref: '#/components/schemas/S3Location'
        CloneFrom:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        Description:
          type: string
        DisableExecuteApiEndpoint:
          type: boolean
        FailOnWarnings:
          type: boolean
        Name:
          type: string
        MinimumCompressionSize:
          type: integer
        Mode:
          type: string
        Policy:
          type: string
        Parameters:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: RestApi
    Stage:
      type: object
      properties:
        DeploymentId:
          type: string
        Description:
          type: string
        AutoDeploy:
          type: boolean
        RouteSettings:
          type: object
        StageName:
          type: string
        StageVariables:
          type: object
        AccessPolicyId:
          type: string
        ClientCertificateId:
          type: string
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
        Id:
          type: string
        ApiId:
          type: string
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
        Tags:
          type: object
      required:
        - StageName
        - ApiId
      x-stackql-resource-name: Stage
    ApiStage:
      type: object
      additionalProperties: false
      properties:
        ApiId:
          type: string
          description: The ID of an API that is in the specified Stage property that you want to associate with the usage plan.
        Stage:
          type: string
          description: The name of the stage to associate with the usage plan.
        Throttle:
          type: object
          description: Map containing method-level throttling information for an API stage in a usage plan. The key for the map is the path and method for which to configure custom throttling, for example, '/pets/GET'. Duplicates are not allowed.
          additionalProperties: false
          x-patternProperties:
            .*:
              $ref: '#/components/schemas/ThrottleSettings'
    ThrottleSettings:
      type: object
      additionalProperties: false
      properties:
        BurstLimit:
          type: integer
          minimum: 0
          description: The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
        RateLimit:
          type: number
          minimum: 0
          description: The API request steady-state rate limit (average requests per second over an extended period of time).
    QuotaSettings:
      type: object
      additionalProperties: false
      properties:
        Limit:
          type: integer
          minimum: 0
          description: The maximum number of requests that users can make within the specified time period.
        Offset:
          type: integer
          minimum: 0
          description: For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
        Period:
          type: string
          description: The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
    UsagePlan:
      type: object
      properties:
        Id:
          type: string
          description: The provider-assigned unique ID for this managed resource.
        ApiStages:
          type: array
          description: The API stages to associate with this usage plan.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApiStage'
        Description:
          type: string
          description: A description of the usage plan.
        Quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: Configures the number of requests that users can make within a given interval.
        Tags:
          type: array
          description: An array of arbitrary tags (key-value pairs) to associate with the usage plan.
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: Configures the overall request rate (average requests per second) and burst capacity.
        UsagePlanName:
          type: string
          description: A name for the usage plan.
      x-stackql-resource-name: UsagePlan
    UsagePlanKey:
      type: object
      properties:
        KeyId:
          description: The ID of the usage plan key.
          type: string
        KeyType:
          description: The type of usage plan key. Currently, the only valid key type is API_KEY.
          type: string
          enum:
            - API_KEY
        UsagePlanId:
          description: The ID of the usage plan.
          type: string
        Id:
          description: 'An autogenerated ID which is a combination of the ID of the key and ID of the usage plan combined with a : such as 123abcdef:abc123.'
          type: string
      required:
        - KeyType
        - UsagePlanId
        - KeyId
      x-stackql-resource-name: UsagePlanKey
    VpcLink:
      type: object
      properties:
        VpcLinkId:
          type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        Name:
          type: string
      required:
        - SubnetIds
        - Name
      x-stackql-resource-name: VpcLink
    BodyS3Location:
      type: object
      additionalProperties: false
      properties:
        Etag:
          type: string
        Bucket:
          type: string
        Version:
          type: string
        Key:
          type: string
    Cors:
      type: object
      additionalProperties: false
      properties:
        AllowOrigins:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowCredentials:
          type: boolean
        ExposeHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        MaxAge:
          type: integer
        AllowMethods:
          type: array
          uniqueItems: false
          items:
            type: string
    Api:
      type: object
      properties:
        RouteSelectionExpression:
          type: string
        BodyS3Location:
          $ref: '#/components/schemas/BodyS3Location'
        Description:
          type: string
        ApiEndpoint:
          type: string
        BasePath:
          type: string
        FailOnWarnings:
          type: boolean
        DisableExecuteApiEndpoint:
          type: boolean
        DisableSchemaValidation:
          type: boolean
        Name:
          type: string
        Target:
          type: string
        CredentialsArn:
          type: string
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
        Version:
          type: string
        ProtocolType:
          type: string
        RouteKey:
          type: string
        ApiId:
          type: string
        Body:
          type: object
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        ApiKeySelectionExpression:
          type: string
      x-stackql-resource-name: Api
    AccessLogSettings:
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          type: string
        Format:
          type: string
    RouteSettings:
      type: object
      additionalProperties: false
      properties:
        DetailedMetricsEnabled:
          type: boolean
        LoggingLevel:
          type: string
        DataTraceEnabled:
          type: boolean
        ThrottlingBurstLimit:
          type: integer
        ThrottlingRateLimit:
          type: number
    StageOverrides:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
        AutoDeploy:
          type: boolean
        RouteSettings:
          type: object
        StageVariables:
          type: object
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
    RouteOverrides:
      type: object
      additionalProperties: false
      properties:
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
        Target:
          type: string
        AuthorizationType:
          type: string
        AuthorizerId:
          type: string
        OperationName:
          type: string
    IntegrationOverrides:
      type: object
      additionalProperties: false
      properties:
        TimeoutInMillis:
          type: integer
        Description:
          type: string
        PayloadFormatVersion:
          type: string
        IntegrationMethod:
          type: string
    ApiGatewayManagedOverrides:
      type: object
      properties:
        Stage:
          $ref: '#/components/schemas/StageOverrides'
        Integration:
          $ref: '#/components/schemas/IntegrationOverrides'
        Id:
          type: string
        ApiId:
          type: string
        Route:
          $ref: '#/components/schemas/RouteOverrides'
      required:
        - ApiId
      x-stackql-resource-name: ApiGatewayManagedOverrides
    ApiMapping:
      type: object
      properties:
        Stage:
          type: string
        Id:
          type: string
        ApiMappingKey:
          type: string
        DomainName:
          type: string
        ApiId:
          type: string
      required:
        - DomainName
        - Stage
        - ApiId
      x-stackql-resource-name: ApiMapping
    JWTConfiguration:
      type: object
      additionalProperties: false
      properties:
        Issuer:
          type: string
        Audience:
          type: array
          uniqueItems: false
          items:
            type: string
    DomainNameConfiguration:
      type: object
      additionalProperties: false
      properties:
        OwnershipVerificationCertificateArn:
          type: string
        EndpointType:
          type: string
        CertificateName:
          type: string
        SecurityPolicy:
          type: string
        CertificateArn:
          type: string
    TlsConfig:
      type: object
      additionalProperties: false
      properties:
        ServerNameToVerify:
          type: string
    ParameterConstraints:
      type: object
      additionalProperties: false
      properties:
        Required:
          type: boolean
    Route:
      type: object
      properties:
        RouteId:
          type: string
        RouteResponseSelectionExpression:
          type: string
        RequestModels:
          type: object
        OperationName:
          type: string
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
        ApiKeyRequired:
          type: boolean
        RouteKey:
          type: string
        AuthorizationType:
          type: string
        ModelSelectionExpression:
          type: string
        ApiId:
          type: string
        RequestParameters:
          type: object
          items:
            $ref: '#/components/schemas/ParameterConstraints'
        Target:
          type: string
        AuthorizerId:
          type: string
      required:
        - RouteKey
        - ApiId
      x-stackql-resource-name: Route
    RouteResponse:
      type: object
      properties:
        RouteResponseKey:
          type: string
        ResponseParameters:
          type: object
        RouteId:
          type: string
        Id:
          type: string
        ModelSelectionExpression:
          type: string
        ApiId:
          type: string
        ResponseModels:
          type: object
      required:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-stackql-resource-name: RouteResponse
x-stackql-views:
  - Account:
      name: Account
      id: aws.apigateway.Account
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CloudWatchRoleArn') as cloud_watch_role_arn
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Account' ;
  - ApiKey:
      name: ApiKey
      id: aws.apigateway.ApiKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.APIKeyId') as a_pi_key_id,
              JSON_EXTRACT(Properties, '$.CustomerId') as customer_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.GenerateDistinctId') as generate_distinct_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StageKeys') as stage_keys,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::ApiKey' ;
  - Authorizer:
      name: Authorizer
      id: aws.apigateway.Authorizer
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentialsArn') as authorizer_credentials_arn,
              JSON_EXTRACT(Properties, '$.AuthorizerType') as authorizer_type,
              JSON_EXTRACT(Properties, '$.JwtConfiguration.Issuer') as jwt_configuration_issuer,
              JSON_EXTRACT(Properties, '$.JwtConfiguration.Audience') as jwt_configuration_audience,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.EnableSimpleResponses') as enable_simple_responses,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Authorizer' ;
  - BasePathMapping:
      name: BasePathMapping
      id: aws.apigateway.BasePathMapping
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Stage') as stage
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::BasePathMapping' ;
  - ClientCertificate:
      name: ClientCertificate
      id: aws.apigateway.ClientCertificate
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::ClientCertificate' ;
  - Deployment:
      name: Deployment
      id: aws.apigateway.Deployment
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Deployment' ;
  - DocumentationPart:
      name: DocumentationPart
      id: aws.apigateway.DocumentationPart
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.Location.Method') as location_method,
              JSON_EXTRACT(Properties, '$.Location.Name') as location_name,
              JSON_EXTRACT(Properties, '$.Location.Path') as location_path,
              JSON_EXTRACT(Properties, '$.Location.StatusCode') as location_status_code,
              JSON_EXTRACT(Properties, '$.Location.Type') as location_type,
              JSON_EXTRACT(Properties, '$.Properties') as properties,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::DocumentationPart' ;
  - DocumentationVersion:
      name: DocumentationVersion
      id: aws.apigateway.DocumentationVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::DocumentationVersion' ;
  - DomainName:
      name: DomainName
      id: aws.apigateway.DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreVersion') as mutual_tls_authentication_truststore_version,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreUri') as mutual_tls_authentication_truststore_uri,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DomainNameConfigurations') as domain_name_configurations,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::DomainName' ;
  - GatewayResponse:
      name: GatewayResponse
      id: aws.apigateway.GatewayResponse
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResponseType') as response_type,
              JSON_EXTRACT(Properties, '$.StatusCode') as status_code,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::GatewayResponse' ;
  - Integration:
      name: Integration
      id: aws.apigateway.Integration
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ConnectionType') as connection_type,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.IntegrationMethod') as integration_method,
              JSON_EXTRACT(Properties, '$.PassthroughBehavior') as passthrough_behavior,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.ConnectionId') as connection_id,
              JSON_EXTRACT(Properties, '$.IntegrationUri') as integration_uri,
              JSON_EXTRACT(Properties, '$.PayloadFormatVersion') as payload_format_version,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.RequestTemplates') as request_templates,
              JSON_EXTRACT(Properties, '$.TimeoutInMillis') as timeout_in_millis,
              JSON_EXTRACT(Properties, '$.TlsConfig.ServerNameToVerify') as tls_config_server_name_to_verify,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.IntegrationSubtype') as integration_subtype,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.IntegrationType') as integration_type
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Integration' ;
  - IntegrationResponse:
      name: IntegrationResponse
      id: aws.apigateway.IntegrationResponse
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseKey') as integration_response_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::IntegrationResponse' ;
  - Method:
      name: Method
      id: aws.apigateway.Method
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method,
              JSON_EXTRACT(Properties, '$.Integration.Description') as integration_description,
              JSON_EXTRACT(Properties, '$.Integration.TemplateSelectionExpression') as integration_template_selection_expression,
              JSON_EXTRACT(Properties, '$.Integration.ConnectionType') as integration_connection_type,
              JSON_EXTRACT(Properties, '$.Integration.ResponseParameters') as integration_response_parameters,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationMethod') as integration_integration_method,
              JSON_EXTRACT(Properties, '$.Integration.PassthroughBehavior') as integration_passthrough_behavior,
              JSON_EXTRACT(Properties, '$.Integration.RequestParameters') as integration_request_parameters,
              JSON_EXTRACT(Properties, '$.Integration.ConnectionId') as integration_connection_id,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationUri') as integration_integration_uri,
              JSON_EXTRACT(Properties, '$.Integration.PayloadFormatVersion') as integration_payload_format_version,
              JSON_EXTRACT(Properties, '$.Integration.CredentialsArn') as integration_credentials_arn,
              JSON_EXTRACT(Properties, '$.Integration.RequestTemplates') as integration_request_templates,
              JSON_EXTRACT(Properties, '$.Integration.TimeoutInMillis') as integration_timeout_in_millis,
              JSON_EXTRACT(Properties, '$.Integration.TlsConfig') as integration_tls_config,
              JSON_EXTRACT(Properties, '$.Integration.ContentHandlingStrategy') as integration_content_handling_strategy,
              JSON_EXTRACT(Properties, '$.Integration.Id') as integration_id,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationSubtype') as integration_integration_subtype,
              JSON_EXTRACT(Properties, '$.Integration.ApiId') as integration_api_id,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationType') as integration_integration_type,
              JSON_EXTRACT(Properties, '$.MethodResponses') as method_responses,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Method' ;
  - Model:
      name: Model
      id: aws.apigateway.Model
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ModelId') as model_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Schema') as schema,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Model' ;
  - RequestValidator:
      name: RequestValidator
      id: aws.apigateway.RequestValidator
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ValidateRequestBody') as validate_request_body,
              JSON_EXTRACT(Properties, '$.ValidateRequestParameters') as validate_request_parameters
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::RequestValidator' ;
  - Resource:
      name: Resource
      id: aws.apigateway.Resource
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.PathPart') as path_part
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Resource' ;
  - RestApi:
      name: RestApi
      id: aws.apigateway.RestApi
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RootResourceId') as root_resource_id,
              JSON_EXTRACT(Properties, '$.ApiKeySourceType') as api_key_source_type,
              JSON_EXTRACT(Properties, '$.BinaryMediaTypes') as binary_media_types,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Bucket') as body_s3_location_bucket,
              JSON_EXTRACT(Properties, '$.BodyS3Location.ETag') as body_s3_location_etag,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Version') as body_s3_location_version,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Key') as body_s3_location_key,
              JSON_EXTRACT(Properties, '$.CloneFrom') as clone_from,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.Types') as endpoint_configuration_types,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.VpcEndpointIds') as endpoint_configuration_vpc_endpoint_ids,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.MinimumCompressionSize') as minimum_compression_size,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::RestApi' ;
  - Stage:
      name: Stage
      id: aws.apigateway.Stage
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AutoDeploy') as auto_deploy,
              JSON_EXTRACT(Properties, '$.RouteSettings') as route_settings,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.StageVariables') as stage_variables,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.AccessLogSettings.DestinationArn') as access_log_settings_destination_arn,
              JSON_EXTRACT(Properties, '$.AccessLogSettings.Format') as access_log_settings_format,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.DetailedMetricsEnabled') as default_route_settings_detailed_metrics_enabled,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.LoggingLevel') as default_route_settings_logging_level,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.DataTraceEnabled') as default_route_settings_data_trace_enabled,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.ThrottlingBurstLimit') as default_route_settings_throttling_burst_limit,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.ThrottlingRateLimit') as default_route_settings_throttling_rate_limit,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Stage' ;
  - UsagePlan:
      name: UsagePlan
      id: aws.apigateway.UsagePlan
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiStages') as api_stages,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Quota.Limit') as quota_limit,
              JSON_EXTRACT(Properties, '$.Quota.Offset') as quota_offset,
              JSON_EXTRACT(Properties, '$.Quota.Period') as quota_period,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Throttle.BurstLimit') as throttle_burst_limit,
              JSON_EXTRACT(Properties, '$.Throttle.RateLimit') as throttle_rate_limit,
              JSON_EXTRACT(Properties, '$.UsagePlanName') as usage_plan_name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::UsagePlan' ;
  - UsagePlanKey:
      name: UsagePlanKey
      id: aws.apigateway.UsagePlanKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.KeyId') as key_id,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.UsagePlanId') as usage_plan_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::UsagePlanKey' ;
  - VpcLink:
      name: VpcLink
      id: aws.apigateway.VpcLink
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::VpcLink' ;
  - Api:
      name: Api
      id: aws.apigateway.Api
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RouteSelectionExpression') as route_selection_expression,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Etag') as body_s3_location_etag,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Bucket') as body_s3_location_bucket,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Version') as body_s3_location_version,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Key') as body_s3_location_key,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApiEndpoint') as api_endpoint,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.DisableSchemaValidation') as disable_schema_validation,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowOrigins') as cors_configuration_allow_origins,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowCredentials') as cors_configuration_allow_credentials,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.ExposeHeaders') as cors_configuration_expose_headers,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowHeaders') as cors_configuration_allow_headers,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.MaxAge') as cors_configuration_max_age,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowMethods') as cors_configuration_allow_methods,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Api' ;
  - ApiGatewayManagedOverrides:
      name: ApiGatewayManagedOverrides
      id: aws.apigateway.ApiGatewayManagedOverrides
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Stage.Description') as stage_description,
              JSON_EXTRACT(Properties, '$.Stage.AccessLogSettings') as stage_access_log_settings,
              JSON_EXTRACT(Properties, '$.Stage.AutoDeploy') as stage_auto_deploy,
              JSON_EXTRACT(Properties, '$.Stage.RouteSettings') as stage_route_settings,
              JSON_EXTRACT(Properties, '$.Stage.StageVariables') as stage_stage_variables,
              JSON_EXTRACT(Properties, '$.Stage.DefaultRouteSettings') as stage_default_route_settings,
              JSON_EXTRACT(Properties, '$.Integration.TimeoutInMillis') as integration_timeout_in_millis,
              JSON_EXTRACT(Properties, '$.Integration.Description') as integration_description,
              JSON_EXTRACT(Properties, '$.Integration.PayloadFormatVersion') as integration_payload_format_version,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationMethod') as integration_integration_method,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Route.AuthorizationScopes') as route_authorization_scopes,
              JSON_EXTRACT(Properties, '$.Route.Target') as route_target,
              JSON_EXTRACT(Properties, '$.Route.AuthorizationType') as route_authorization_type,
              JSON_EXTRACT(Properties, '$.Route.AuthorizerId') as route_authorizer_id,
              JSON_EXTRACT(Properties, '$.Route.OperationName') as route_operation_name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::ApiGatewayManagedOverrides' ;
  - ApiMapping:
      name: ApiMapping
      id: aws.apigateway.ApiMapping
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Stage') as stage,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiMappingKey') as api_mapping_key,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::ApiMapping' ;
  - Route:
      name: Route
      id: aws.apigateway.Route
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseSelectionExpression') as route_response_selection_expression,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::Route' ;
  - RouteResponse:
      name: RouteResponse
      id: aws.apigateway.RouteResponse
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RouteResponseKey') as route_response_key,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ResponseModels') as response_models
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::ApiGateway::RouteResponse' ;
