openapi: 3.0.0
info:
  title: Logs
  version: 1.0.0
paths: {}
components:
  schemas:
    Destination:
      type: object
      properties:
        Arn:
          type: string
        DestinationName:
          description: The name of the destination resource
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[^:*]{1,512}$
        DestinationPolicy:
          description: An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
          type: string
          minLength: 1
        RoleArn:
          description: The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
          type: string
          minLength: 1
        TargetArn:
          description: The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
          type: string
          minLength: 1
      required:
        - DestinationName
        - TargetArn
        - RoleArn
      x-stackql-resource-name: Destination
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    LogGroup:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    LogStream:
      type: object
      properties:
        Id:
          type: string
        LogGroupName:
          type: string
        LogStreamName:
          type: string
      required:
        - LogGroupName
      x-stackql-resource-name: LogStream
    Dimension:
      description: the key-value pairs that further define a metric.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key of the dimension. Maximum length of 255.
          minLength: 1
          maxLength: 255
        Value:
          type: string
          description: The value of the dimension. Maximum length of 255.
          minLength: 1
          maxLength: 255
      required:
        - Key
        - Value
    MetricTransformation:
      type: object
      properties:
        DefaultValue:
          description: The value to emit when a filter pattern does not match a log event. This value can be null.
          type: number
        MetricName:
          description: The name of the CloudWatch metric. Metric name must be in ASCII format.
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^((?![:*$])[\x00-\x7F]){1,255}
        MetricNamespace:
          x-$comment: Namespaces can be up to 256 characters long; valid characters include 0-9A-Za-z.-_/#
          description: The namespace of the CloudWatch metric.
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^[0-9a-zA-Z\.\-_\/#]{1,256}
        MetricValue:
          description: The value to publish to the CloudWatch metric when a filter pattern matches a log event.
          type: string
          pattern: .{1,100}
          minLength: 1
          maxLength: 100
        Unit:
          description: The unit to assign to the metric. If you omit this, the unit is set as None.
          type: string
          enum:
            - Seconds
            - Microseconds
            - Milliseconds
            - Bytes
            - Kilobytes
            - Megabytes
            - Gigabytes
            - Terabytes
            - Bits
            - Kilobits
            - Megabits
            - Gigabits
            - Terabits
            - Percent
            - Count
            - Bytes/Second
            - Kilobytes/Second
            - Megabytes/Second
            - Gigabytes/Second
            - Terabytes/Second
            - Bits/Second
            - Kilobits/Second
            - Megabits/Second
            - Gigabits/Second
            - Terabits/Second
            - Count/Second
            - None
        Dimensions:
          description: Dimensions are the key-value pairs that further define a metric
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 1
          maxItems: 3
          items:
            $ref: '#/components/schemas/Dimension'
      required:
        - MetricName
        - MetricNamespace
        - MetricValue
      additionalProperties: false
    MetricFilter:
      type: object
      properties:
        FilterName:
          description: A name for the metric filter.
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[^:*]{1,512}
        FilterPattern:
          description: Pattern that Logs follows to interpret each entry in a log.
          type: string
          maxLength: 1024
        LogGroupName:
          description: Existing log group that you want to associate with this filter.
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[.\-_/#A-Za-z0-9]{1,512}
        MetricTransformations:
          description: A collection of information that defines how metric data gets emitted.
          type: array
          minItems: 1
          maxItems: 1
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MetricTransformation'
      required:
        - FilterPattern
        - LogGroupName
        - MetricTransformations
      x-stackql-resource-name: MetricFilter
    QueryDefinition:
      type: object
      properties:
        Name:
          description: A name for the saved query definition
          type: string
          minLength: 1
          maxLength: 255
        QueryString:
          description: The query string to use for this definition
          type: string
          minLength: 1
          maxLength: 10000
        LogGroupNames:
          description: Optionally define specific log groups as part of your query definition
          type: array
          x-insertionOrder: false
          items:
            description: LogGroup name
            $ref: '#/components/schemas/LogGroup'
        QueryDefinitionId:
          description: Unique identifier of a query definition
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Name
        - QueryString
      x-stackql-resource-name: QueryDefinition
    ResourcePolicy:
      type: object
      properties:
        PolicyName:
          description: A name for resource policy
          type: string
          pattern: ^([^:*\/]+\/?)*[^:*\/]+$
          minLength: 1
          maxLength: 255
        PolicyDocument:
          description: The policy document
          type: string
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          minLength: 1
          maxLength: 5120
      required:
        - PolicyName
        - PolicyDocument
      x-stackql-resource-name: ResourcePolicy
    SubscriptionFilter:
      type: object
      properties:
        FilterName:
          description: The name of the filter generated by resource.
          type: string
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the destination.
          type: string
        FilterPattern:
          description: The filtering expressions that restrict what gets delivered to the destination AWS resource.
          type: string
        LogGroupName:
          description: Existing log group that you want to associate with this filter.
          type: string
        RoleArn:
          description: The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
          type: string
        Distribution:
          description: The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
          type: string
          enum:
            - Random
            - ByLogStream
      required:
        - DestinationArn
        - FilterPattern
        - LogGroupName
      x-stackql-resource-name: SubscriptionFilter
x-stackql-views:
  - Destination:
      name: Destination
      id: aws.logs.Destination
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(Properties, '$.DestinationPolicy') as destination_policy,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::Destination' ;
  - LogStream:
      name: LogStream
      id: aws.logs.LogStream
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.LogStreamName') as log_stream_name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::LogStream' ;
  - MetricFilter:
      name: MetricFilter
      id: aws.logs.MetricFilter
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.MetricTransformations') as metric_transformations
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::MetricFilter' ;
  - QueryDefinition:
      name: QueryDefinition
      id: aws.logs.QueryDefinition
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.LogGroupNames') as log_group_names,
              JSON_EXTRACT(Properties, '$.QueryDefinitionId') as query_definition_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::QueryDefinition' ;
  - ResourcePolicy:
      name: ResourcePolicy
      id: aws.logs.ResourcePolicy
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::ResourcePolicy' ;
  - SubscriptionFilter:
      name: SubscriptionFilter
      id: aws.logs.SubscriptionFilter
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Distribution') as distribution
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Logs::SubscriptionFilter' ;
