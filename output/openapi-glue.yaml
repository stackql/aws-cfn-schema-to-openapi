openapi: 3.0.0
info:
  title: Glue
  version: 1.0.0
paths: {}
components:
  schemas:
    CsvClassifier:
      type: object
      additionalProperties: false
      properties:
        QuoteSymbol:
          type: string
        ContainsHeader:
          type: string
        Delimiter:
          type: string
        Header:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowSingleColumn:
          type: boolean
        DisableValueTrimming:
          type: boolean
        Name:
          type: string
    JsonClassifier:
      type: object
      additionalProperties: false
      properties:
        JsonPath:
          type: string
        Name:
          type: string
      required:
        - JsonPath
    XMLClassifier:
      type: object
      additionalProperties: false
      properties:
        RowTag:
          type: string
        Classification:
          type: string
        Name:
          type: string
      required:
        - RowTag
        - Classification
    GrokClassifier:
      type: object
      additionalProperties: false
      properties:
        CustomPatterns:
          type: string
        GrokPattern:
          type: string
        Classification:
          type: string
        Name:
          type: string
      required:
        - GrokPattern
        - Classification
    Classifier:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        XMLClassifier:
          $ref: '#/components/schemas/XMLClassifier'
          x-is-top-level-property: true
        JsonClassifier:
          $ref: '#/components/schemas/JsonClassifier'
          x-is-top-level-property: true
        CsvClassifier:
          $ref: '#/components/schemas/CsvClassifier'
          x-is-top-level-property: true
        GrokClassifier:
          $ref: '#/components/schemas/GrokClassifier'
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: Classifier
    ConnectionInput:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        ConnectionType:
          type: string
        MatchCriteria:
          type: array
          uniqueItems: false
          items:
            type: string
        PhysicalConnectionRequirements:
          $ref: '#/components/schemas/PhysicalConnectionRequirements'
        ConnectionProperties:
          type: object
        Name:
          type: string
      required:
        - ConnectionType
    PhysicalConnectionRequirements:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        SecurityGroupIdList:
          type: array
          uniqueItems: false
          items:
            type: string
        SubnetId:
          type: string
    Connection:
      type: object
      properties:
        ConnectionInput:
          $ref: '#/components/schemas/ConnectionInput'
          x-is-top-level-property: true
        CatalogId:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
      required:
        - ConnectionInput
        - CatalogId
      x-stackql-resource-name: Connection
    S3Target:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
        SampleSize:
          type: integer
        Exclusions:
          type: array
          uniqueItems: false
          items:
            type: string
        DlqEventQueueArn:
          type: string
        EventQueueArn:
          type: string
    SchemaChangePolicy:
      type: object
      additionalProperties: false
      properties:
        UpdateBehavior:
          type: string
        DeleteBehavior:
          type: string
    Schedule:
      type: object
      additionalProperties: false
      properties:
        ScheduleExpression:
          type: string
    RecrawlPolicy:
      type: object
      additionalProperties: false
      properties:
        RecrawlBehavior:
          type: string
    MongoDBTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
    JdbcTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
        Exclusions:
          type: array
          uniqueItems: false
          items:
            type: string
    Targets:
      type: object
      additionalProperties: false
      properties:
        CatalogTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/CatalogTarget'
        MongoDBTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/MongoDBTarget'
        JdbcTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/JdbcTarget'
        S3Targets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/S3Target'
        DynamoDBTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DynamoDBTarget'
    DynamoDBTarget:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
    CatalogTarget:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        Tables:
          type: array
          uniqueItems: false
          items:
            type: string
    Crawler:
      type: object
      properties:
        Classifiers:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        SchemaChangePolicy:
          $ref: '#/components/schemas/SchemaChangePolicy'
          x-is-top-level-property: true
        Configuration:
          type: string
          x-is-top-level-property: true
        RecrawlPolicy:
          $ref: '#/components/schemas/RecrawlPolicy'
          x-is-top-level-property: true
        DatabaseName:
          type: string
          x-is-top-level-property: true
        Targets:
          $ref: '#/components/schemas/Targets'
          x-is-top-level-property: true
        CrawlerSecurityConfiguration:
          type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Role:
          type: string
          x-is-top-level-property: true
        Schedule:
          $ref: '#/components/schemas/Schedule'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        TablePrefix:
          type: string
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
      required:
        - Role
        - Targets
      x-stackql-resource-name: Crawler
    DatabaseIdentifier:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        CatalogId:
          type: string
    PrincipalPrivileges:
      type: object
      additionalProperties: false
      properties:
        Permissions:
          type: array
          uniqueItems: false
          items:
            type: string
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
    DataLakePrincipal:
      type: object
      additionalProperties: false
      properties:
        DataLakePrincipalIdentifier:
          type: string
    DatabaseInput:
      type: object
      additionalProperties: false
      properties:
        LocationUri:
          type: string
        CreateTableDefaultPermissions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PrincipalPrivileges'
        Description:
          type: string
        Parameters:
          type: object
        TargetDatabase:
          $ref: '#/components/schemas/DatabaseIdentifier'
        Name:
          type: string
    Database:
      type: object
      properties:
        CatalogId:
          type: string
          x-is-top-level-property: true
        DatabaseInput:
          $ref: '#/components/schemas/DatabaseInput'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
      required:
        - DatabaseInput
        - CatalogId
      x-stackql-resource-name: Database
    DataCatalogEncryptionSettings:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        DataCatalogEncryptionSettings:
          $ref: '#/components/schemas/DataCatalogEncryptionSettings'
          x-is-top-level-property: true
        CatalogId:
          type: string
          x-is-top-level-property: true
      required:
        - CatalogId
        - DataCatalogEncryptionSettings
      x-stackql-resource-name: DataCatalogEncryptionSettings
    EncryptionAtRest:
      type: object
      additionalProperties: false
      properties:
        CatalogEncryptionMode:
          type: string
        SseAwsKmsKeyId:
          type: string
    ConnectionPasswordEncryption:
      type: object
      additionalProperties: false
      properties:
        ReturnConnectionPasswordEncrypted:
          type: boolean
        KmsKeyId:
          type: string
    DevEndpoint:
      type: object
      properties:
        ExtraJarsS3Path:
          type: string
          x-is-top-level-property: true
        PublicKey:
          type: string
          x-is-top-level-property: true
        NumberOfNodes:
          type: integer
          x-is-top-level-property: true
        Arguments:
          type: object
          x-is-top-level-property: true
        SubnetId:
          type: string
          x-is-top-level-property: true
        PublicKeys:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        RoleArn:
          type: string
          x-is-top-level-property: true
        WorkerType:
          type: string
          x-is-top-level-property: true
        EndpointName:
          type: string
          x-is-top-level-property: true
        GlueVersion:
          type: string
          x-is-top-level-property: true
        ExtraPythonLibsS3Path:
          type: string
          x-is-top-level-property: true
        SecurityConfiguration:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        NumberOfWorkers:
          type: integer
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
      required:
        - RoleArn
      x-stackql-resource-name: DevEndpoint
    NotificationProperty:
      type: object
      additionalProperties: false
      properties:
        NotifyDelayAfter:
          type: integer
    JobCommand:
      type: object
      additionalProperties: false
      properties:
        ScriptLocation:
          type: string
        PythonVersion:
          type: string
        Name:
          type: string
    ExecutionProperty:
      type: object
      additionalProperties: false
      properties:
        MaxConcurrentRuns:
          type: number
    ConnectionsList:
      type: object
      additionalProperties: false
      properties:
        Connections:
          type: array
          uniqueItems: false
          items:
            type: string
    Job:
      type: object
      properties:
        Connections:
          $ref: '#/components/schemas/ConnectionsList'
          x-is-top-level-property: true
        MaxRetries:
          type: number
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        Timeout:
          type: integer
          x-is-top-level-property: true
        AllocatedCapacity:
          type: number
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Role:
          type: string
          x-is-top-level-property: true
        DefaultArguments:
          type: object
          x-is-top-level-property: true
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
          x-is-top-level-property: true
        WorkerType:
          type: string
          x-is-top-level-property: true
        ExecutionClass:
          type: string
          x-is-top-level-property: true
        LogUri:
          type: string
          x-is-top-level-property: true
        Command:
          $ref: '#/components/schemas/JobCommand'
          x-is-top-level-property: true
        GlueVersion:
          type: string
          x-is-top-level-property: true
        ExecutionProperty:
          $ref: '#/components/schemas/ExecutionProperty'
          x-is-top-level-property: true
        SecurityConfiguration:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        NumberOfWorkers:
          type: integer
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
        MaxCapacity:
          type: number
          x-is-top-level-property: true
        NonOverridableArguments:
          type: object
          x-is-top-level-property: true
      required:
        - Role
        - Command
      x-stackql-resource-name: Job
    GlueTables:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        DatabaseName:
          type: string
        TableName:
          type: string
        CatalogId:
          type: string
      required:
        - TableName
        - DatabaseName
    TransformEncryption:
      type: object
      additionalProperties: false
      properties:
        TaskRunSecurityConfigurationName:
          type: string
        MLUserDataEncryption:
          $ref: '#/components/schemas/MLUserDataEncryption'
    MLUserDataEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyId:
          type: string
        MLUserDataEncryptionMode:
          type: string
      required:
        - MLUserDataEncryptionMode
    TransformParameters:
      type: object
      additionalProperties: false
      properties:
        TransformType:
          type: string
        FindMatchesParameters:
          $ref: '#/components/schemas/FindMatchesParameters'
      required:
        - TransformType
    InputRecordTables:
      type: object
      additionalProperties: false
      properties:
        GlueTables:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/GlueTables'
    FindMatchesParameters:
      type: object
      additionalProperties: false
      properties:
        PrecisionRecallTradeoff:
          type: number
        EnforceProvidedLabels:
          type: boolean
        PrimaryKeyColumnName:
          type: string
        AccuracyCostTradeoff:
          type: number
      required:
        - PrimaryKeyColumnName
    MLTransform:
      type: object
      properties:
        MaxRetries:
          type: integer
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        TransformEncryption:
          $ref: '#/components/schemas/TransformEncryption'
          x-is-top-level-property: true
        Timeout:
          type: integer
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Role:
          type: string
          x-is-top-level-property: true
        WorkerType:
          type: string
          x-is-top-level-property: true
        GlueVersion:
          type: string
          x-is-top-level-property: true
        TransformParameters:
          $ref: '#/components/schemas/TransformParameters'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        InputRecordTables:
          $ref: '#/components/schemas/InputRecordTables'
          x-is-top-level-property: true
        NumberOfWorkers:
          type: integer
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
        MaxCapacity:
          type: number
          x-is-top-level-property: true
      required:
        - Role
        - TransformParameters
        - InputRecordTables
      x-stackql-resource-name: MLTransform
    SchemaReference:
      type: object
      additionalProperties: false
      properties:
        SchemaId:
          $ref: '#/components/schemas/SchemaId'
        SchemaVersionId:
          type: string
        SchemaVersionNumber:
          type: integer
    Order:
      type: object
      additionalProperties: false
      properties:
        Column:
          type: string
        SortOrder:
          type: integer
      required:
        - Column
        - SortOrder
    SkewedInfo:
      type: object
      additionalProperties: false
      properties:
        SkewedColumnValues:
          type: array
          uniqueItems: false
          items:
            type: string
        SkewedColumnValueLocationMaps:
          type: object
        SkewedColumnNames:
          type: array
          uniqueItems: false
          items:
            type: string
    Column:
      type: object
      additionalProperties: false
      properties:
        Comment:
          type: string
        Type:
          type: string
        Name:
          type: string
      required:
        - Name
    StorageDescriptor:
      type: object
      additionalProperties: false
      properties:
        StoredAsSubDirectories:
          type: boolean
        Parameters:
          type: object
        BucketColumns:
          type: array
          uniqueItems: false
          items:
            type: string
        NumberOfBuckets:
          type: integer
        OutputFormat:
          type: string
        Columns:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Column'
        SerdeInfo:
          $ref: '#/components/schemas/SerdeInfo'
        SortColumns:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Order'
        Compressed:
          type: boolean
        SchemaReference:
          $ref: '#/components/schemas/SchemaReference'
        SkewedInfo:
          $ref: '#/components/schemas/SkewedInfo'
        InputFormat:
          type: string
        Location:
          type: string
    SchemaId:
      type: object
      additionalProperties: false
      properties:
        RegistryName:
          type: string
        SchemaName:
          type: string
        SchemaArn:
          type: string
    SerdeInfo:
      type: object
      additionalProperties: false
      properties:
        Parameters:
          type: object
        SerializationLibrary:
          type: string
        Name:
          type: string
    PartitionInput:
      type: object
      additionalProperties: false
      properties:
        StorageDescriptor:
          $ref: '#/components/schemas/StorageDescriptor'
        Values:
          type: array
          uniqueItems: false
          items:
            type: string
        Parameters:
          type: object
      required:
        - Values
    Partition:
      type: object
      properties:
        DatabaseName:
          type: string
          x-is-top-level-property: true
        TableName:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        CatalogId:
          type: string
          x-is-top-level-property: true
        PartitionInput:
          $ref: '#/components/schemas/PartitionInput'
          x-is-top-level-property: true
      required:
        - TableName
        - DatabaseName
        - CatalogId
        - PartitionInput
      x-stackql-resource-name: Partition
    Tag:
      type: object
      properties:
        Key:
          description: A key to identify the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: Corresponding tag value for the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Registry:
      type: object
      description: Identifier for the registry which the schema is part of.
      properties:
        Name:
          description: Name of the registry in which the schema will be created.
          type: string
          maxLength: 255
          minLength: 1
        Arn:
          description: Amazon Resource Name for the Registry.
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):glue:.*
      additionalProperties: false
    SchemaVersion:
      type: object
      properties:
        Schema:
          $ref: '#/components/schemas/Schema'
          x-is-top-level-property: true
        SchemaDefinition:
          type: string
          description: Complete definition of the schema in plain-text.
          minLength: 1
          maxLength: 170000
          x-is-top-level-property: true
        VersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
          x-is-top-level-property: true
      required:
        - Schema
        - SchemaDefinition
      x-stackql-resource-name: SchemaVersion
    Schema:
      description: Identifier for the schema where the schema version will be created.
      type: object
      properties:
        SchemaArn:
          description: >-
            Amazon Resource Name for the Schema. This attribute can be used to
            uniquely represent the Schema.
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):glue:.*
        SchemaName:
          description: >-
            Name of the schema. This parameter requires RegistryName to be
            provided.
          type: string
          minLength: 1
          maxLength: 255
        RegistryName:
          description: Name of the registry to identify where the Schema is located.
          type: string
          maxLength: 255
          minLength: 1
      additionalProperties: false
    SchemaVersionMetadata:
      type: object
      properties:
        SchemaVersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
          x-is-top-level-property: true
        Key:
          type: string
          description: Metadata key
          minLength: 1
          maxLength: 128
          x-is-top-level-property: true
        Value:
          type: string
          description: Metadata value
          minLength: 1
          maxLength: 256
          x-is-top-level-property: true
      required:
        - SchemaVersionId
        - Key
        - Value
      x-stackql-resource-name: SchemaVersionMetadata
    S3Encryptions:
      type: object
      additionalProperties: false
    EncryptionConfiguration:
      type: object
      additionalProperties: false
      properties:
        S3Encryptions:
          $ref: '#/components/schemas/S3Encryptions'
        JobBookmarksEncryption:
          $ref: '#/components/schemas/JobBookmarksEncryption'
        CloudWatchEncryption:
          $ref: '#/components/schemas/CloudWatchEncryption'
    CloudWatchEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyArn:
          type: string
        CloudWatchEncryptionMode:
          type: string
    JobBookmarksEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyArn:
          type: string
        JobBookmarksEncryptionMode:
          type: string
    SecurityConfiguration:
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
      required:
        - EncryptionConfiguration
        - Name
      x-stackql-resource-name: SecurityConfiguration
    TableIdentifier:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        CatalogId:
          type: string
        Name:
          type: string
    TableInput:
      type: object
      additionalProperties: false
      properties:
        Owner:
          type: string
        ViewOriginalText:
          type: string
        Description:
          type: string
        TableType:
          type: string
        Parameters:
          type: object
        ViewExpandedText:
          type: string
        StorageDescriptor:
          $ref: '#/components/schemas/StorageDescriptor'
        TargetTable:
          $ref: '#/components/schemas/TableIdentifier'
        PartitionKeys:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Column'
        Retention:
          type: integer
        Name:
          type: string
    Table:
      type: object
      properties:
        DatabaseName:
          type: string
          x-is-top-level-property: true
        TableInput:
          $ref: '#/components/schemas/TableInput'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        CatalogId:
          type: string
          x-is-top-level-property: true
      required:
        - TableInput
        - DatabaseName
        - CatalogId
      x-stackql-resource-name: Table
    Condition:
      type: object
      additionalProperties: false
      properties:
        JobName:
          type: string
        CrawlerName:
          type: string
        State:
          type: string
        CrawlState:
          type: string
        LogicalOperator:
          type: string
    Action:
      type: object
      additionalProperties: false
      properties:
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
        CrawlerName:
          type: string
        Timeout:
          type: integer
        JobName:
          type: string
        Arguments:
          type: object
        SecurityConfiguration:
          type: string
    EventBatchingCondition:
      type: object
      additionalProperties: false
      properties:
        BatchSize:
          type: integer
        BatchWindow:
          type: integer
      required:
        - BatchSize
    Predicate:
      type: object
      additionalProperties: false
      properties:
        Logical:
          type: string
        Conditions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Condition'
    Trigger:
      type: object
      properties:
        Type:
          type: string
          x-is-top-level-property: true
        StartOnCreation:
          type: boolean
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        Actions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Action'
          x-is-top-level-property: true
        EventBatchingCondition:
          $ref: '#/components/schemas/EventBatchingCondition'
          x-is-top-level-property: true
        WorkflowName:
          type: string
          x-is-top-level-property: true
        Schedule:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Predicate:
          $ref: '#/components/schemas/Predicate'
          x-is-top-level-property: true
      required:
        - Type
        - Actions
      x-stackql-resource-name: Trigger
    Workflow:
      type: object
      properties:
        Description:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
        DefaultRunProperties:
          type: object
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        MaxConcurrentRuns:
          type: integer
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: Workflow
x-stackql-views:
  - Classifier:
      name: Classifier
      id: aws.glue.Classifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.XMLClassifier.RowTag') as
              x_ml_classifier_row_tag,

              JSON_EXTRACT(Properties, '$.XMLClassifier.Classification') as
              x_ml_classifier_classification,

              JSON_EXTRACT(Properties, '$.XMLClassifier.Name') as
              x_ml_classifier_name,

              JSON_EXTRACT(Properties, '$.JsonClassifier.JsonPath') as
              json_classifier_json_path,

              JSON_EXTRACT(Properties, '$.JsonClassifier.Name') as
              json_classifier_name,

              JSON_EXTRACT(Properties, '$.CsvClassifier.QuoteSymbol') as
              csv_classifier_quote_symbol,

              JSON_EXTRACT(Properties, '$.CsvClassifier.ContainsHeader') as
              csv_classifier_contains_header,

              JSON_EXTRACT(Properties, '$.CsvClassifier.Delimiter') as
              csv_classifier_delimiter,

              JSON_EXTRACT(Properties, '$.CsvClassifier.Header') as
              csv_classifier_header,

              JSON_EXTRACT(Properties, '$.CsvClassifier.AllowSingleColumn') as
              csv_classifier_allow_single_column,

              JSON_EXTRACT(Properties, '$.CsvClassifier.DisableValueTrimming')
              as csv_classifier_disable_value_trimming,

              JSON_EXTRACT(Properties, '$.CsvClassifier.Name') as
              csv_classifier_name,

              JSON_EXTRACT(Properties, '$.GrokClassifier.CustomPatterns') as
              grok_classifier_custom_patterns,

              JSON_EXTRACT(Properties, '$.GrokClassifier.GrokPattern') as
              grok_classifier_grok_pattern,

              JSON_EXTRACT(Properties, '$.GrokClassifier.Classification') as
              grok_classifier_classification,

              JSON_EXTRACT(Properties, '$.GrokClassifier.Name') as
              grok_classifier_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Classifier' ;
  - Connection:
      name: Connection
      id: aws.glue.Connection
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ConnectionInput.Description') as
              connection_input_description,

              JSON_EXTRACT(Properties, '$.ConnectionInput.ConnectionType') as
              connection_input_connection_type,

              JSON_EXTRACT(Properties, '$.ConnectionInput.MatchCriteria') as
              connection_input_match_criteria,

              JSON_EXTRACT(Properties,
              '$.ConnectionInput.PhysicalConnectionRequirements') as
              connection_input_physical_connection_requirements,

              JSON_EXTRACT(Properties, '$.ConnectionInput.ConnectionProperties')
              as connection_input_connection_properties,

              JSON_EXTRACT(Properties, '$.ConnectionInput.Name') as
              connection_input_name,

              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,

              JSON_EXTRACT(Properties, '$.Id') as id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Connection' ;
  - Crawler:
      name: Crawler
      id: aws.glue.Crawler
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Classifiers') as classifiers,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.SchemaChangePolicy.UpdateBehavior') as
              schema_change_policy_update_behavior,

              JSON_EXTRACT(Properties, '$.SchemaChangePolicy.DeleteBehavior') as
              schema_change_policy_delete_behavior,

              JSON_EXTRACT(Properties, '$.Configuration') as configuration,

              JSON_EXTRACT(Properties, '$.RecrawlPolicy.RecrawlBehavior') as
              recrawl_policy_recrawl_behavior,

              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,

              JSON_EXTRACT(Properties, '$.Targets.CatalogTargets') as
              targets_catalog_targets,

              JSON_EXTRACT(Properties, '$.Targets.MongoDBTargets') as
              targets_mongo_db_targets,

              JSON_EXTRACT(Properties, '$.Targets.JdbcTargets') as
              targets_jdbc_targets,

              JSON_EXTRACT(Properties, '$.Targets.S3Targets') as
              targets_s3_targets,

              JSON_EXTRACT(Properties, '$.Targets.DynamoDBTargets') as
              targets_dynamo_db_targets,

              JSON_EXTRACT(Properties, '$.CrawlerSecurityConfiguration') as
              crawler_security_configuration,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Role') as role,

              JSON_EXTRACT(Properties, '$.Schedule.ScheduleExpression') as
              schedule_schedule_expression,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.TablePrefix') as table_prefix,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Crawler' ;
  - Database:
      name: Database
      id: aws.glue.Database
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,

              JSON_EXTRACT(Properties, '$.DatabaseInput.LocationUri') as
              database_input_location_uri,

              JSON_EXTRACT(Properties,
              '$.DatabaseInput.CreateTableDefaultPermissions') as
              database_input_create_table_default_permissions,

              JSON_EXTRACT(Properties, '$.DatabaseInput.Description') as
              database_input_description,

              JSON_EXTRACT(Properties, '$.DatabaseInput.Parameters') as
              database_input_parameters,

              JSON_EXTRACT(Properties, '$.DatabaseInput.TargetDatabase') as
              database_input_target_database,

              JSON_EXTRACT(Properties, '$.DatabaseInput.Name') as
              database_input_name,

              JSON_EXTRACT(Properties, '$.Id') as id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Database' ;
  - DataCatalogEncryptionSettings:
      name: DataCatalogEncryptionSettings
      id: aws.glue.DataCatalogEncryptionSettings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.DataCatalogEncryptionSettings.Id') as
              data_catalog_encryption_settings_id,

              JSON_EXTRACT(Properties,
              '$.DataCatalogEncryptionSettings.DataCatalogEncryptionSettings')
              as
              data_catalog_encryption_settings_data_catalog_encryption_settings,

              JSON_EXTRACT(Properties,
              '$.DataCatalogEncryptionSettings.CatalogId') as
              data_catalog_encryption_settings_catalog_id,

              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::DataCatalogEncryptionSettings' ;
  - DevEndpoint:
      name: DevEndpoint
      id: aws.glue.DevEndpoint
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ExtraJarsS3Path') as
              extra_jars_s3_path,

              JSON_EXTRACT(Properties, '$.PublicKey') as public_key,

              JSON_EXTRACT(Properties, '$.NumberOfNodes') as number_of_nodes,

              JSON_EXTRACT(Properties, '$.Arguments') as arguments,

              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,

              JSON_EXTRACT(Properties, '$.PublicKeys') as public_keys,

              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as
              security_group_ids,

              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,

              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,

              JSON_EXTRACT(Properties, '$.EndpointName') as endpoint_name,

              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,

              JSON_EXTRACT(Properties, '$.ExtraPythonLibsS3Path') as
              extra_python_libs_s3_path,

              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as
              security_configuration,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as
              number_of_workers,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::DevEndpoint' ;
  - Job:
      name: Job
      id: aws.glue.Job
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Connections.Connections') as
              connections_connections,

              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Timeout') as timeout,

              JSON_EXTRACT(Properties, '$.AllocatedCapacity') as
              allocated_capacity,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Role') as role,

              JSON_EXTRACT(Properties, '$.DefaultArguments') as
              default_arguments,

              JSON_EXTRACT(Properties,
              '$.NotificationProperty.NotifyDelayAfter') as
              notification_property_notify_delay_after,

              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,

              JSON_EXTRACT(Properties, '$.ExecutionClass') as execution_class,

              JSON_EXTRACT(Properties, '$.LogUri') as log_uri,

              JSON_EXTRACT(Properties, '$.Command.ScriptLocation') as
              command_script_location,

              JSON_EXTRACT(Properties, '$.Command.PythonVersion') as
              command_python_version,

              JSON_EXTRACT(Properties, '$.Command.Name') as command_name,

              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,

              JSON_EXTRACT(Properties, '$.ExecutionProperty.MaxConcurrentRuns')
              as execution_property_max_concurrent_runs,

              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as
              security_configuration,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as
              number_of_workers,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,

              JSON_EXTRACT(Properties, '$.NonOverridableArguments') as
              non_overridable_arguments

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Job' ;
  - MLTransform:
      name: MLTransform
      id: aws.glue.MLTransform
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties,
              '$.TransformEncryption.TaskRunSecurityConfigurationName') as
              transform_encryption_task_run_security_configuration_name,

              JSON_EXTRACT(Properties,
              '$.TransformEncryption.MLUserDataEncryption') as
              transform_encryption_ml_user_data_encryption,

              JSON_EXTRACT(Properties, '$.Timeout') as timeout,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Role') as role,

              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,

              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,

              JSON_EXTRACT(Properties, '$.TransformParameters.TransformType') as
              transform_parameters_transform_type,

              JSON_EXTRACT(Properties,
              '$.TransformParameters.FindMatchesParameters') as
              transform_parameters_find_matches_parameters,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.InputRecordTables.GlueTables') as
              input_record_tables_glue_tables,

              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as
              number_of_workers,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::MLTransform' ;
  - Partition:
      name: Partition
      id: aws.glue.Partition
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,

              JSON_EXTRACT(Properties, '$.TableName') as table_name,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,

              JSON_EXTRACT(Properties, '$.PartitionInput.StorageDescriptor') as
              partition_input_storage_descriptor,

              JSON_EXTRACT(Properties, '$.PartitionInput.Values') as
              partition_input_values,

              JSON_EXTRACT(Properties, '$.PartitionInput.Parameters') as
              partition_input_parameters

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Partition' ;
  - SchemaVersion:
      name: SchemaVersion
      id: aws.glue.SchemaVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Schema.SchemaArn') as
              schema_schema_arn,

              JSON_EXTRACT(Properties, '$.Schema.SchemaName') as
              schema_schema_name,

              JSON_EXTRACT(Properties, '$.Schema.RegistryName') as
              schema_registry_name,

              JSON_EXTRACT(Properties, '$.SchemaDefinition') as
              schema_definition,

              JSON_EXTRACT(Properties, '$.VersionId') as version_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::SchemaVersion' ;
  - SchemaVersionMetadata:
      name: SchemaVersionMetadata
      id: aws.glue.SchemaVersionMetadata
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.SchemaVersionId') as
              schema_version_id,

              JSON_EXTRACT(Properties, '$.Key') as key,

              JSON_EXTRACT(Properties, '$.Value') as value

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::SchemaVersionMetadata' ;
  - SecurityConfiguration:
      name: SecurityConfiguration
      id: aws.glue.SecurityConfiguration
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties,
              '$.EncryptionConfiguration.S3Encryptions') as
              encryption_configuration_s3_encryptions,

              JSON_EXTRACT(Properties,
              '$.EncryptionConfiguration.JobBookmarksEncryption') as
              encryption_configuration_job_bookmarks_encryption,

              JSON_EXTRACT(Properties,
              '$.EncryptionConfiguration.CloudWatchEncryption') as
              encryption_configuration_cloud_watch_encryption,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Id') as id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::SecurityConfiguration' ;
  - Table:
      name: Table
      id: aws.glue.Table
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,

              JSON_EXTRACT(Properties, '$.TableInput.Owner') as
              table_input_owner,

              JSON_EXTRACT(Properties, '$.TableInput.ViewOriginalText') as
              table_input_view_original_text,

              JSON_EXTRACT(Properties, '$.TableInput.Description') as
              table_input_description,

              JSON_EXTRACT(Properties, '$.TableInput.TableType') as
              table_input_table_type,

              JSON_EXTRACT(Properties, '$.TableInput.Parameters') as
              table_input_parameters,

              JSON_EXTRACT(Properties, '$.TableInput.ViewExpandedText') as
              table_input_view_expanded_text,

              JSON_EXTRACT(Properties, '$.TableInput.StorageDescriptor') as
              table_input_storage_descriptor,

              JSON_EXTRACT(Properties, '$.TableInput.TargetTable') as
              table_input_target_table,

              JSON_EXTRACT(Properties, '$.TableInput.PartitionKeys') as
              table_input_partition_keys,

              JSON_EXTRACT(Properties, '$.TableInput.Retention') as
              table_input_retention,

              JSON_EXTRACT(Properties, '$.TableInput.Name') as table_input_name,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Table' ;
  - Trigger:
      name: Trigger
      id: aws.glue.Trigger
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Type') as type,

              JSON_EXTRACT(Properties, '$.StartOnCreation') as
              start_on_creation,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Actions') as actions,

              JSON_EXTRACT(Properties, '$.EventBatchingCondition.BatchSize') as
              event_batching_condition_batch_size,

              JSON_EXTRACT(Properties, '$.EventBatchingCondition.BatchWindow')
              as event_batching_condition_batch_window,

              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,

              JSON_EXTRACT(Properties, '$.Schedule') as schedule,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Predicate.Logical') as
              predicate_logical,

              JSON_EXTRACT(Properties, '$.Predicate.Conditions') as
              predicate_conditions

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Trigger' ;
  - Workflow:
      name: Workflow
      id: aws.glue.Workflow
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.DefaultRunProperties') as
              default_run_properties,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.MaxConcurrentRuns') as
              max_concurrent_runs

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Glue::Workflow' ;
