openapi: 3.0.0
info:
  title: AppSync
  version: 1.0.0
paths: {}
components:
  schemas:
    ApiCache:
      type: object
      properties:
        Type:
          type: string
          x-is-top-level-property: true
        TransitEncryptionEnabled:
          type: boolean
          x-is-top-level-property: true
        AtRestEncryptionEnabled:
          type: boolean
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        ApiCachingBehavior:
          type: string
          x-is-top-level-property: true
        Ttl:
          type: number
          x-is-top-level-property: true
      required:
        - Type
        - ApiId
        - ApiCachingBehavior
        - Ttl
      x-stackql-resource-name: ApiCache
    ApiKey:
      type: object
      properties:
        ApiKey:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        ApiKeyId:
          type: string
          x-is-top-level-property: true
        Expires:
          type: number
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - ApiId
      x-stackql-resource-name: ApiKey
    RdsHttpEndpointConfig:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        AwsRegion:
          type: string
        DbClusterIdentifier:
          type: string
        AwsSecretStoreArn:
          type: string
        Schema:
          type: string
      required:
        - AwsRegion
        - DbClusterIdentifier
        - AwsSecretStoreArn
    OpenSearchServiceConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          type: string
        Endpoint:
          type: string
      required:
        - AwsRegion
        - Endpoint
    AwsIamConfig:
      type: object
      additionalProperties: false
      properties:
        SigningRegion:
          type: string
        SigningServiceName:
          type: string
    EventBridgeConfig:
      type: object
      additionalProperties: false
      properties:
        EventBusArn:
          type: string
      required:
        - EventBusArn
    AuthorizationConfig:
      type: object
      additionalProperties: false
      properties:
        AuthorizationType:
          type: string
        AwsIamConfig:
          $ref: '#/components/schemas/AwsIamConfig'
      required:
        - AuthorizationType
    DeltaSyncConfig:
      type: object
      additionalProperties: false
      properties:
        BaseTableTTL:
          type: string
        DeltaSyncTableTTL:
          type: string
        DeltaSyncTableName:
          type: string
      required:
        - BaseTableTTL
        - DeltaSyncTableTTL
        - DeltaSyncTableName
    RelationalDatabaseConfig:
      type: object
      additionalProperties: false
      properties:
        RdsHttpEndpointConfig:
          $ref: '#/components/schemas/RdsHttpEndpointConfig'
        RelationalDatabaseSourceType:
          type: string
      required:
        - RelationalDatabaseSourceType
    HttpConfig:
      type: object
      additionalProperties: false
      properties:
        Endpoint:
          type: string
        AuthorizationConfig:
          $ref: '#/components/schemas/AuthorizationConfig'
      required:
        - Endpoint
    LambdaConfig:
      type: object
      additionalProperties: false
      properties:
        LambdaFunctionArn:
          type: string
      required:
        - LambdaFunctionArn
    ElasticsearchConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          type: string
        Endpoint:
          type: string
      required:
        - AwsRegion
        - Endpoint
    DynamoDBConfig:
      type: object
      additionalProperties: false
      properties:
        TableName:
          type: string
        DeltaSyncConfig:
          $ref: '#/components/schemas/DeltaSyncConfig'
        UseCallerCredentials:
          type: boolean
        AwsRegion:
          type: string
        Versioned:
          type: boolean
      required:
        - TableName
        - AwsRegion
    DataSource:
      type: object
      properties:
        OpenSearchServiceConfig:
          $ref: '#/components/schemas/OpenSearchServiceConfig'
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        ServiceRoleArn:
          type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        DataSourceArn:
          type: string
          x-is-top-level-property: true
        Type:
          type: string
          x-is-top-level-property: true
        EventBridgeConfig:
          $ref: '#/components/schemas/EventBridgeConfig'
          x-is-top-level-property: true
        HttpConfig:
          $ref: '#/components/schemas/HttpConfig'
          x-is-top-level-property: true
        RelationalDatabaseConfig:
          $ref: '#/components/schemas/RelationalDatabaseConfig'
          x-is-top-level-property: true
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfig'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        DynamoDBConfig:
          $ref: '#/components/schemas/DynamoDBConfig'
          x-is-top-level-property: true
        ElasticsearchConfig:
          $ref: '#/components/schemas/ElasticsearchConfig'
          x-is-top-level-property: true
      required:
        - Type
        - ApiId
        - Name
      x-stackql-resource-name: DataSource
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
          x-is-top-level-property: true
        Description:
          type: string
          minLength: 0
          maxLength: 255
          x-is-top-level-property: true
        CertificateArn:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
          x-is-top-level-property: true
        AppSyncDomainName:
          type: string
          x-is-top-level-property: true
        HostedZoneId:
          type: string
          x-is-top-level-property: true
      required:
        - DomainName
        - CertificateArn
      x-stackql-resource-name: DomainName
    DomainNameApiAssociation:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        ApiAssociationIdentifier:
          type: string
          x-is-top-level-property: true
      required:
        - DomainName
        - ApiId
      x-stackql-resource-name: DomainNameApiAssociation
    AppSyncRuntime:
      type: object
      additionalProperties: false
      properties:
        RuntimeVersion:
          type: string
        Name:
          type: string
      required:
        - RuntimeVersion
        - Name
    SyncConfig:
      type: object
      additionalProperties: false
      properties:
        ConflictHandler:
          type: string
        ConflictDetection:
          type: string
        LambdaConflictHandlerConfig:
          $ref: '#/components/schemas/LambdaConflictHandlerConfig'
      required:
        - ConflictDetection
    LambdaConflictHandlerConfig:
      type: object
      additionalProperties: false
      properties:
        LambdaConflictHandlerArn:
          type: string
    FunctionConfiguration:
      type: object
      properties:
        FunctionId:
          type: string
          x-is-top-level-property: true
        FunctionArn:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        RequestMappingTemplate:
          type: string
          x-is-top-level-property: true
        ResponseMappingTemplate:
          type: string
          x-is-top-level-property: true
        MaxBatchSize:
          type: integer
          x-is-top-level-property: true
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
          x-is-top-level-property: true
        Code:
          type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        ResponseMappingTemplateS3Location:
          type: string
          x-is-top-level-property: true
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
          x-is-top-level-property: true
        CodeS3Location:
          type: string
          x-is-top-level-property: true
        DataSourceName:
          type: string
          x-is-top-level-property: true
        FunctionVersion:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        RequestMappingTemplateS3Location:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - DataSourceName
        - ApiId
        - Name
      x-stackql-resource-name: FunctionConfiguration
    OpenIDConnectConfig:
      type: object
      additionalProperties: false
      properties:
        ClientId:
          type: string
        AuthTTL:
          type: number
        Issuer:
          type: string
        IatTTL:
          type: number
    CognitoUserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          type: string
        UserPoolId:
          type: string
        AwsRegion:
          type: string
    LambdaAuthorizerConfig:
      type: object
      additionalProperties: false
      properties:
        IdentityValidationExpression:
          type: string
        AuthorizerUri:
          type: string
        AuthorizerResultTtlInSeconds:
          type: number
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    UserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          type: string
        UserPoolId:
          type: string
        AwsRegion:
          type: string
        DefaultAction:
          type: string
    AdditionalAuthenticationProvider:
      type: object
      additionalProperties: false
      properties:
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        UserPoolConfig:
          $ref: '#/components/schemas/CognitoUserPoolConfig'
        AuthenticationType:
          type: string
      required:
        - AuthenticationType
    LogConfig:
      type: object
      additionalProperties: false
      properties:
        ExcludeVerboseContent:
          type: boolean
        FieldLogLevel:
          type: string
        CloudWatchLogsRoleArn:
          type: string
    GraphQLApi:
      type: object
      properties:
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        AdditionalAuthenticationProviders:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AdditionalAuthenticationProvider'
          x-is-top-level-property: true
        GraphQLUrl:
          type: string
          x-is-top-level-property: true
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
          x-is-top-level-property: true
        XrayEnabled:
          type: boolean
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Arn:
          type: string
          x-is-top-level-property: true
        UserPoolConfig:
          $ref: '#/components/schemas/UserPoolConfig'
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
        AuthenticationType:
          type: string
          x-is-top-level-property: true
        LogConfig:
          $ref: '#/components/schemas/LogConfig'
          x-is-top-level-property: true
      required:
        - Name
        - AuthenticationType
      x-stackql-resource-name: GraphQLApi
    GraphQLSchema:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        Definition:
          type: string
          x-is-top-level-property: true
        DefinitionS3Location:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - ApiId
      x-stackql-resource-name: GraphQLSchema
    PipelineConfig:
      type: object
      additionalProperties: false
      properties:
        Functions:
          type: array
          uniqueItems: false
          items:
            type: string
    CachingConfig:
      type: object
      additionalProperties: false
      properties:
        CachingKeys:
          type: array
          uniqueItems: false
          items:
            type: string
        Ttl:
          type: number
      required:
        - Ttl
    Resolver:
      type: object
      properties:
        TypeName:
          type: string
          x-is-top-level-property: true
        PipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
          x-is-top-level-property: true
        RequestMappingTemplate:
          type: string
          x-is-top-level-property: true
        ResponseMappingTemplate:
          type: string
          x-is-top-level-property: true
        MaxBatchSize:
          type: integer
          x-is-top-level-property: true
        ResolverArn:
          type: string
          x-is-top-level-property: true
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
          x-is-top-level-property: true
        Code:
          type: string
          x-is-top-level-property: true
        ResponseMappingTemplateS3Location:
          type: string
          x-is-top-level-property: true
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
          x-is-top-level-property: true
        CodeS3Location:
          type: string
          x-is-top-level-property: true
        DataSourceName:
          type: string
          x-is-top-level-property: true
        Kind:
          type: string
          x-is-top-level-property: true
        CachingConfig:
          $ref: '#/components/schemas/CachingConfig'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        RequestMappingTemplateS3Location:
          type: string
          x-is-top-level-property: true
        FieldName:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - TypeName
        - ApiId
        - FieldName
      x-stackql-resource-name: Resolver
x-stackql-views:
  - ApiCache:
      name: ApiCache
      id: aws.appsync.ApiCache
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Type') as type,

              JSON_EXTRACT(Properties, '$.TransitEncryptionEnabled') as
              transit_encryption_enabled,

              JSON_EXTRACT(Properties, '$.AtRestEncryptionEnabled') as
              at_rest_encryption_enabled,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.ApiCachingBehavior') as
              api_caching_behavior,

              JSON_EXTRACT(Properties, '$.Ttl') as ttl

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::ApiCache' ;
  - ApiKey:
      name: ApiKey
      id: aws.appsync.ApiKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ApiKey') as api_key,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ApiKeyId') as api_key_id,

              JSON_EXTRACT(Properties, '$.Expires') as expires,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::ApiKey' ;
  - DataSource:
      name: DataSource
      id: aws.appsync.DataSource
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.OpenSearchServiceConfig.AwsRegion') as
              open_search_service_config_aws_region,

              JSON_EXTRACT(Properties, '$.OpenSearchServiceConfig.Endpoint') as
              open_search_service_config_endpoint,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ServiceRoleArn') as service_role_arn,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.DataSourceArn') as data_source_arn,

              JSON_EXTRACT(Properties, '$.Type') as type,

              JSON_EXTRACT(Properties, '$.EventBridgeConfig.EventBusArn') as
              event_bridge_config_event_bus_arn,

              JSON_EXTRACT(Properties, '$.HttpConfig.Endpoint') as
              http_config_endpoint,

              JSON_EXTRACT(Properties, '$.HttpConfig.AuthorizationConfig') as
              http_config_authorization_config,

              JSON_EXTRACT(Properties,
              '$.RelationalDatabaseConfig.RdsHttpEndpointConfig') as
              relational_database_config_rds_http_endpoint_config,

              JSON_EXTRACT(Properties,
              '$.RelationalDatabaseConfig.RelationalDatabaseSourceType') as
              relational_database_config_relational_database_source_type,

              JSON_EXTRACT(Properties, '$.LambdaConfig.LambdaFunctionArn') as
              lambda_config_lambda_function_arn,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.DynamoDBConfig.TableName') as
              dynamo_db_config_table_name,

              JSON_EXTRACT(Properties, '$.DynamoDBConfig.DeltaSyncConfig') as
              dynamo_db_config_delta_sync_config,

              JSON_EXTRACT(Properties, '$.DynamoDBConfig.UseCallerCredentials')
              as dynamo_db_config_use_caller_credentials,

              JSON_EXTRACT(Properties, '$.DynamoDBConfig.AwsRegion') as
              dynamo_db_config_aws_region,

              JSON_EXTRACT(Properties, '$.DynamoDBConfig.Versioned') as
              dynamo_db_config_versioned,

              JSON_EXTRACT(Properties, '$.ElasticsearchConfig.AwsRegion') as
              elasticsearch_config_aws_region,

              JSON_EXTRACT(Properties, '$.ElasticsearchConfig.Endpoint') as
              elasticsearch_config_endpoint

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::DataSource' ;
  - DomainName:
      name: DomainName
      id: aws.appsync.DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,

              JSON_EXTRACT(Properties, '$.AppSyncDomainName') as
              app_sync_domain_name,

              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::DomainName' ;
  - DomainNameApiAssociation:
      name: DomainNameApiAssociation
      id: aws.appsync.DomainNameApiAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as
              api_association_identifier

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::DomainNameApiAssociation' ;
  - FunctionConfiguration:
      name: FunctionConfiguration
      id: aws.appsync.FunctionConfiguration
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.FunctionId') as function_id,

              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as
              request_mapping_template,

              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as
              response_mapping_template,

              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,

              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictHandler') as
              sync_config_conflict_handler,

              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictDetection') as
              sync_config_conflict_detection,

              JSON_EXTRACT(Properties,
              '$.SyncConfig.LambdaConflictHandlerConfig') as
              sync_config_lambda_conflict_handler_config,

              JSON_EXTRACT(Properties, '$.Code') as code,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as
              response_mapping_template_s3_location,

              JSON_EXTRACT(Properties, '$.Runtime.RuntimeVersion') as
              runtime_runtime_version,

              JSON_EXTRACT(Properties, '$.Runtime.Name') as runtime_name,

              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,

              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,

              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as
              request_mapping_template_s3_location,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::FunctionConfiguration' ;
  - GraphQLApi:
      name: GraphQLApi
      id: aws.appsync.GraphQLApi
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.ClientId') as
              open_id_connect_config_client_id,

              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.AuthTTL') as
              open_id_connect_config_auth_tt_l,

              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.Issuer') as
              open_id_connect_config_issuer,

              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.IatTTL') as
              open_id_connect_config_iat_tt_l,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.AdditionalAuthenticationProviders') as
              additional_authentication_providers,

              JSON_EXTRACT(Properties, '$.GraphQLUrl') as graph_ql_url,

              JSON_EXTRACT(Properties,
              '$.LambdaAuthorizerConfig.IdentityValidationExpression') as
              lambda_authorizer_config_identity_validation_expression,

              JSON_EXTRACT(Properties, '$.LambdaAuthorizerConfig.AuthorizerUri')
              as lambda_authorizer_config_authorizer_uri,

              JSON_EXTRACT(Properties,
              '$.LambdaAuthorizerConfig.AuthorizerResultTtlInSeconds') as
              lambda_authorizer_config_authorizer_result_ttl_in_seconds,

              JSON_EXTRACT(Properties, '$.XrayEnabled') as xray_enabled,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.UserPoolConfig.AppIdClientRegex') as
              user_pool_config_app_id_client_regex,

              JSON_EXTRACT(Properties, '$.UserPoolConfig.UserPoolId') as
              user_pool_config_user_pool_id,

              JSON_EXTRACT(Properties, '$.UserPoolConfig.AwsRegion') as
              user_pool_config_aws_region,

              JSON_EXTRACT(Properties, '$.UserPoolConfig.DefaultAction') as
              user_pool_config_default_action,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.AuthenticationType') as
              authentication_type,

              JSON_EXTRACT(Properties, '$.LogConfig.ExcludeVerboseContent') as
              log_config_exclude_verbose_content,

              JSON_EXTRACT(Properties, '$.LogConfig.FieldLogLevel') as
              log_config_field_log_level,

              JSON_EXTRACT(Properties, '$.LogConfig.CloudWatchLogsRoleArn') as
              log_config_cloud_watch_logs_role_arn

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::GraphQLApi' ;
  - GraphQLSchema:
      name: GraphQLSchema
      id: aws.appsync.GraphQLSchema
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Definition') as definition,

              JSON_EXTRACT(Properties, '$.DefinitionS3Location') as
              definition_s3_location,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::GraphQLSchema' ;
  - Resolver:
      name: Resolver
      id: aws.appsync.Resolver
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.TypeName') as type_name,

              JSON_EXTRACT(Properties, '$.PipelineConfig.Functions') as
              pipeline_config_functions,

              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as
              request_mapping_template,

              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as
              response_mapping_template,

              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,

              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn,

              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictHandler') as
              sync_config_conflict_handler,

              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictDetection') as
              sync_config_conflict_detection,

              JSON_EXTRACT(Properties,
              '$.SyncConfig.LambdaConflictHandlerConfig') as
              sync_config_lambda_conflict_handler_config,

              JSON_EXTRACT(Properties, '$.Code') as code,

              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as
              response_mapping_template_s3_location,

              JSON_EXTRACT(Properties, '$.Runtime.RuntimeVersion') as
              runtime_runtime_version,

              JSON_EXTRACT(Properties, '$.Runtime.Name') as runtime_name,

              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,

              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,

              JSON_EXTRACT(Properties, '$.Kind') as kind,

              JSON_EXTRACT(Properties, '$.CachingConfig.CachingKeys') as
              caching_config_caching_keys,

              JSON_EXTRACT(Properties, '$.CachingConfig.Ttl') as
              caching_config_ttl,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as
              request_mapping_template_s3_location,

              JSON_EXTRACT(Properties, '$.FieldName') as field_name,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppSync::Resolver' ;
