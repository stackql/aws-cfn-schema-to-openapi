openapi: 3.0.0
info:
  title: LicenseManager
  version: 1.0.0
paths: {}
components:
  schemas:
    Arn:
      type: string
      maxLength: 2048
    Grant:
      type: object
      properties:
        GrantArn:
          description: Arn of the grant.
          $ref: '#/components/schemas/Arn'
          x-is-top-level-property: true
        GrantName:
          description: Name for the created Grant.
          type: string
          x-is-top-level-property: true
        LicenseArn:
          description: License Arn for the grant.
          $ref: '#/components/schemas/Arn'
          x-is-top-level-property: true
        HomeRegion:
          description: Home region for the created grant.
          type: string
          x-is-top-level-property: true
        Version:
          description: The version of the grant.
          type: string
          x-is-top-level-property: true
        AllowedOperations:
          type: array
          uniqueItems: true
          items:
            type: string
          x-is-top-level-property: true
        Principals:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Arn'
          x-is-top-level-property: true
        Status:
          type: string
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: Grant
    ValidityDateFormat:
      type: object
      additionalProperties: false
      properties:
        Begin:
          description: Validity begin date for the license.
          type: string
          format: date-time
        End:
          description: Validity begin date for the license.
          type: string
          format: date-time
      required:
        - Begin
        - End
    IssuerData:
      type: object
      properties:
        Name:
          type: string
        SignKey:
          type: string
      required:
        - Name
      additionalProperties: false
    Entitlement:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
        MaxCount:
          type: integer
        Overage:
          type: boolean
        Unit:
          type: string
        AllowCheckIn:
          type: boolean
      required:
        - Name
        - Unit
      additionalProperties: false
    ConsumptionConfiguration:
      type: object
      properties:
        RenewType:
          type: string
        ProvisionalConfiguration:
          $ref: '#/components/schemas/ProvisionalConfiguration'
        BorrowConfiguration:
          $ref: '#/components/schemas/BorrowConfiguration'
      additionalProperties: false
    ProvisionalConfiguration:
      type: object
      properties:
        MaxTimeToLiveInMinutes:
          type: integer
      required:
        - MaxTimeToLiveInMinutes
      additionalProperties: false
    BorrowConfiguration:
      type: object
      properties:
        MaxTimeToLiveInMinutes:
          type: integer
        AllowEarlyCheckIn:
          type: boolean
      required:
        - MaxTimeToLiveInMinutes
        - AllowEarlyCheckIn
      additionalProperties: false
    Metadata:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      required:
        - Name
        - Value
      additionalProperties: false
    LicenseStatus:
      type: string
    License:
      type: object
      properties:
        ProductSKU:
          description: ProductSKU of the license.
          type: string
          minLength: 1
          maxLength: 1024
          x-is-top-level-property: true
        Issuer:
          $ref: '#/components/schemas/IssuerData'
          x-is-top-level-property: true
        LicenseName:
          description: Name for the created license.
          type: string
          x-is-top-level-property: true
        ProductName:
          description: Product name for the created license.
          type: string
          x-is-top-level-property: true
        HomeRegion:
          description: Home region for the created license.
          type: string
          x-is-top-level-property: true
        Validity:
          $ref: '#/components/schemas/ValidityDateFormat'
          x-is-top-level-property: true
        Entitlements:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Entitlement'
          x-is-top-level-property: true
        Beneficiary:
          description: Beneficiary of the license.
          type: string
          x-is-top-level-property: true
        ConsumptionConfiguration:
          $ref: '#/components/schemas/ConsumptionConfiguration'
          x-is-top-level-property: true
        LicenseMetadata:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Metadata'
          x-is-top-level-property: true
        LicenseArn:
          description: Amazon Resource Name is a unique name for each resource.
          $ref: '#/components/schemas/Arn'
          x-is-top-level-property: true
        Status:
          $ref: '#/components/schemas/LicenseStatus'
          x-is-top-level-property: true
        Version:
          description: The version of the license.
          type: string
          x-is-top-level-property: true
      required:
        - LicenseName
        - ProductName
        - Issuer
        - HomeRegion
        - Validity
        - ConsumptionConfiguration
        - Entitlements
      x-stackql-resource-name: License
x-stackql-views:
  - Grant:
      name: Grant
      id: aws.licensemanager.Grant
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.GrantName') as grant_name,

              JSON_EXTRACT(Properties, '$.HomeRegion') as home_region,

              JSON_EXTRACT(Properties, '$.Version') as version,

              JSON_EXTRACT(Properties, '$.AllowedOperations') as
              allowed_operations,

              JSON_EXTRACT(Properties, '$.Principals') as principals,

              JSON_EXTRACT(Properties, '$.Status') as status

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::LicenseManager::Grant' ;
  - License:
      name: License
      id: aws.licensemanager.License
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ProductSKU') as product_sk_u,

              JSON_EXTRACT(Properties, '$.Issuer.Name') as issuer_name,

              JSON_EXTRACT(Properties, '$.Issuer.SignKey') as issuer_sign_key,

              JSON_EXTRACT(Properties, '$.LicenseName') as license_name,

              JSON_EXTRACT(Properties, '$.ProductName') as product_name,

              JSON_EXTRACT(Properties, '$.HomeRegion') as home_region,

              JSON_EXTRACT(Properties, '$.Validity.Begin') as validity_begin,

              JSON_EXTRACT(Properties, '$.Validity.End') as validity_end,

              JSON_EXTRACT(Properties, '$.Entitlements') as entitlements,

              JSON_EXTRACT(Properties, '$.Beneficiary') as beneficiary,

              JSON_EXTRACT(Properties, '$.ConsumptionConfiguration.RenewType')
              as consumption_configuration_renew_type,

              JSON_EXTRACT(Properties,
              '$.ConsumptionConfiguration.ProvisionalConfiguration') as
              consumption_configuration_provisional_configuration,

              JSON_EXTRACT(Properties,
              '$.ConsumptionConfiguration.BorrowConfiguration') as
              consumption_configuration_borrow_configuration,

              JSON_EXTRACT(Properties, '$.LicenseMetadata') as license_metadata,

              JSON_EXTRACT(Properties, '$.Version') as version

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::LicenseManager::License' ;
