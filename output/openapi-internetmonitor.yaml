openapi: 3.0.0
info:
  title: InternetMonitor
  version: 1.0.0
paths: {}
components:
  schemas:
    MonitorConfigState:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - INACTIVE
        - ERROR
    MonitorProcessingStatusCode:
      type: string
      enum:
        - OK
        - INACTIVE
        - COLLECTING_DATA
        - INSUFFICIENT_DATA
        - FAULT_SERVICE
        - FAULT_ACCESS_CLOUDWATCH
    Tag:
      description: >-
        The metadata that you apply to the cluster to help you categorize and
        organize them. Each tag consists of a key and an optional value, both of
        which you define.
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    iso8601UTC:
      description: >-
        The date value in ISO 8601 format. The timezone is always UTC.
        (YYYY-MM-DDThh:mm:ssZ)
      type: string
      pattern: >-
        ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    Monitor:
      type: object
      properties:
        CreatedAt:
          $ref: '#/components/schemas/iso8601UTC'
          x-is-top-level-property: true
        ModifiedAt:
          $ref: '#/components/schemas/iso8601UTC'
          x-is-top-level-property: true
        MonitorArn:
          type: string
          maxLength: 512
          minLength: 20
          pattern: ^arn:.*
          x-is-top-level-property: true
        MonitorName:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[a-zA-Z0-9_.-]+$
          x-is-top-level-property: true
        ProcessingStatus:
          $ref: '#/components/schemas/MonitorProcessingStatusCode'
          x-is-top-level-property: true
        ProcessingStatusInfo:
          type: string
          x-is-top-level-property: true
        Resources:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
            pattern: ^arn:.*
          x-is-top-level-property: true
        ResourcesToAdd:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
          x-is-top-level-property: true
        ResourcesToRemove:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
          x-is-top-level-property: true
        Status:
          $ref: '#/components/schemas/MonitorConfigState'
          x-is-top-level-property: true
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          x-is-top-level-property: true
        MaxCityNetworksToMonitor:
          type: integer
          minimum: 1
          maximum: 500000
          x-is-top-level-property: true
      required:
        - MonitorName
      x-stackql-resource-name: Monitor
x-stackql-views:
  - Monitor:
      name: Monitor
      id: aws.internetmonitor.Monitor
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.MonitorArn') as monitor_arn,

              JSON_EXTRACT(Properties, '$.MonitorName') as monitor_name,

              JSON_EXTRACT(Properties, '$.ProcessingStatusInfo') as
              processing_status_info,

              JSON_EXTRACT(Properties, '$.Resources') as resources,

              JSON_EXTRACT(Properties, '$.ResourcesToAdd') as resources_to_add,

              JSON_EXTRACT(Properties, '$.ResourcesToRemove') as
              resources_to_remove,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.MaxCityNetworksToMonitor') as
              max_city_networks_to_monitor

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::InternetMonitor::Monitor' ;
