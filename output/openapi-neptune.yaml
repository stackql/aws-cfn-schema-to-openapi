openapi: 3.0.0
info:
  title: Neptune
  version: 1.0.0
paths: {}
components:
  schemas:
    DBClusterRole:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        FeatureName:
          type: string
      required:
        - RoleArn
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    DBCluster:
      type: object
      properties:
        StorageEncrypted:
          type: boolean
        RestoreToTime:
          type: string
        AssociatedRoles:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DBClusterRole'
        SnapshotIdentifier:
          type: string
        Port:
          type: integer
        DBClusterIdentifier:
          type: string
        PreferredBackupWindow:
          type: string
        ClusterResourceId:
          type: string
        Endpoint:
          type: string
        VpcSecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        RestoreType:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        EngineVersion:
          type: string
        KmsKeyId:
          type: string
        AvailabilityZones:
          type: array
          uniqueItems: false
          items:
            type: string
        PreferredMaintenanceWindow:
          type: string
        IamAuthEnabled:
          type: boolean
        DBSubnetGroupName:
          type: string
        DeletionProtection:
          type: boolean
        UseLatestRestorableTime:
          type: boolean
        SourceDBClusterIdentifier:
          type: string
        ReadEndpoint:
          type: string
        DBClusterParameterGroupName:
          type: string
        BackupRetentionPeriod:
          type: integer
        Id:
          type: string
        EnableCloudwatchLogsExports:
          type: array
          uniqueItems: false
          items:
            type: string
      x-stackql-resource-name: DBCluster
    DBClusterParameterGroup:
      type: object
      properties:
        Family:
          type: string
        Description:
          type: string
        Parameters:
          type: object
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Description
        - Parameters
        - Family
      x-stackql-resource-name: DBClusterParameterGroup
    DBInstance:
      type: object
      properties:
        DBInstanceClass:
          type: string
        Port:
          type: string
        DBClusterIdentifier:
          type: string
        AvailabilityZone:
          type: string
        PreferredMaintenanceWindow:
          type: string
        AutoMinorVersionUpgrade:
          type: boolean
        DBSubnetGroupName:
          type: string
        DBInstanceIdentifier:
          type: string
        DBParameterGroupName:
          type: string
        Endpoint:
          type: string
        AllowMajorVersionUpgrade:
          type: boolean
        Id:
          type: string
        DBSnapshotIdentifier:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBInstanceClass
      x-stackql-resource-name: DBInstance
    DBParameterGroup:
      type: object
      properties:
        Family:
          type: string
        Description:
          type: string
        Parameters:
          type: object
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Description
        - Parameters
        - Family
      x-stackql-resource-name: DBParameterGroup
    DBSubnetGroup:
      type: object
      properties:
        DBSubnetGroupName:
          type: string
        Id:
          type: string
        DBSubnetGroupDescription:
          type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBSubnetGroupDescription
        - SubnetIds
      x-stackql-resource-name: DBSubnetGroup
x-stackql-views:
  - DBCluster:
      name: DBCluster
      id: aws.neptune.DBCluster
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.StorageEncrypted') as
              storage_encrypted,

              JSON_EXTRACT(Properties, '$.RestoreToTime') as restore_to_time,

              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,

              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as
              snapshot_identifier,

              JSON_EXTRACT(Properties, '$.Port') as port,

              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as
              d_bcluster_identifier,

              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as
              preferred_backup_window,

              JSON_EXTRACT(Properties, '$.ClusterResourceId') as
              cluster_resource_id,

              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,

              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as
              vpc_security_group_ids,

              JSON_EXTRACT(Properties, '$.RestoreType') as restore_type,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,

              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,

              JSON_EXTRACT(Properties, '$.AvailabilityZones') as
              availability_zones,

              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as
              preferred_maintenance_window,

              JSON_EXTRACT(Properties, '$.IamAuthEnabled') as iam_auth_enabled,

              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as
              d_bsubnet_group_name,

              JSON_EXTRACT(Properties, '$.DeletionProtection') as
              deletion_protection,

              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as
              use_latest_restorable_time,

              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as
              source_db_cluster_identifier,

              JSON_EXTRACT(Properties, '$.ReadEndpoint') as read_endpoint,

              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as
              d_bcluster_parameter_group_name,

              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as
              backup_retention_period,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as
              enable_cloudwatch_logs_exports

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Neptune::DBCluster' ;
  - DBClusterParameterGroup:
      name: DBClusterParameterGroup
      id: aws.neptune.DBClusterParameterGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Family') as family,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Parameters') as parameters,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Neptune::DBClusterParameterGroup' ;
  - DBInstance:
      name: DBInstance
      id: aws.neptune.DBInstance
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DBInstanceClass') as
              d_binstance_class,

              JSON_EXTRACT(Properties, '$.Port') as port,

              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as
              d_bcluster_identifier,

              JSON_EXTRACT(Properties, '$.AvailabilityZone') as
              availability_zone,

              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as
              preferred_maintenance_window,

              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as
              auto_minor_version_upgrade,

              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as
              d_bsubnet_group_name,

              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as
              d_binstance_identifier,

              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as
              d_bparameter_group_name,

              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,

              JSON_EXTRACT(Properties, '$.AllowMajorVersionUpgrade') as
              allow_major_version_upgrade,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.DBSnapshotIdentifier') as
              d_bsnapshot_identifier,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Neptune::DBInstance' ;
  - DBParameterGroup:
      name: DBParameterGroup
      id: aws.neptune.DBParameterGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Family') as family,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.Parameters') as parameters,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Neptune::DBParameterGroup' ;
  - DBSubnetGroup:
      name: DBSubnetGroup
      id: aws.neptune.DBSubnetGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as
              d_bsubnet_group_name,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.DBSubnetGroupDescription') as
              d_bsubnet_group_description,

              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::Neptune::DBSubnetGroup' ;
