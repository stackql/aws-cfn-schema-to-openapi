openapi: 3.0.0
info:
  title: AppStream
  version: 1.0.0
paths: {}
components:
  schemas:
    S3Location:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          type: string
        S3Key:
          type: string
      required:
        - S3Bucket
        - S3Key
    ScriptDetails:
      type: object
      properties:
        ScriptS3Location:
          $ref: '#/components/schemas/S3Location'
        ExecutablePath:
          type: string
        ExecutableParameters:
          type: string
        TimeoutInSeconds:
          type: integer
      additionalProperties: false
      required:
        - ScriptS3Location
        - ExecutablePath
        - TimeoutInSeconds
    Arn:
      type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    AppBlock:
      type: object
      properties:
        Name:
          type: string
        Arn:
          $ref: '#/components/schemas/Arn'
        Description:
          type: string
        DisplayName:
          type: string
        SourceS3Location:
          $ref: '#/components/schemas/S3Location'
        SetupScriptDetails:
          $ref: '#/components/schemas/ScriptDetails'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        CreatedTime:
          type: string
      required:
        - Name
        - SourceS3Location
        - SetupScriptDetails
      x-stackql-resource-name: AppBlock
    PlatformType:
      type: string
    ApplicationAttribute:
      type: string
    Application:
      type: object
      properties:
        Name:
          type: string
        DisplayName:
          type: string
        Description:
          type: string
        LaunchPath:
          type: string
        LaunchParameters:
          type: string
        WorkingDirectory:
          type: string
        InstanceFamilies:
          type: array
          uniqueItems: true
          items:
            type: string
          x-insertionOrder: false
        IconS3Location:
          $ref: '#/components/schemas/S3Location'
        Arn:
          $ref: '#/components/schemas/Arn'
        AppBlockArn:
          $ref: '#/components/schemas/Arn'
        Platforms:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PlatformType'
          x-insertionOrder: false
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        AttributesToDelete:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApplicationAttribute'
          x-insertionOrder: false
        CreatedTime:
          type: string
      required:
        - Name
        - IconS3Location
        - LaunchPath
        - Platforms
        - InstanceFamilies
        - AppBlockArn
      x-stackql-resource-name: Application
    ApplicationEntitlementAssociation:
      type: object
      properties:
        StackName:
          type: string
        EntitlementName:
          type: string
        ApplicationIdentifier:
          type: string
      required:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      x-stackql-resource-name: ApplicationEntitlementAssociation
    ApplicationFleetAssociation:
      type: object
      properties:
        FleetName:
          type: string
        ApplicationArn:
          $ref: '#/components/schemas/Arn'
      required:
        - FleetName
        - ApplicationArn
      x-stackql-resource-name: ApplicationFleetAssociation
    ServiceAccountCredentials:
      type: object
      additionalProperties: false
      properties:
        AccountName:
          type: string
        AccountPassword:
          type: string
      required:
        - AccountName
        - AccountPassword
    CertificateBasedAuthProperties:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        CertificateAuthorityArn:
          type: string
    DirectoryConfig:
      type: object
      properties:
        OrganizationalUnitDistinguishedNames:
          type: array
          uniqueItems: false
          items:
            type: string
        ServiceAccountCredentials:
          $ref: '#/components/schemas/ServiceAccountCredentials'
        DirectoryName:
          type: string
        CertificateBasedAuthProperties:
          $ref: '#/components/schemas/CertificateBasedAuthProperties'
      required:
        - DirectoryName
        - OrganizationalUnitDistinguishedNames
        - ServiceAccountCredentials
      x-stackql-resource-name: DirectoryConfig
    Attribute:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      required:
        - Name
        - Value
      additionalProperties: false
    Entitlement:
      type: object
      properties:
        Name:
          type: string
        StackName:
          type: string
        Description:
          type: string
        AppVisibility:
          type: string
        Attributes:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Attribute'
        CreatedTime:
          type: string
        LastModifiedTime:
          type: string
      required:
        - Name
        - StackName
        - AppVisibility
        - Attributes
      x-stackql-resource-name: Entitlement
    ComputeCapacity:
      type: object
      additionalProperties: false
      properties:
        DesiredInstances:
          type: integer
      required:
        - DesiredInstances
    VpcConfig:
      type: object
      additionalProperties: false
      properties:
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
    DomainJoinInfo:
      type: object
      additionalProperties: false
      properties:
        OrganizationalUnitDistinguishedName:
          type: string
        DirectoryName:
          type: string
    Fleet:
      type: object
      properties:
        Description:
          type: string
        ComputeCapacity:
          $ref: '#/components/schemas/ComputeCapacity'
        Platform:
          type: string
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        FleetType:
          type: string
        EnableDefaultInternetAccess:
          type: boolean
        DomainJoinInfo:
          $ref: '#/components/schemas/DomainJoinInfo'
        SessionScriptS3Location:
          $ref: '#/components/schemas/S3Location'
        Name:
          type: string
        ImageName:
          type: string
        MaxUserDurationInSeconds:
          type: integer
        IdleDisconnectTimeoutInSeconds:
          type: integer
        UsbDeviceFilterStrings:
          type: array
          uniqueItems: false
          items:
            type: string
        DisconnectTimeoutInSeconds:
          type: integer
        DisplayName:
          type: string
        StreamView:
          type: string
        IamRoleArn:
          type: string
        Id:
          type: string
        InstanceType:
          type: string
        MaxConcurrentSessions:
          type: integer
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        ImageArn:
          type: string
      required:
        - InstanceType
        - Name
      x-stackql-resource-name: Fleet
    AccessEndpoint:
      type: object
      additionalProperties: false
      properties:
        EndpointType:
          type: string
        VpceId:
          type: string
      required:
        - EndpointType
        - VpceId
    ImageBuilder:
      type: object
      properties:
        Description:
          type: string
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        EnableDefaultInternetAccess:
          type: boolean
        DomainJoinInfo:
          $ref: '#/components/schemas/DomainJoinInfo'
        AppstreamAgentVersion:
          type: string
        Name:
          type: string
        ImageName:
          type: string
        DisplayName:
          type: string
        IamRoleArn:
          type: string
        InstanceType:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        StreamingUrl:
          type: string
        ImageArn:
          type: string
        AccessEndpoints:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccessEndpoint'
      required:
        - InstanceType
        - Name
      x-stackql-resource-name: ImageBuilder
    StorageConnector:
      type: object
      additionalProperties: false
      properties:
        Domains:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceIdentifier:
          type: string
        ConnectorType:
          type: string
      required:
        - ConnectorType
    ApplicationSettings:
      type: object
      additionalProperties: false
      properties:
        SettingsGroup:
          type: string
        Enabled:
          type: boolean
      required:
        - Enabled
    StreamingExperienceSettings:
      type: object
      additionalProperties: false
      properties:
        PreferredProtocol:
          type: string
    UserSetting:
      type: object
      additionalProperties: false
      properties:
        Permission:
          type: string
        Action:
          type: string
      required:
        - Action
        - Permission
    Stack:
      type: object
      properties:
        Description:
          type: string
        StorageConnectors:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/StorageConnector'
        DeleteStorageConnectors:
          type: boolean
        EmbedHostDomains:
          type: array
          uniqueItems: false
          items:
            type: string
        UserSettings:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/UserSetting'
        AttributesToDelete:
          type: array
          uniqueItems: false
          items:
            type: string
        RedirectURL:
          type: string
        StreamingExperienceSettings:
          $ref: '#/components/schemas/StreamingExperienceSettings'
        Name:
          type: string
        FeedbackURL:
          type: string
        ApplicationSettings:
          $ref: '#/components/schemas/ApplicationSettings'
        DisplayName:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        AccessEndpoints:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccessEndpoint'
      x-stackql-resource-name: Stack
    StackFleetAssociation:
      type: object
      properties:
        Id:
          type: string
        FleetName:
          type: string
        StackName:
          type: string
      required:
        - FleetName
        - StackName
      x-stackql-resource-name: StackFleetAssociation
    StackUserAssociation:
      type: object
      properties:
        Id:
          type: string
        SendEmailNotification:
          type: boolean
        UserName:
          type: string
        StackName:
          type: string
        AuthenticationType:
          type: string
      required:
        - StackName
        - UserName
        - AuthenticationType
      x-stackql-resource-name: StackUserAssociation
    User:
      type: object
      properties:
        Id:
          type: string
        UserName:
          type: string
        FirstName:
          type: string
        MessageAction:
          type: string
        LastName:
          type: string
        AuthenticationType:
          type: string
      required:
        - UserName
        - AuthenticationType
      x-stackql-resource-name: User
x-stackql-views:
  - AppBlock:
      name: AppBlock
      id: aws.appstream.AppBlock
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,

              JSON_EXTRACT(Properties, '$.SourceS3Location.S3Bucket') as
              source_s3_location_s3_bucket,

              JSON_EXTRACT(Properties, '$.SourceS3Location.S3Key') as
              source_s3_location_s3_key,

              JSON_EXTRACT(Properties, '$.SetupScriptDetails.ScriptS3Location')
              as setup_script_details_script_s3_location,

              JSON_EXTRACT(Properties, '$.SetupScriptDetails.ExecutablePath') as
              setup_script_details_executable_path,

              JSON_EXTRACT(Properties,
              '$.SetupScriptDetails.ExecutableParameters') as
              setup_script_details_executable_parameters,

              JSON_EXTRACT(Properties, '$.SetupScriptDetails.TimeoutInSeconds')
              as setup_script_details_timeout_in_seconds,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::AppBlock' ;
  - Application:
      name: Application
      id: aws.appstream.Application
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.LaunchPath') as launch_path,

              JSON_EXTRACT(Properties, '$.LaunchParameters') as
              launch_parameters,

              JSON_EXTRACT(Properties, '$.WorkingDirectory') as
              working_directory,

              JSON_EXTRACT(Properties, '$.InstanceFamilies') as
              instance_families,

              JSON_EXTRACT(Properties, '$.IconS3Location.S3Bucket') as
              icon_s3_location_s3_bucket,

              JSON_EXTRACT(Properties, '$.IconS3Location.S3Key') as
              icon_s3_location_s3_key,

              JSON_EXTRACT(Properties, '$.Platforms') as platforms,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.AttributesToDelete') as
              attributes_to_delete,

              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::Application' ;
  - ApplicationEntitlementAssociation:
      name: ApplicationEntitlementAssociation
      id: aws.appstream.ApplicationEntitlementAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.StackName') as stack_name,

              JSON_EXTRACT(Properties, '$.EntitlementName') as entitlement_name,

              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as
              application_identifier

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName =
              'AWS::AppStream::ApplicationEntitlementAssociation' ;
  - ApplicationFleetAssociation:
      name: ApplicationFleetAssociation
      id: aws.appstream.ApplicationFleetAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.FleetName') as fleet_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::ApplicationFleetAssociation'
              ;
  - DirectoryConfig:
      name: DirectoryConfig
      id: aws.appstream.DirectoryConfig
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.OrganizationalUnitDistinguishedNames')
              as organizational_unit_distinguished_names,

              JSON_EXTRACT(Properties,
              '$.ServiceAccountCredentials.AccountName') as
              service_account_credentials_account_name,

              JSON_EXTRACT(Properties,
              '$.ServiceAccountCredentials.AccountPassword') as
              service_account_credentials_account_password,

              JSON_EXTRACT(Properties, '$.DirectoryName') as directory_name,

              JSON_EXTRACT(Properties,
              '$.CertificateBasedAuthProperties.Status') as
              certificate_based_auth_properties_status,

              JSON_EXTRACT(Properties,
              '$.CertificateBasedAuthProperties.CertificateAuthorityArn') as
              certificate_based_auth_properties_certificate_authority_arn

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::DirectoryConfig' ;
  - Entitlement:
      name: Entitlement
      id: aws.appstream.Entitlement
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.StackName') as stack_name,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.AppVisibility') as app_visibility,

              JSON_EXTRACT(Properties, '$.Attributes') as attributes,

              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,

              JSON_EXTRACT(Properties, '$.LastModifiedTime') as
              last_modified_time

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::Entitlement' ;
  - Fleet:
      name: Fleet
      id: aws.appstream.Fleet
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ComputeCapacity.DesiredInstances') as
              compute_capacity_desired_instances,

              JSON_EXTRACT(Properties, '$.Platform') as platform,

              JSON_EXTRACT(Properties, '$.VpcConfig.SecurityGroupIds') as
              vpc_config_security_group_ids,

              JSON_EXTRACT(Properties, '$.VpcConfig.SubnetIds') as
              vpc_config_subnet_ids,

              JSON_EXTRACT(Properties, '$.FleetType') as fleet_type,

              JSON_EXTRACT(Properties, '$.EnableDefaultInternetAccess') as
              enable_default_internet_access,

              JSON_EXTRACT(Properties,
              '$.DomainJoinInfo.OrganizationalUnitDistinguishedName') as
              domain_join_info_organizational_unit_distinguished_name,

              JSON_EXTRACT(Properties, '$.DomainJoinInfo.DirectoryName') as
              domain_join_info_directory_name,

              JSON_EXTRACT(Properties, '$.SessionScriptS3Location.S3Bucket') as
              session_script_s3_location_s3_bucket,

              JSON_EXTRACT(Properties, '$.SessionScriptS3Location.S3Key') as
              session_script_s3_location_s3_key,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.ImageName') as image_name,

              JSON_EXTRACT(Properties, '$.MaxUserDurationInSeconds') as
              max_user_duration_in_seconds,

              JSON_EXTRACT(Properties, '$.IdleDisconnectTimeoutInSeconds') as
              idle_disconnect_timeout_in_seconds,

              JSON_EXTRACT(Properties, '$.UsbDeviceFilterStrings') as
              usb_device_filter_strings,

              JSON_EXTRACT(Properties, '$.DisconnectTimeoutInSeconds') as
              disconnect_timeout_in_seconds,

              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,

              JSON_EXTRACT(Properties, '$.StreamView') as stream_view,

              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,

              JSON_EXTRACT(Properties, '$.MaxConcurrentSessions') as
              max_concurrent_sessions,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.ImageArn') as image_arn

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::Fleet' ;
  - ImageBuilder:
      name: ImageBuilder
      id: aws.appstream.ImageBuilder
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.VpcConfig.SecurityGroupIds') as
              vpc_config_security_group_ids,

              JSON_EXTRACT(Properties, '$.VpcConfig.SubnetIds') as
              vpc_config_subnet_ids,

              JSON_EXTRACT(Properties, '$.EnableDefaultInternetAccess') as
              enable_default_internet_access,

              JSON_EXTRACT(Properties,
              '$.DomainJoinInfo.OrganizationalUnitDistinguishedName') as
              domain_join_info_organizational_unit_distinguished_name,

              JSON_EXTRACT(Properties, '$.DomainJoinInfo.DirectoryName') as
              domain_join_info_directory_name,

              JSON_EXTRACT(Properties, '$.AppstreamAgentVersion') as
              appstream_agent_version,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.ImageName') as image_name,

              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,

              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,

              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.StreamingUrl') as streaming_url,

              JSON_EXTRACT(Properties, '$.ImageArn') as image_arn,

              JSON_EXTRACT(Properties, '$.AccessEndpoints') as access_endpoints

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::ImageBuilder' ;
  - Stack:
      name: Stack
      id: aws.appstream.Stack
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.StorageConnectors') as
              storage_connectors,

              JSON_EXTRACT(Properties, '$.DeleteStorageConnectors') as
              delete_storage_connectors,

              JSON_EXTRACT(Properties, '$.EmbedHostDomains') as
              embed_host_domains,

              JSON_EXTRACT(Properties, '$.UserSettings') as user_settings,

              JSON_EXTRACT(Properties, '$.AttributesToDelete') as
              attributes_to_delete,

              JSON_EXTRACT(Properties, '$.RedirectURL') as redirect_ur_l,

              JSON_EXTRACT(Properties,
              '$.StreamingExperienceSettings.PreferredProtocol') as
              streaming_experience_settings_preferred_protocol,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.FeedbackURL') as feedback_ur_l,

              JSON_EXTRACT(Properties, '$.ApplicationSettings.SettingsGroup') as
              application_settings_settings_group,

              JSON_EXTRACT(Properties, '$.ApplicationSettings.Enabled') as
              application_settings_enabled,

              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.AccessEndpoints') as access_endpoints

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::Stack' ;
  - StackFleetAssociation:
      name: StackFleetAssociation
      id: aws.appstream.StackFleetAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.FleetName') as fleet_name,

              JSON_EXTRACT(Properties, '$.StackName') as stack_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::StackFleetAssociation' ;
  - StackUserAssociation:
      name: StackUserAssociation
      id: aws.appstream.StackUserAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.SendEmailNotification') as
              send_email_notification,

              JSON_EXTRACT(Properties, '$.UserName') as user_name,

              JSON_EXTRACT(Properties, '$.StackName') as stack_name,

              JSON_EXTRACT(Properties, '$.AuthenticationType') as
              authentication_type

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::StackUserAssociation' ;
  - User:
      name: User
      id: aws.appstream.User
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.UserName') as user_name,

              JSON_EXTRACT(Properties, '$.FirstName') as first_name,

              JSON_EXTRACT(Properties, '$.MessageAction') as message_action,

              JSON_EXTRACT(Properties, '$.LastName') as last_name,

              JSON_EXTRACT(Properties, '$.AuthenticationType') as
              authentication_type

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::AppStream::User' ;
