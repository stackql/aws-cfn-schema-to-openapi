openapi: 3.0.0
info:
  title: RefactorSpaces
  version: 1.0.0
paths: {}
components:
  schemas:
    ApiGatewayEndpointType:
      type: string
      enum:
        - REGIONAL
        - PRIVATE
    ApiGatewayProxyInput:
      type: object
      properties:
        StageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[-a-zA-Z0-9_]*$
        EndpointType:
          $ref: '#/components/schemas/ApiGatewayEndpointType'
      additionalProperties: false
    ProxyType:
      type: string
      enum:
        - API_GATEWAY
    Tag:
      description: A label for tagging Environment resource
      type: object
      properties:
        Key:
          description: A string used to identify this tag
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^(?!aws:).+
        Value:
          description: A string containing the value for the tag
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Application:
      type: object
      properties:
        ApiGatewayProxy:
          $ref: '#/components/schemas/ApiGatewayProxyInput'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApiGatewayId:
          type: string
          maxLength: 10
          minLength: 10
          pattern: ^[a-z0-9]{10}$
        VpcLinkId:
          type: string
          maxLength: 10
          minLength: 10
          pattern: ^[a-z0-9]{10}$
        NlbArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:[a-zA-Z0-9\\-]+:\\w{12}:[a-zA-Z_0-9+=,.@\\-_\/]+$
        NlbName:
          type: string
          maxLength: 32
          minLength: 1
          pattern: ^(?!internal-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+.*[^-]$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        ProxyType:
          $ref: '#/components/schemas/ProxyType'
        VpcId:
          type: string
          maxLength: 21
          minLength: 12
          pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
        StageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[-a-zA-Z0-9_]*$
        ProxyUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^http://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: >-
            Metadata that you can assign to help organize the frameworks that
            you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - VpcId
        - Name
        - ProxyType
      x-stackql-resource-name: Application
    NetworkFabricType:
      type: string
      enum:
        - TRANSIT_GATEWAY
        - NONE
    Environment:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        NetworkFabricType:
          $ref: '#/components/schemas/NetworkFabricType'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        TransitGatewayId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^tgw-[-a-f0-9]{17}$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: >-
            Metadata that you can assign to help organize the frameworks that
            you create. Each tag is a key-value pair.
      required:
        - Name
        - NetworkFabricType
      x-stackql-resource-name: Environment
    RouteActivationState:
      type: string
      enum:
        - INACTIVE
        - ACTIVE
    Method:
      type: string
      enum:
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
    RouteType:
      type: string
      enum:
        - DEFAULT
        - URI_PATH
    DefaultRouteInput:
      type: object
      properties:
        ActivationState:
          $ref: '#/components/schemas/RouteActivationState'
      required:
        - ActivationState
      additionalProperties: false
    UriPathRouteInput:
      type: object
      properties:
        SourcePath:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^(/[a-zA-Z0-9._-]+)+$
        ActivationState:
          $ref: '#/components/schemas/RouteActivationState'
        Methods:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Method'
        IncludeChildPaths:
          type: boolean
      required:
        - ActivationState
      additionalProperties: false
    Route:
      type: object
      properties:
        PathResourceToId:
          type: string
        Arn:
          type: string
          minLength: 20
          maxLength: 2048
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        RouteIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^rte-([0-9A-Za-z]{10}$)
        RouteType:
          $ref: '#/components/schemas/RouteType'
        ServiceIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^svc-([0-9A-Za-z]{10}$)
        DefaultRoute:
          $ref: '#/components/schemas/DefaultRouteInput'
        UriPathRoute:
          $ref: '#/components/schemas/UriPathRouteInput'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: >-
            Metadata that you can assign to help organize the frameworks that
            you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
        - RouteType
      x-stackql-resource-name: Route
    LambdaEndpointInput:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
      required:
        - Arn
      additionalProperties: false
    ServiceEndpointType:
      type: string
      enum:
        - LAMBDA
        - URL
    UrlEndpointInput:
      type: object
      properties:
        HealthUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https?://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
        Url:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https?://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
      required:
        - Url
      additionalProperties: false
    Service:
      type: object
      properties:
        Arn:
          type: string
          minLength: 20
          maxLength: 2048
          pattern: >-
            ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
        EndpointType:
          $ref: '#/components/schemas/ServiceEndpointType'
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        LambdaEndpoint:
          $ref: '#/components/schemas/LambdaEndpointInput'
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        ServiceIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^svc-([0-9A-Za-z]{10}$)
        UrlEndpoint:
          $ref: '#/components/schemas/UrlEndpointInput'
        VpcId:
          type: string
          maxLength: 21
          minLength: 12
          pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: >-
            Metadata that you can assign to help organize the frameworks that
            you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - EndpointType
        - Name
      x-stackql-resource-name: Service
x-stackql-views:
  - Application:
      name: Application
      id: aws.refactorspaces.Application
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ApiGatewayProxy.StageName') as
              api_gateway_proxy_stage_name,

              JSON_EXTRACT(Properties, '$.ApiGatewayProxy.EndpointType') as
              api_gateway_proxy_endpoint_type,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.ApiGatewayId') as api_gateway_id,

              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,

              JSON_EXTRACT(Properties, '$.NlbArn') as nlb_arn,

              JSON_EXTRACT(Properties, '$.NlbName') as nlb_name,

              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as
              application_identifier,

              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as
              environment_identifier,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,

              JSON_EXTRACT(Properties, '$.StageName') as stage_name,

              JSON_EXTRACT(Properties, '$.ProxyUrl') as proxy_url,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::RefactorSpaces::Application' ;
  - Environment:
      name: Environment
      id: aws.refactorspaces.Environment
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as
              environment_identifier,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.TransitGatewayId') as
              transit_gateway_id,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::RefactorSpaces::Environment' ;
  - Route:
      name: Route
      id: aws.refactorspaces.Route
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.PathResourceToId') as
              path_resource_to_id,

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as
              application_identifier,

              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as
              environment_identifier,

              JSON_EXTRACT(Properties, '$.RouteIdentifier') as route_identifier,

              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as
              service_identifier,

              JSON_EXTRACT(Properties, '$.DefaultRoute.ActivationState') as
              default_route_activation_state,

              JSON_EXTRACT(Properties, '$.UriPathRoute.SourcePath') as
              uri_path_route_source_path,

              JSON_EXTRACT(Properties, '$.UriPathRoute.ActivationState') as
              uri_path_route_activation_state,

              JSON_EXTRACT(Properties, '$.UriPathRoute.Methods') as
              uri_path_route_methods,

              JSON_EXTRACT(Properties, '$.UriPathRoute.IncludeChildPaths') as
              uri_path_route_include_child_paths,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::RefactorSpaces::Route' ;
  - Service:
      name: Service
      id: aws.refactorspaces.Service
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Arn') as arn,

              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as
              application_identifier,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as
              environment_identifier,

              JSON_EXTRACT(Properties, '$.LambdaEndpoint.Arn') as
              lambda_endpoint_arn,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as
              service_identifier,

              JSON_EXTRACT(Properties, '$.UrlEndpoint.HealthUrl') as
              url_endpoint_health_url,

              JSON_EXTRACT(Properties, '$.UrlEndpoint.Url') as url_endpoint_url,

              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::RefactorSpaces::Service' ;
