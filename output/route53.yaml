openapi: 3.0.0
info:
  title: Route53
  version: 1.0.0
paths: {}
components:
  schemas:
    Location:
      type: object
      additionalProperties: false
      properties:
        LocationName:
          description: The name of the location that is associated with the CIDR collection.
          type: string
          minLength: 1
          maxLength: 16
        CidrList:
          description: A list of CIDR blocks.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      required:
        - LocationName
        - CidrList
    CidrCollection:
      type: object
      properties:
        Id:
          description: UUID of the CIDR collection.
          type: string
        Name:
          description: A unique name for the CIDR collection.
          type: string
          pattern: ^[0-9A-Za-z_\-]+$
          minLength: 1
          maxLength: 64
        Arn:
          description: The Amazon resource name (ARN) to uniquely identify the AWS resource.
          type: string
        Locations:
          description: A complex type that contains information about the list of CIDR locations.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Location'
      required:
        - Name
      x-stackql-resource-name: CidrCollection
    DNSSEC:
      type: object
      properties:
        HostedZoneId:
          description: The unique string (ID) used to identify a hosted zone.
          type: string
          pattern: ^[A-Z0-9]{1,32}$
      required:
        - HostedZoneId
      x-stackql-resource-name: DNSSEC
    AlarmIdentifier:
      description: A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
      type: object
      additionalProperties: false
      properties:
        Name:
          description: The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
          type: string
          minLength: 1
          maxLength: 256
        Region:
          description: For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy, the region that the alarm was created in.
          type: string
      required:
        - Name
        - Region
    HealthCheckTag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key name of the tag.
          maxLength: 128
        Value:
          type: string
          description: The value for the tag.
          maxLength: 256
      required:
        - Value
        - Key
    HealthCheck:
      type: object
      properties:
        HealthCheckId:
          type: string
        HealthCheckConfig:
          description: A complex type that contains information about the health check.
          type: object
          properties:
            AlarmIdentifier:
              $ref: '#/components/schemas/AlarmIdentifier'
            ChildHealthChecks:
              type: array
              items:
                type: string
              maxItems: 256
              x-insertionOrder: false
            EnableSNI:
              type: boolean
            FailureThreshold:
              type: integer
              minimum: 1
              maximum: 10
            FullyQualifiedDomainName:
              type: string
              maxLength: 255
            HealthThreshold:
              type: integer
              minimum: 0
              maximum: 256
            InsufficientDataHealthStatus:
              type: string
              enum:
                - Healthy
                - LastKnownStatus
                - Unhealthy
            Inverted:
              type: boolean
            IPAddress:
              type: string
              maxLength: 45
              pattern: >-
                ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$
            MeasureLatency:
              type: boolean
            Port:
              type: integer
              minimum: 1
              maximum: 65535
            Regions:
              type: array
              items:
                type: string
              maxItems: 64
              x-insertionOrder: false
            RequestInterval:
              type: integer
              minimum: 10
              maximum: 30
            ResourcePath:
              type: string
              maxLength: 255
            SearchString:
              type: string
              maxLength: 255
            RoutingControlArn:
              type: string
              minLength: 1
              maxLength: 255
            Type:
              type: string
              enum:
                - CALCULATED
                - CLOUDWATCH_METRIC
                - HTTP
                - HTTP_STR_MATCH
                - HTTPS
                - HTTPS_STR_MATCH
                - TCP
                - RECOVERY_CONTROL
          required:
            - Type
          additionalProperties: false
        HealthCheckTags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/HealthCheckTag'
      required:
        - HealthCheckConfig
      x-stackql-resource-name: HealthCheck
    HostedZoneConfig:
      description: |-
        A complex type that contains an optional comment.

        If you don't want to specify a comment, omit the HostedZoneConfig and Comment elements.
      type: object
      additionalProperties: false
      properties:
        Comment:
          description: Any comments that you want to include about the hosted zone.
          type: string
          maxLength: 256
    HostedZoneTag:
      description: A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key name of the tag.
          maxLength: 128
        Value:
          type: string
          description: The value for the tag.
          maxLength: 256
      required:
        - Value
        - Key
    QueryLoggingConfig:
      description: A complex type that contains information about a configuration for DNS query logging.
      type: object
      additionalProperties: false
      properties:
        CloudWatchLogsLogGroupArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
          type: string
      required:
        - CloudWatchLogsLogGroupArn
    VPC:
      description: A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC.
      type: object
      additionalProperties: false
      properties:
        VPCId:
          description: The ID of an Amazon VPC.
          type: string
        VPCRegion:
          description: The region that an Amazon VPC was created in. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a list of up to date regions.
          type: string
      required:
        - VPCId
        - VPCRegion
    HostedZone:
      type: object
      properties:
        Id:
          type: string
        HostedZoneConfig:
          $ref: '#/components/schemas/HostedZoneConfig'
        HostedZoneTags:
          description: |-
            Adds, edits, or deletes tags for a health check or a hosted zone.

            For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/HostedZoneTag'
        Name:
          description: |-
            The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.

            If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
          type: string
          maxLength: 1024
        QueryLoggingConfig:
          $ref: '#/components/schemas/QueryLoggingConfig'
        VPCs:
          description: A complex type that contains information about the VPCs that are associated with the specified hosted zone.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VPC'
        NameServers:
          type: array
          uniqueItems: false
          items:
            type: string
      x-stackql-resource-name: HostedZone
    KeySigningKey:
      type: object
      properties:
        HostedZoneId:
          description: The unique string (ID) used to identify a hosted zone.
          type: string
          pattern: ^[A-Z0-9]{1,32}$
        Status:
          description: A string specifying the initial status of the key signing key (KSK). You can set the value to ACTIVE or INACTIVE.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        Name:
          description: An alphanumeric string used to identify a key signing key (KSK). Name must be unique for each key signing key in the same hosted zone.
          type: string
          pattern: ^[a-zA-Z0-9_]{3,128}$
        KeyManagementServiceArn:
          description: The Amazon resource name (ARN) for a customer managed key (CMK) in AWS Key Management Service (KMS). The KeyManagementServiceArn must be unique for each key signing key (KSK) in a single hosted zone.
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Status
        - HostedZoneId
        - Name
        - KeyManagementServiceArn
      x-stackql-resource-name: KeySigningKey
    AliasTarget:
      type: object
      additionalProperties: false
      properties:
        DNSName:
          type: string
        HostedZoneId:
          type: string
        EvaluateTargetHealth:
          type: boolean
      required:
        - HostedZoneId
        - DNSName
    CidrRoutingConfig:
      type: object
      additionalProperties: false
      properties:
        CollectionId:
          type: string
        LocationName:
          type: string
      required:
        - CollectionId
        - LocationName
    GeoLocation:
      type: object
      additionalProperties: false
      properties:
        ContinentCode:
          type: string
        CountryCode:
          type: string
        SubdivisionCode:
          type: string
    RecordSet:
      type: object
      additionalProperties: false
      properties:
        HealthCheckId:
          type: string
        AliasTarget:
          $ref: '#/components/schemas/AliasTarget'
        HostedZoneName:
          type: string
        ResourceRecords:
          type: array
          uniqueItems: true
          items:
            type: string
        HostedZoneId:
          type: string
        SetIdentifier:
          type: string
        TTL:
          type: string
        Weight:
          type: integer
        Name:
          type: string
        Type:
          type: string
        CidrRoutingConfig:
          $ref: '#/components/schemas/CidrRoutingConfig'
        Failover:
          type: string
        Region:
          type: string
        GeoLocation:
          $ref: '#/components/schemas/GeoLocation'
        MultiValueAnswer:
          type: boolean
      required:
        - Type
        - Name
    RecordSetGroup:
      type: object
      properties:
        Comment:
          type: string
        Id:
          type: string
        HostedZoneName:
          type: string
        RecordSets:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RecordSet'
        HostedZoneId:
          type: string
      x-stackql-resource-name: RecordSetGroup
    ClusterEndpoint:
      type: object
      properties:
        Endpoint:
          type: string
          minLength: 1
          maxLength: 128
        Region:
          type: string
          minLength: 1
          maxLength: 32
      additionalProperties: false
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Value
        - Key
    Cluster:
      type: object
      properties:
        Name:
          description: Name of a Cluster. You can use any non-white space character in the name
          type: string
          minLength: 1
          maxLength: 64
        ClusterArn:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
          minLength: 1
          maxLength: 2048
        Status:
          description: 'Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        ClusterEndpoints:
          description: Endpoints for the cluster.
          type: array
          items:
            $ref: '#/components/schemas/ClusterEndpoint'
          x-insertionOrder: false
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required:
        - Name
      x-stackql-resource-name: Cluster
    ControlPanel:
      type: object
      properties:
        ClusterArn:
          description: Cluster to associate with the Control Panel
          type: string
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
        Name:
          description: The name of the control panel. You can use any non-white space character in the name.
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: 'The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        DefaultControlPanel:
          description: A flag that Amazon Route 53 Application Recovery Controller sets to true to designate the default control panel for a cluster. When you create a cluster, Amazon Route 53 Application Recovery Controller creates a control panel, and sets this flag for that control panel. If you create a control panel yourself, this flag is set to false.
          type: boolean
        RoutingControlCount:
          description: Count of associated routing controls
          type: integer
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required:
        - Name
      x-stackql-resource-name: ControlPanel
    RoutingControl:
      type: object
      properties:
        RoutingControlArn:
          description: The Amazon Resource Name (ARN) of the routing control.
          type: string
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the control panel.
          type: string
        Name:
          description: The name of the routing control. You can use any non-white space character in the name.
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        ClusterArn:
          description: Arn associated with Control Panel
          type: string
      required:
        - Name
      x-stackql-resource-name: RoutingControl
    SafetyRuleName:
      description: The name for the safety rule.
      type: string
    RuleType:
      description: 'A rule can be one of the following: ATLEAST, AND, or OR.'
      type: string
      enum:
        - AND
        - OR
        - ATLEAST
    RuleConfig:
      description: The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a transaction completes.
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/RuleType'
        Threshold:
          description: The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
          type: integer
        Inverted:
          description: Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
          type: boolean
      required:
        - Type
        - Threshold
        - Inverted
      additionalProperties: false
    GatingRule:
      description: A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
      type: object
      properties:
        GatingControls:
          description: The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
          type: array
          items:
            type: string
          x-insertionOrder: false
        TargetControls:
          description: |-
            Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. 
            In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
          type: array
          items:
            type: string
          x-insertionOrder: false
        WaitPeriodMs:
          description: An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
          type: integer
      required:
        - WaitPeriodMs
        - TargetControls
        - GatingControls
      additionalProperties: false
    AssertionRule:
      description: An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
      type: object
      properties:
        WaitPeriodMs:
          description: An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
          type: integer
        AssertedControls:
          description: The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
          type: array
          items:
            type: string
          x-insertionOrder: false
      required:
        - AssertedControls
        - WaitPeriodMs
      additionalProperties: false
    SafetyRule:
      type: object
      properties:
        AssertionRule:
          $ref: '#/components/schemas/AssertionRule'
        GatingRule:
          $ref: '#/components/schemas/GatingRule'
        Name:
          $ref: '#/components/schemas/SafetyRuleName'
        SafetyRuleArn:
          description: The Amazon Resource Name (ARN) of the safety rule.
          type: string
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the control panel.
          type: string
        Status:
          description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        RuleConfig:
          $ref: '#/components/schemas/RuleConfig'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required: []
      x-stackql-resource-name: SafetyRule
    Cell:
      type: object
      properties:
        CellName:
          description: The name of the cell to create.
          type: string
          pattern: '[a-zA-Z0-9_]+'
          maxLength: 64
        CellArn:
          description: The Amazon Resource Name (ARN) of the cell.
          type: string
          maxLength: 256
        Cells:
          description: A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Regions.
          type: array
          items:
            type: string
          maxItems: 5
          x-insertionOrder: false
        ParentReadinessScopes:
          description: The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
          type: array
          items:
            type: string
          maxItems: 5
          x-insertionOrder: false
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      x-stackql-resource-name: Cell
    ReadinessCheck:
      type: object
      properties:
        ResourceSetName:
          description: The name of the resource set to check.
          type: string
          pattern: '[a-zA-Z0-9_]+'
          minLength: 1
          maxLength: 64
        ReadinessCheckName:
          description: Name of the ReadinessCheck to create.
          type: string
          pattern: '[a-zA-Z0-9_]+'
          minLength: 1
          maxLength: 64
        ReadinessCheckArn:
          description: The Amazon Resource Name (ARN) of the readiness check.
          type: string
          maxLength: 256
        Tags:
          description: A collection of tags associated with a resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      x-stackql-resource-name: ReadinessCheck
    RecoveryGroup:
      type: object
      properties:
        RecoveryGroupName:
          description: The name of the recovery group to create.
          type: string
          pattern: '[a-zA-Z0-9_]+'
          minLength: 1
          maxLength: 64
        Cells:
          description: A list of the cell Amazon Resource Names (ARNs) in the recovery group.
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 256
          maxItems: 5
          x-insertionOrder: false
        RecoveryGroupArn:
          description: A collection of tags associated with a resource.
          type: string
          maxLength: 256
        Tags:
          description: A collection of tags associated with a resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      x-stackql-resource-name: RecoveryGroup
    NLBResource:
      description: The Network Load Balancer resource that a DNS target resource points to.
      type: object
      properties:
        Arn:
          description: A Network Load Balancer resource Amazon Resource Name (ARN).
          type: string
      additionalProperties: false
    R53ResourceRecord:
      description: The Route 53 resource that a DNS target resource record points to.
      type: object
      properties:
        DomainName:
          description: The DNS target domain name.
          type: string
        RecordSetId:
          description: The Resource Record set id.
          type: string
      additionalProperties: false
    TargetResource:
      description: The target resource that the Route 53 record points to.
      type: object
      properties:
        NLBResource:
          $ref: '#/components/schemas/NLBResource'
        R53Resource:
          $ref: '#/components/schemas/R53ResourceRecord'
      oneOf:
        - required:
            - NLBResource
        - required:
            - R53Resource
      additionalProperties: false
    DNSTargetResource:
      description: A component for DNS/routing control readiness checks.
      type: object
      properties:
        DomainName:
          description: The domain name that acts as an ingress point to a portion of the customer application.
          type: string
        RecordSetId:
          description: The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
          type: string
        HostedZoneArn:
          description: The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
          type: string
        RecordType:
          description: The type of DNS record of the target resource.
          type: string
        TargetResource:
          $ref: '#/components/schemas/TargetResource'
      additionalProperties: false
    Resource:
      description: The resource element of a ResourceSet
      type: object
      properties:
        ResourceArn:
          description: The Amazon Resource Name (ARN) of the AWS resource.
          type: string
        ComponentId:
          description: The component identifier of the resource, generated when DNS target resource is used.
          type: string
        DnsTargetResource:
          $ref: '#/components/schemas/DNSTargetResource'
        ReadinessScopes:
          description: A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
          type: array
          items:
            type: string
            maxItems: 5
          x-insertionOrder: false
      additionalProperties: false
    ResourceSet:
      type: object
      properties:
        ResourceSetName:
          description: The name of the resource set to create.
          type: string
        Resources:
          description: A list of resource objects in the resource set.
          type: array
          items:
            $ref: '#/components/schemas/Resource'
          minItems: 1
          maxItems: 6
          x-insertionOrder: false
        ResourceSetArn:
          description: The Amazon Resource Name (ARN) of the resource set.
          type: string
          minLength: 1
          maxLength: 256
        ResourceSetType:
          description: |-
            The resource type of the resources in the resource set. Enter one of the following values for resource type: 

            AWS: :AutoScaling: :AutoScalingGroup, AWS: :CloudWatch: :Alarm, AWS: :EC2: :CustomerGateway, AWS: :DynamoDB: :Table, AWS: :EC2: :Volume, AWS: :ElasticLoadBalancing: :LoadBalancer, AWS: :ElasticLoadBalancingV2: :LoadBalancer, AWS: :MSK: :Cluster, AWS: :RDS: :DBCluster, AWS: :Route53: :HealthCheck, AWS: :SQS: :Queue, AWS: :SNS: :Topic, AWS: :SNS: :Subscription, AWS: :EC2: :VPC, AWS: :EC2: :VPNConnection, AWS: :EC2: :VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
          type: string
        Tags:
          description: A tag to associate with the parameters for a resource set.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required:
        - ResourceSetType
        - Resources
      x-stackql-resource-name: ResourceSet
    Domains:
      description: An inline list of domains to use for this domain list.
      type: array
      uniqueItems: true
      items:
        description: FirewallDomainName
        type: string
        minLength: 1
        maxLength: 255
    FirewallDomainList:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: FirewallDomainListName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        DomainCount:
          description: Count
          type: integer
          minimum: 0
        Status:
          description: ResolverFirewallDomainList, possible values are COMPLETE, DELETING, UPDATING, COMPLETE_IMPORT_FAILED, IMPORTING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - COMPLETE_IMPORT_FAILED
            - IMPORTING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallDomainListAssociationStatus
          type: string
        ManagedOwnerName:
          description: ServicePrincipal
          type: string
          minLength: 1
          maxLength: 512
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        Domains:
          $ref: '#/components/schemas/Domains'
        DomainFileUrl:
          description: S3 URL to import domains from.
          type: string
          minLength: 1
          maxLength: 1024
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: FirewallDomainList
    FirewallRule:
      description: Firewall Rule associating the Rule Group to a Domain List
      type: object
      properties:
        FirewallDomainListId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Priority:
          description: Rule Priority
          type: integer
        Action:
          description: Rule Action
          type: string
          enum:
            - ALLOW
            - BLOCK
            - ALERT
        BlockResponse:
          description: BlockResponse
          type: string
          enum:
            - NODATA
            - NXDOMAIN
            - OVERRIDE
        BlockOverrideDomain:
          description: BlockOverrideDomain
          type: string
          minLength: 1
          maxLength: 255
        BlockOverrideDnsType:
          description: BlockOverrideDnsType
          type: string
          enum:
            - CNAME
        BlockOverrideTtl:
          description: BlockOverrideTtl
          type: integer
          minimum: 0
          maximum: 604800
      required:
        - FirewallDomainListId
        - Priority
        - Action
      additionalProperties: false
    FirewallRuleGroup:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: FirewallRuleGroupName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        RuleCount:
          description: Count
          type: integer
        Status:
          description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallRuleGroupStatus
          type: string
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ShareStatus:
          description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
          type: string
          enum:
            - NOT_SHARED
            - SHARED_WITH_ME
            - SHARED_BY_ME
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        FirewallRules:
          description: FirewallRules
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/FirewallRule'
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: FirewallRuleGroup
    FirewallRuleGroupAssociation:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        FirewallRuleGroupId:
          description: FirewallRuleGroupId
          type: string
          minLength: 1
          maxLength: 64
        VpcId:
          description: VpcId
          type: string
          minLength: 1
          maxLength: 64
        Name:
          description: FirewallRuleGroupAssociationName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 0
          maxLength: 64
        Priority:
          description: Priority
          type: integer
        MutationProtection:
          description: MutationProtectionStatus
          type: string
          enum:
            - ENABLED
            - DISABLED
        ManagedOwnerName:
          description: ServicePrincipal
          type: string
          minLength: 1
          maxLength: 512
        Status:
          description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallDomainListAssociationStatus
          type: string
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - FirewallRuleGroupId
        - VpcId
        - Priority
      x-stackql-resource-name: FirewallRuleGroupAssociation
    ResolverConfig:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        AutodefinedReverse:
          description: ResolverAutodefinedReverseStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
          type: string
          enum:
            - ENABLING
            - ENABLED
            - DISABLING
            - DISABLED
        AutodefinedReverseFlag:
          description: Represents the desired status of AutodefinedReverse. The only supported value on creation is DISABLE. Deletion of this resource will return AutodefinedReverse to its default value (ENABLED).
          type: string
          enum:
            - DISABLE
      required:
        - ResourceId
        - AutodefinedReverseFlag
      x-stackql-resource-name: ResolverConfig
    ResolverDNSSECConfig:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        ValidationStatus:
          description: ResolverDNSSECValidationStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
          type: string
          enum:
            - ENABLING
            - ENABLED
            - DISABLING
            - DISABLED
      x-stackql-resource-name: ResolverDNSSECConfig
    IpAddressRequest:
      type: object
      additionalProperties: false
      properties:
        SubnetId:
          type: string
        Ipv6:
          type: string
        Ip:
          type: string
      required:
        - SubnetId
    ResolverEndpoint:
      type: object
      properties:
        IpAddresses:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/IpAddressRequest'
        ResolverEndpointId:
          type: string
        IpAddressCount:
          type: string
        OutpostArn:
          type: string
        PreferredInstanceType:
          type: string
        ResolverEndpointType:
          type: string
        Arn:
          type: string
        Direction:
          type: string
        HostVPCId:
          type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - IpAddresses
        - Direction
        - SecurityGroupIds
      x-stackql-resource-name: ResolverEndpoint
    ResolverQueryLoggingConfig:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        Status:
          description: ResolverQueryLogConfigStatus, possible values are CREATING, CREATED, DELETED AND FAILED.
          type: string
          enum:
            - CREATING
            - CREATED
            - DELETING
            - FAILED
        ShareStatus:
          description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
          type: string
          enum:
            - NOT_SHARED
            - SHARED_WITH_ME
            - SHARED_BY_ME
        AssociationCount:
          description: Count
          type: integer
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: ResolverQueryLogConfigName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        DestinationArn:
          description: destination arn
          type: string
          minLength: 1
          maxLength: 600
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
      x-stackql-resource-name: ResolverQueryLoggingConfig
    ResolverQueryLoggingConfigAssociation:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        ResolverQueryLogConfigId:
          description: ResolverQueryLogConfigId
          type: string
          minLength: 1
          maxLength: 64
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: ResolverQueryLogConfigAssociationStatus
          type: string
          enum:
            - CREATING
            - ACTIVE
            - ACTION_NEEDED
            - DELETING
            - FAILED
            - OVERRIDDEN
        Error:
          description: ResolverQueryLogConfigAssociationError
          type: string
          enum:
            - NONE
            - DESTINATION_NOT_FOUND
            - ACCESS_DENIED
        ErrorMessage:
          description: ResolverQueryLogConfigAssociationErrorMessage
          type: string
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
      x-stackql-resource-name: ResolverQueryLoggingConfigAssociation
    TargetAddress:
      type: object
      additionalProperties: false
      properties:
        Ip:
          type: string
          description: 'One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses. '
        Ipv6:
          type: string
          description: 'One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses. '
        Port:
          type: string
          description: 'The port at Ip that you want to forward DNS queries to. '
          minLength: 0
          maxLength: 65535
    ResolverRule:
      type: object
      properties:
        ResolverEndpointId:
          type: string
          description: The ID of the endpoint that the rule is associated with.
          minLength: 1
          maxLength: 64
        DomainName:
          type: string
          description: DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
          minLength: 1
          maxLength: 256
        Name:
          type: string
          description: The name for the Resolver rule
          minLength: 0
          maxLength: 64
        RuleType:
          type: string
          description: When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
          enum:
            - FORWARD
            - SYSTEM
            - RECURSIVE
        Tags:
          type: array
          description: An array of key-value pairs to apply to this resource.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TargetIps:
          type: array
          description: An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetAddress'
        Arn:
          type: string
          description: The Amazon Resource Name (ARN) of the resolver rule.
        ResolverRuleId:
          type: string
          description: The ID of the endpoint that the rule is associated with.
      required:
        - DomainName
        - RuleType
      x-stackql-resource-name: ResolverRule
    ResolverRuleAssociation:
      type: object
      properties:
        VPCId:
          description: The ID of the VPC that you associated the Resolver rule with.
          type: string
        ResolverRuleId:
          description: The ID of the Resolver rule that you associated with the VPC that is specified by VPCId.
          type: string
        ResolverRuleAssociationId:
          description: Primary Identifier for Resolver Rule Association
          type: string
        Name:
          description: The name of an association between a Resolver rule and a VPC.
          type: string
      required:
        - VPCId
        - ResolverRuleId
      x-stackql-resource-name: ResolverRuleAssociation
x-stackql-views:
  - CidrCollection:
      name: CidrCollection
      id: aws.route53.CidrCollection
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Locations') as locations
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::CidrCollection' ;
  - DNSSEC:
      name: DNSSEC
      id: aws.route53.DNSSEC
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::DNSSEC' ;
  - HealthCheck:
      name: HealthCheck
      id: aws.route53.HealthCheck
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.HealthCheckId') as health_check_id,
              JSON_EXTRACT(Properties, '$.HealthCheckConfig') as health_check_config,
              JSON_EXTRACT(Properties, '$.HealthCheckTags') as health_check_tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::HealthCheck' ;
  - HostedZone:
      name: HostedZone
      id: aws.route53.HostedZone
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.HostedZoneConfig.Comment') as hosted_zone_config_comment,
              JSON_EXTRACT(Properties, '$.HostedZoneTags') as hosted_zone_tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.QueryLoggingConfig.CloudWatchLogsLogGroupArn') as query_logging_config_cloud_watch_logs_log_group_arn,
              JSON_EXTRACT(Properties, '$.VPCs') as v_pcs,
              JSON_EXTRACT(Properties, '$.NameServers') as name_servers
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::HostedZone' ;
  - KeySigningKey:
      name: KeySigningKey
      id: aws.route53.KeySigningKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.KeyManagementServiceArn') as key_management_service_arn
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::KeySigningKey' ;
  - RecordSetGroup:
      name: RecordSetGroup
      id: aws.route53.RecordSetGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Comment') as comment,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.HostedZoneName') as hosted_zone_name,
              JSON_EXTRACT(Properties, '$.RecordSets') as record_sets,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::RecordSetGroup' ;
  - Cluster:
      name: Cluster
      id: aws.route53.Cluster
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ClusterEndpoints') as cluster_endpoints,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::Cluster' ;
  - ControlPanel:
      name: ControlPanel
      id: aws.route53.ControlPanel
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.DefaultControlPanel') as default_control_panel,
              JSON_EXTRACT(Properties, '$.RoutingControlCount') as routing_control_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ControlPanel' ;
  - RoutingControl:
      name: RoutingControl
      id: aws.route53.RoutingControl
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RoutingControlArn') as routing_control_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::RoutingControl' ;
  - SafetyRule:
      name: SafetyRule
      id: aws.route53.SafetyRule
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.AssertionRule.WaitPeriodMs') as assertion_rule_wait_period_ms,
              JSON_EXTRACT(Properties, '$.AssertionRule.AssertedControls') as assertion_rule_asserted_controls,
              JSON_EXTRACT(Properties, '$.GatingRule.GatingControls') as gating_rule_gating_controls,
              JSON_EXTRACT(Properties, '$.GatingRule.TargetControls') as gating_rule_target_controls,
              JSON_EXTRACT(Properties, '$.GatingRule.WaitPeriodMs') as gating_rule_wait_period_ms,
              JSON_EXTRACT(Properties, '$.SafetyRuleArn') as safety_rule_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.RuleConfig.Type') as rule_config_type,
              JSON_EXTRACT(Properties, '$.RuleConfig.Threshold') as rule_config_threshold,
              JSON_EXTRACT(Properties, '$.RuleConfig.Inverted') as rule_config_inverted,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::SafetyRule' ;
  - Cell:
      name: Cell
      id: aws.route53.Cell
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.CellName') as cell_name,
              JSON_EXTRACT(Properties, '$.CellArn') as cell_arn,
              JSON_EXTRACT(Properties, '$.Cells') as cells,
              JSON_EXTRACT(Properties, '$.ParentReadinessScopes') as parent_readiness_scopes,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::Cell' ;
  - ReadinessCheck:
      name: ReadinessCheck
      id: aws.route53.ReadinessCheck
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ResourceSetName') as resource_set_name,
              JSON_EXTRACT(Properties, '$.ReadinessCheckName') as readiness_check_name,
              JSON_EXTRACT(Properties, '$.ReadinessCheckArn') as readiness_check_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ReadinessCheck' ;
  - RecoveryGroup:
      name: RecoveryGroup
      id: aws.route53.RecoveryGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.RecoveryGroupName') as recovery_group_name,
              JSON_EXTRACT(Properties, '$.Cells') as cells,
              JSON_EXTRACT(Properties, '$.RecoveryGroupArn') as recovery_group_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::RecoveryGroup' ;
  - ResourceSet:
      name: ResourceSet
      id: aws.route53.ResourceSet
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ResourceSetName') as resource_set_name,
              JSON_EXTRACT(Properties, '$.Resources') as resources,
              JSON_EXTRACT(Properties, '$.ResourceSetArn') as resource_set_arn,
              JSON_EXTRACT(Properties, '$.ResourceSetType') as resource_set_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResourceSet' ;
  - FirewallDomainList:
      name: FirewallDomainList
      id: aws.route53.FirewallDomainList
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DomainCount') as domain_count,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.DomainFileUrl') as domain_file_url,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::FirewallDomainList' ;
  - FirewallRuleGroup:
      name: FirewallRuleGroup
      id: aws.route53.FirewallRuleGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RuleCount') as rule_count,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ShareStatus') as share_status,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.FirewallRules') as firewall_rules,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::FirewallRuleGroup' ;
  - FirewallRuleGroupAssociation:
      name: FirewallRuleGroupAssociation
      id: aws.route53.FirewallRuleGroupAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.FirewallRuleGroupId') as firewall_rule_group_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.MutationProtection') as mutation_protection,
              JSON_EXTRACT(Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::FirewallRuleGroupAssociation' ;
  - ResolverConfig:
      name: ResolverConfig
      id: aws.route53.ResolverConfig
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.AutodefinedReverse') as autodefined_reverse,
              JSON_EXTRACT(Properties, '$.AutodefinedReverseFlag') as autodefined_reverse_flag
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverConfig' ;
  - ResolverDNSSECConfig:
      name: ResolverDNSSECConfig
      id: aws.route53.ResolverDNSSECConfig
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ValidationStatus') as validation_status
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverDNSSECConfig' ;
  - ResolverEndpoint:
      name: ResolverEndpoint
      id: aws.route53.ResolverEndpoint
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.IpAddresses') as ip_addresses,
              JSON_EXTRACT(Properties, '$.ResolverEndpointId') as resolver_endpoint_id,
              JSON_EXTRACT(Properties, '$.IpAddressCount') as ip_address_count,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.PreferredInstanceType') as preferred_instance_type,
              JSON_EXTRACT(Properties, '$.ResolverEndpointType') as resolver_endpoint_type,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Direction') as direction,
              JSON_EXTRACT(Properties, '$.HostVPCId') as host_vp_cid,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverEndpoint' ;
  - ResolverQueryLoggingConfig:
      name: ResolverQueryLoggingConfig
      id: aws.route53.ResolverQueryLoggingConfig
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ShareStatus') as share_status,
              JSON_EXTRACT(Properties, '$.AssociationCount') as association_count,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverQueryLoggingConfig' ;
  - ResolverQueryLoggingConfigAssociation:
      name: ResolverQueryLoggingConfigAssociation
      id: aws.route53.ResolverQueryLoggingConfigAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResolverQueryLogConfigId') as resolver_query_log_config_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Error') as error,
              JSON_EXTRACT(Properties, '$.ErrorMessage') as error_message,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverQueryLoggingConfigAssociation' ;
  - ResolverRule:
      name: ResolverRule
      id: aws.route53.ResolverRule
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.ResolverEndpointId') as resolver_endpoint_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RuleType') as rule_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetIps') as target_ips,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ResolverRuleId') as resolver_rule_id
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverRule' ;
  - ResolverRuleAssociation:
      name: ResolverRuleAssociation
      id: aws.route53.ResolverRuleAssociation
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.VPCId') as v_pc_id,
              JSON_EXTRACT(Properties, '$.ResolverRuleId') as resolver_rule_id,
              JSON_EXTRACT(Properties, '$.ResolverRuleAssociationId') as resolver_rule_association_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Route53::ResolverRuleAssociation' ;
