openapi: 3.0.0
info:
  title: ApiGatewayV2
  version: 1.0.0
paths: {}
components:
  schemas:
    BodyS3Location:
      type: object
      additionalProperties: false
      properties:
        Etag:
          type: string
        Bucket:
          type: string
        Version:
          type: string
        Key:
          type: string
    Cors:
      type: object
      additionalProperties: false
      properties:
        AllowOrigins:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowCredentials:
          type: boolean
        ExposeHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        MaxAge:
          type: integer
        AllowMethods:
          type: array
          uniqueItems: false
          items:
            type: string
    Api:
      type: object
      properties:
        RouteSelectionExpression:
          type: string
          x-is-top-level-property: true
        BodyS3Location:
          $ref: '#/components/schemas/BodyS3Location'
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        ApiEndpoint:
          type: string
          x-is-top-level-property: true
        BasePath:
          type: string
          x-is-top-level-property: true
        FailOnWarnings:
          type: boolean
          x-is-top-level-property: true
        DisableExecuteApiEndpoint:
          type: boolean
          x-is-top-level-property: true
        DisableSchemaValidation:
          type: boolean
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
        Target:
          type: string
          x-is-top-level-property: true
        CredentialsArn:
          type: string
          x-is-top-level-property: true
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          x-is-top-level-property: true
        Version:
          type: string
          x-is-top-level-property: true
        ProtocolType:
          type: string
          x-is-top-level-property: true
        RouteKey:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        Body:
          type: object
          x-is-top-level-property: true
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
          x-is-top-level-property: true
        ApiKeySelectionExpression:
          type: string
          x-is-top-level-property: true
      required: []
      x-stackql-resource-name: Api
    AccessLogSettings:
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          type: string
        Format:
          type: string
    RouteSettings:
      type: object
      additionalProperties: false
      properties:
        DetailedMetricsEnabled:
          type: boolean
        LoggingLevel:
          type: string
        DataTraceEnabled:
          type: boolean
        ThrottlingBurstLimit:
          type: integer
        ThrottlingRateLimit:
          type: number
    StageOverrides:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
        AutoDeploy:
          type: boolean
        RouteSettings:
          type: object
        StageVariables:
          type: object
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
    RouteOverrides:
      type: object
      additionalProperties: false
      properties:
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
        Target:
          type: string
        AuthorizationType:
          type: string
        AuthorizerId:
          type: string
        OperationName:
          type: string
    IntegrationOverrides:
      type: object
      additionalProperties: false
      properties:
        TimeoutInMillis:
          type: integer
        Description:
          type: string
        PayloadFormatVersion:
          type: string
        IntegrationMethod:
          type: string
    ApiGatewayManagedOverrides:
      type: object
      properties:
        Stage:
          $ref: '#/components/schemas/StageOverrides'
          x-is-top-level-property: true
        Integration:
          $ref: '#/components/schemas/IntegrationOverrides'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        Route:
          $ref: '#/components/schemas/RouteOverrides'
          x-is-top-level-property: true
      required:
        - ApiId
      x-stackql-resource-name: ApiGatewayManagedOverrides
    ApiMapping:
      type: object
      properties:
        Stage:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        ApiMappingKey:
          type: string
          x-is-top-level-property: true
        DomainName:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - DomainName
        - Stage
        - ApiId
      x-stackql-resource-name: ApiMapping
    JWTConfiguration:
      type: object
      additionalProperties: false
      properties:
        Issuer:
          type: string
        Audience:
          type: array
          uniqueItems: false
          items:
            type: string
    Authorizer:
      type: object
      properties:
        IdentityValidationExpression:
          type: string
          x-is-top-level-property: true
        AuthorizerUri:
          type: string
          x-is-top-level-property: true
        AuthorizerCredentialsArn:
          type: string
          x-is-top-level-property: true
        AuthorizerType:
          type: string
          x-is-top-level-property: true
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          x-is-top-level-property: true
        AuthorizerResultTtlInSeconds:
          type: integer
          x-is-top-level-property: true
        IdentitySource:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        AuthorizerPayloadFormatVersion:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        EnableSimpleResponses:
          type: boolean
          x-is-top-level-property: true
        AuthorizerId:
          type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
      required:
        - AuthorizerType
        - ApiId
        - Name
      x-stackql-resource-name: Authorizer
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        StageName:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - ApiId
      x-stackql-resource-name: Deployment
    MutualTlsAuthentication:
      type: object
      additionalProperties: false
      properties:
        TruststoreVersion:
          type: string
        TruststoreUri:
          type: string
    DomainNameConfiguration:
      type: object
      additionalProperties: false
      properties:
        OwnershipVerificationCertificateArn:
          type: string
        EndpointType:
          type: string
        CertificateName:
          type: string
        SecurityPolicy:
          type: string
        CertificateArn:
          type: string
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
          x-is-top-level-property: true
        RegionalHostedZoneId:
          type: string
          x-is-top-level-property: true
        RegionalDomainName:
          type: string
          x-is-top-level-property: true
        DomainName:
          type: string
          x-is-top-level-property: true
        DomainNameConfigurations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
      required:
        - DomainName
      x-stackql-resource-name: DomainName
    TlsConfig:
      type: object
      additionalProperties: false
      properties:
        ServerNameToVerify:
          type: string
    Integration:
      type: object
      properties:
        Description:
          type: string
          x-is-top-level-property: true
        TemplateSelectionExpression:
          type: string
          x-is-top-level-property: true
        ConnectionType:
          type: string
          x-is-top-level-property: true
        ResponseParameters:
          type: object
          x-is-top-level-property: true
        IntegrationMethod:
          type: string
          x-is-top-level-property: true
        PassthroughBehavior:
          type: string
          x-is-top-level-property: true
        RequestParameters:
          type: object
          x-is-top-level-property: true
        ConnectionId:
          type: string
          x-is-top-level-property: true
        IntegrationUri:
          type: string
          x-is-top-level-property: true
        PayloadFormatVersion:
          type: string
          x-is-top-level-property: true
        CredentialsArn:
          type: string
          x-is-top-level-property: true
        RequestTemplates:
          type: object
          x-is-top-level-property: true
        TimeoutInMillis:
          type: integer
          x-is-top-level-property: true
        TlsConfig:
          $ref: '#/components/schemas/TlsConfig'
          x-is-top-level-property: true
        ContentHandlingStrategy:
          type: string
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        IntegrationSubtype:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        IntegrationType:
          type: string
          x-is-top-level-property: true
      required:
        - ApiId
        - IntegrationType
      x-stackql-resource-name: Integration
    IntegrationResponse:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        ResponseTemplates:
          type: object
          x-is-top-level-property: true
        TemplateSelectionExpression:
          type: string
          x-is-top-level-property: true
        ResponseParameters:
          type: object
          x-is-top-level-property: true
        ContentHandlingStrategy:
          type: string
          x-is-top-level-property: true
        IntegrationId:
          type: string
          x-is-top-level-property: true
        IntegrationResponseKey:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
      required:
        - IntegrationId
        - IntegrationResponseKey
        - ApiId
      x-stackql-resource-name: IntegrationResponse
    Model:
      type: object
      properties:
        ModelId:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        ContentType:
          type: string
          x-is-top-level-property: true
        Schema:
          type: object
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
      required:
        - ApiId
        - Schema
        - Name
      x-stackql-resource-name: Model
    Route:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        Target:
          type: string
          x-is-top-level-property: true
        RouteResponseSelectionExpression:
          type: string
          x-is-top-level-property: true
        AuthorizerId:
          type: string
          x-is-top-level-property: true
        RequestModels:
          type: object
          x-is-top-level-property: true
        OperationName:
          type: string
          x-is-top-level-property: true
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        ApiKeyRequired:
          type: boolean
          x-is-top-level-property: true
        RouteKey:
          type: string
          x-is-top-level-property: true
        AuthorizationType:
          type: string
          x-is-top-level-property: true
        ModelSelectionExpression:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        RequestParameters:
          type: object
          x-is-top-level-property: true
      required:
        - RouteKey
        - ApiId
      x-stackql-resource-name: Route
    RouteResponse:
      type: object
      properties:
        Id:
          type: string
          x-is-top-level-property: true
        RouteResponseKey:
          type: string
          x-is-top-level-property: true
        ResponseParameters:
          type: object
          x-is-top-level-property: true
        RouteId:
          type: string
          x-is-top-level-property: true
        ModelSelectionExpression:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        ResponseModels:
          type: object
          x-is-top-level-property: true
      required:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-stackql-resource-name: RouteResponse
    Stage:
      type: object
      properties:
        DeploymentId:
          type: string
          x-is-top-level-property: true
        Description:
          type: string
          x-is-top-level-property: true
        AutoDeploy:
          type: boolean
          x-is-top-level-property: true
        RouteSettings:
          type: object
          x-is-top-level-property: true
        StageName:
          type: string
          x-is-top-level-property: true
        StageVariables:
          type: object
          x-is-top-level-property: true
        AccessPolicyId:
          type: string
          x-is-top-level-property: true
        ClientCertificateId:
          type: string
          x-is-top-level-property: true
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          x-is-top-level-property: true
        Id:
          type: string
          x-is-top-level-property: true
        ApiId:
          type: string
          x-is-top-level-property: true
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          x-is-top-level-property: true
        Tags:
          type: object
          x-is-top-level-property: true
      required:
        - StageName
        - ApiId
      x-stackql-resource-name: Stage
    VpcLink:
      type: object
      properties:
        VpcLinkId:
          type: string
          x-is-top-level-property: true
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
          x-is-top-level-property: true
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
          x-is-top-level-property: true
        Name:
          type: string
          x-is-top-level-property: true
      required:
        - SubnetIds
        - Name
      x-stackql-resource-name: VpcLink
x-stackql-views:
  - Api:
      name: Api
      id: aws.apigatewayv2.Api
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.RouteSelectionExpression') as
              route_selection_expression,

              JSON_EXTRACT(Properties, '$.BodyS3Location.Etag') as
              body_s3_location_etag,

              JSON_EXTRACT(Properties, '$.BodyS3Location.Bucket') as
              body_s3_location_bucket,

              JSON_EXTRACT(Properties, '$.BodyS3Location.Version') as
              body_s3_location_version,

              JSON_EXTRACT(Properties, '$.BodyS3Location.Key') as
              body_s3_location_key,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ApiEndpoint') as api_endpoint,

              JSON_EXTRACT(Properties, '$.BasePath') as base_path,

              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,

              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as
              disable_execute_api_endpoint,

              JSON_EXTRACT(Properties, '$.DisableSchemaValidation') as
              disable_schema_validation,

              JSON_EXTRACT(Properties, '$.Name') as name,

              JSON_EXTRACT(Properties, '$.Target') as target,

              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowOrigins') as
              cors_configuration_allow_origins,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowCredentials')
              as cors_configuration_allow_credentials,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.ExposeHeaders') as
              cors_configuration_expose_headers,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowHeaders') as
              cors_configuration_allow_headers,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.MaxAge') as
              cors_configuration_max_age,

              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowMethods') as
              cors_configuration_allow_methods,

              JSON_EXTRACT(Properties, '$.Version') as version,

              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,

              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.Body') as body,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.ApiKeySelectionExpression') as
              api_key_selection_expression

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Api' ;
  - ApiGatewayManagedOverrides:
      name: ApiGatewayManagedOverrides
      id: aws.apigatewayv2.ApiGatewayManagedOverrides
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Stage.Description') as
              stage_description,

              JSON_EXTRACT(Properties, '$.Stage.AccessLogSettings') as
              stage_access_log_settings,

              JSON_EXTRACT(Properties, '$.Stage.AutoDeploy') as
              stage_auto_deploy,

              JSON_EXTRACT(Properties, '$.Stage.RouteSettings') as
              stage_route_settings,

              JSON_EXTRACT(Properties, '$.Stage.StageVariables') as
              stage_stage_variables,

              JSON_EXTRACT(Properties, '$.Stage.DefaultRouteSettings') as
              stage_default_route_settings,

              JSON_EXTRACT(Properties, '$.Integration.TimeoutInMillis') as
              integration_timeout_in_millis,

              JSON_EXTRACT(Properties, '$.Integration.Description') as
              integration_description,

              JSON_EXTRACT(Properties, '$.Integration.PayloadFormatVersion') as
              integration_payload_format_version,

              JSON_EXTRACT(Properties, '$.Integration.IntegrationMethod') as
              integration_integration_method,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.Route.AuthorizationScopes') as
              route_authorization_scopes,

              JSON_EXTRACT(Properties, '$.Route.Target') as route_target,

              JSON_EXTRACT(Properties, '$.Route.AuthorizationType') as
              route_authorization_type,

              JSON_EXTRACT(Properties, '$.Route.AuthorizerId') as
              route_authorizer_id,

              JSON_EXTRACT(Properties, '$.Route.OperationName') as
              route_operation_name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName =
              'AWS::ApiGatewayV2::ApiGatewayManagedOverrides' ;
  - ApiMapping:
      name: ApiMapping
      id: aws.apigatewayv2.ApiMapping
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Stage') as stage,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ApiMappingKey') as api_mapping_key,

              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::ApiMapping' ;
  - Authorizer:
      name: Authorizer
      id: aws.apigatewayv2.Authorizer
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as
              identity_validation_expression,

              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,

              JSON_EXTRACT(Properties, '$.AuthorizerCredentialsArn') as
              authorizer_credentials_arn,

              JSON_EXTRACT(Properties, '$.AuthorizerType') as authorizer_type,

              JSON_EXTRACT(Properties, '$.JwtConfiguration.Issuer') as
              jwt_configuration_issuer,

              JSON_EXTRACT(Properties, '$.JwtConfiguration.Audience') as
              jwt_configuration_audience,

              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as
              authorizer_result_ttl_in_seconds,

              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,

              JSON_EXTRACT(Properties, '$.AuthorizerPayloadFormatVersion') as
              authorizer_payload_format_version,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.EnableSimpleResponses') as
              enable_simple_responses,

              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Authorizer' ;
  - Deployment:
      name: Deployment
      id: aws.apigatewayv2.Deployment
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.StageName') as stage_name,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Deployment' ;
  - DomainName:
      name: DomainName
      id: aws.apigatewayv2.DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties,
              '$.MutualTlsAuthentication.TruststoreVersion') as
              mutual_tls_authentication_truststore_version,

              JSON_EXTRACT(Properties,
              '$.MutualTlsAuthentication.TruststoreUri') as
              mutual_tls_authentication_truststore_uri,

              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as
              regional_hosted_zone_id,

              JSON_EXTRACT(Properties, '$.RegionalDomainName') as
              regional_domain_name,

              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,

              JSON_EXTRACT(Properties, '$.DomainNameConfigurations') as
              domain_name_configurations,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::DomainName' ;
  - Integration:
      name: Integration
      id: aws.apigatewayv2.Integration
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as
              template_selection_expression,

              JSON_EXTRACT(Properties, '$.ConnectionType') as connection_type,

              JSON_EXTRACT(Properties, '$.ResponseParameters') as
              response_parameters,

              JSON_EXTRACT(Properties, '$.IntegrationMethod') as
              integration_method,

              JSON_EXTRACT(Properties, '$.PassthroughBehavior') as
              passthrough_behavior,

              JSON_EXTRACT(Properties, '$.RequestParameters') as
              request_parameters,

              JSON_EXTRACT(Properties, '$.ConnectionId') as connection_id,

              JSON_EXTRACT(Properties, '$.IntegrationUri') as integration_uri,

              JSON_EXTRACT(Properties, '$.PayloadFormatVersion') as
              payload_format_version,

              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,

              JSON_EXTRACT(Properties, '$.RequestTemplates') as
              request_templates,

              JSON_EXTRACT(Properties, '$.TimeoutInMillis') as
              timeout_in_millis,

              JSON_EXTRACT(Properties, '$.TlsConfig.ServerNameToVerify') as
              tls_config_server_name_to_verify,

              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as
              content_handling_strategy,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.IntegrationSubtype') as
              integration_subtype,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.IntegrationType') as integration_type

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Integration' ;
  - IntegrationResponse:
      name: IntegrationResponse
      id: aws.apigatewayv2.IntegrationResponse
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ResponseTemplates') as
              response_templates,

              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as
              template_selection_expression,

              JSON_EXTRACT(Properties, '$.ResponseParameters') as
              response_parameters,

              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as
              content_handling_strategy,

              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,

              JSON_EXTRACT(Properties, '$.IntegrationResponseKey') as
              integration_response_key,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse' ;
  - Model:
      name: Model
      id: aws.apigatewayv2.Model
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.ModelId') as model_id,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.ContentType') as content_type,

              JSON_EXTRACT(Properties, '$.Schema') as schema,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Model' ;
  - Route:
      name: Route
      id: aws.apigatewayv2.Route
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.Target') as target,

              JSON_EXTRACT(Properties, '$.RouteResponseSelectionExpression') as
              route_response_selection_expression,

              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,

              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,

              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,

              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as
              authorization_scopes,

              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,

              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,

              JSON_EXTRACT(Properties, '$.AuthorizationType') as
              authorization_type,

              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as
              model_selection_expression,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.RequestParameters') as
              request_parameters

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Route' ;
  - RouteResponse:
      name: RouteResponse
      id: aws.apigatewayv2.RouteResponse
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.RouteResponseKey') as
              route_response_key,

              JSON_EXTRACT(Properties, '$.ResponseParameters') as
              response_parameters,

              JSON_EXTRACT(Properties, '$.RouteId') as route_id,

              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as
              model_selection_expression,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties, '$.ResponseModels') as response_models

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::RouteResponse' ;
  - Stage:
      name: Stage
      id: aws.apigatewayv2.Stage
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,

              JSON_EXTRACT(Properties, '$.Description') as description,

              JSON_EXTRACT(Properties, '$.AutoDeploy') as auto_deploy,

              JSON_EXTRACT(Properties, '$.RouteSettings') as route_settings,

              JSON_EXTRACT(Properties, '$.StageName') as stage_name,

              JSON_EXTRACT(Properties, '$.StageVariables') as stage_variables,

              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id,

              JSON_EXTRACT(Properties, '$.ClientCertificateId') as
              client_certificate_id,

              JSON_EXTRACT(Properties, '$.AccessLogSettings.DestinationArn') as
              access_log_settings_destination_arn,

              JSON_EXTRACT(Properties, '$.AccessLogSettings.Format') as
              access_log_settings_format,

              JSON_EXTRACT(Properties, '$.Id') as id,

              JSON_EXTRACT(Properties, '$.ApiId') as api_id,

              JSON_EXTRACT(Properties,
              '$.DefaultRouteSettings.DetailedMetricsEnabled') as
              default_route_settings_detailed_metrics_enabled,

              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.LoggingLevel') as
              default_route_settings_logging_level,

              JSON_EXTRACT(Properties,
              '$.DefaultRouteSettings.DataTraceEnabled') as
              default_route_settings_data_trace_enabled,

              JSON_EXTRACT(Properties,
              '$.DefaultRouteSettings.ThrottlingBurstLimit') as
              default_route_settings_throttling_burst_limit,

              JSON_EXTRACT(Properties,
              '$.DefaultRouteSettings.ThrottlingRateLimit') as
              default_route_settings_throttling_rate_limit,

              JSON_EXTRACT(Properties, '$.Tags') as tags

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::Stage' ;
  - VpcLink:
      name: VpcLink
      id: aws.apigatewayv2.VpcLink
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: >-
              SELECT 

              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,

              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,

              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as
              security_group_ids,

              JSON_EXTRACT(Properties, '$.Tags') as tags,

              JSON_EXTRACT(Properties, '$.Name') as name

              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1'
              and data__TypeName = 'AWS::ApiGatewayV2::VpcLink' ;
