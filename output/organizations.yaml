openapi: 3.0.0
info:
  title: Organizations
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A custom key-value pair associated with a resource within your organization.
      type: object
      properties:
        Key:
          type: string
          description: The key identifier, or name, of the tag.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Account:
      type: object
      properties:
        AccountName:
          description: The friendly name of the member account.
          type: string
          pattern: '[\u0020-\u007E]+'
          minLength: 1
          maxLength: 50
        Email:
          description: The email address of the owner to assign to the new member account.
          type: string
          pattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
          minLength: 6
          maxLength: 64
        RoleName:
          description: The name of an IAM role that AWS Organizations automatically preconfigures in the new member account. Default name is OrganizationAccountAccessRole if not specified.
          type: string
          default: OrganizationAccountAccessRole
          pattern: '[\w+=,.@-]{1,64}'
          minLength: 1
          maxLength: 64
        ParentIds:
          description: List of parent nodes for the member account. Currently only one parent at a time is supported. Default is root.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
        Tags:
          description: A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify both a tag key and a value.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AccountId:
          description: If the account was created successfully, the unique identifier (ID) of the new account.
          type: string
          pattern: ^\d{12}$
          maxLength: 12
        Arn:
          description: The Amazon Resource Name (ARN) of the account.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}
        JoinedMethod:
          description: The method by which the account joined the organization.
          type: string
          enum:
            - INVITED
            - CREATED
        JoinedTimestamp:
          description: The date the account became a part of the organization.
          type: string
        Status:
          description: The status of the account in the organization.
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - PENDING_CLOSURE
      required:
        - AccountName
        - Email
      x-stackql-resource-name: Account
    OrganizationalUnit:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of this OU.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}
        Id:
          description: The unique identifier (ID) associated with this OU.
          type: string
          pattern: ^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$
          maxLength: 68
        Name:
          description: The friendly name of this OU.
          type: string
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 128
        ParentId:
          description: The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
          type: string
          pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
          maxLength: 100
        Tags:
          description: A list of tags that you want to attach to the newly created OU.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - ParentId
      x-stackql-resource-name: OrganizationalUnit
    Policy:
      type: object
      properties:
        Name:
          description: Name of the Policy
          type: string
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 128
        Type:
          description: 'The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY, SERVICE_CONTROL_POLICY, TAG_POLICY'
          type: string
          enum:
            - SERVICE_CONTROL_POLICY
            - AISERVICES_OPT_OUT_POLICY
            - BACKUP_POLICY
            - TAG_POLICY
        Content:
          type: string
        Description:
          description: Human readable description of the policy
          pattern: '[\s\S]*'
          type: string
          maxLength: 512
        TargetIds:
          description: List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            pattern: ^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
        Tags:
          description: A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Id:
          description: Id of the Policy
          type: string
          pattern: ^p-[0-9a-zA-Z_]{8,128}$
          maxLength: 130
        Arn:
          description: ARN of the Policy
          type: string
          pattern: ^arn:aws.*:organizations::[0-9]{12}:policy/o-[a-z0-9]{10}/(service_control|tag|backup|aiservices_opt_out)_policy/p-[a-z0-9]{8}
        AwsManaged:
          description: A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
          type: boolean
      required:
        - Name
        - Type
        - Content
      x-stackql-resource-name: Policy
    ResourcePolicy:
      type: object
      properties:
        Id:
          description: The unique identifier (ID) associated with this resource policy.
          type: string
          pattern: ^rp-[0-9a-zA-Z_]{4,128}$
          maxLength: 131
        Arn:
          description: The Amazon Resource Name (ARN) of the resource policy.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:resourcepolicy\/o-[a-z0-9]{10,32}\/rp-[0-9a-zA-Z_]{4,128}
        Content:
          type: string
        Tags:
          description: A list of tags that you want to attach to the resource policy
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Content
      x-stackql-resource-name: ResourcePolicy
x-stackql-views:
  - Account:
      name: Account
      id: aws.organizations.Account
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.AccountName') as account_name,
              JSON_EXTRACT(Properties, '$.Email') as email,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.ParentIds') as parent_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.JoinedMethod') as joined_method,
              JSON_EXTRACT(Properties, '$.JoinedTimestamp') as joined_timestamp,
              JSON_EXTRACT(Properties, '$.Status') as status
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Organizations::Account' ;
  - OrganizationalUnit:
      name: OrganizationalUnit
      id: aws.organizations.OrganizationalUnit
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Organizations::OrganizationalUnit' ;
  - Policy:
      name: Policy
      id: aws.organizations.Policy
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TargetIds') as target_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AwsManaged') as aws_managed
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Organizations::Policy' ;
  - ResourcePolicy:
      name: ResourcePolicy
      id: aws.organizations.ResourcePolicy
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::Organizations::ResourcePolicy' ;
