openapi: 3.0.0
info:
  title: Location
  version: 1.0.0
paths: {}
components:
  schemas:
    PricingPlan:
      type: string
      enum:
        - RequestBasedUsage
    iso8601UTC:
      description: The datetime value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ss.sssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    GeofenceCollection:
      type: object
      properties:
        CollectionArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CollectionName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - CollectionName
      x-stackql-resource-name: GeofenceCollection
    MapConfiguration:
      type: object
      properties:
        Style:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      additionalProperties: false
      required:
        - Style
    Map:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/MapConfiguration'
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        MapArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        MapName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - MapName
        - Configuration
      x-stackql-resource-name: Map
    DataSourceConfiguration:
      type: object
      properties:
        IntendedUse:
          $ref: '#/components/schemas/IntendedUse'
      additionalProperties: false
    IntendedUse:
      type: string
      enum:
        - SingleUse
        - Storage
    PlaceIndex:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        DataSourceConfiguration:
          $ref: '#/components/schemas/DataSourceConfiguration'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        IndexArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        IndexName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - IndexName
        - DataSource
      x-stackql-resource-name: PlaceIndex
    RouteCalculator:
      type: object
      properties:
        CalculatorArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CalculatorName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - CalculatorName
        - DataSource
      x-stackql-resource-name: RouteCalculator
    PositionFiltering:
      type: string
      enum:
        - TimeBased
        - DistanceBased
        - AccuracyBased
    Tracker:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        PositionFiltering:
          $ref: '#/components/schemas/PositionFiltering'
        TrackerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - TrackerName
      x-stackql-resource-name: Tracker
    TrackerConsumer:
      type: object
      properties:
        ConsumerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      required:
        - ConsumerArn
        - TrackerName
      x-stackql-resource-name: TrackerConsumer
x-stackql-views:
  - GeofenceCollection:
      name: GeofenceCollection
      id: aws.location.GeofenceCollection
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.CollectionArn') as collection_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection' ;
  - Map:
      name: Map
      id: aws.location.Map
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.Configuration.Style') as configuration_style,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MapArn') as map_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.MapName') as map_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map' ;
  - PlaceIndex:
      name: PlaceIndex
      id: aws.location.PlaceIndex
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.DataSourceConfiguration.IntendedUse') as data_source_configuration_intended_use,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IndexArn') as index_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex' ;
  - RouteCalculator:
      name: RouteCalculator
      id: aws.location.RouteCalculator
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.CalculatorArn') as calculator_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator' ;
  - Tracker:
      name: Tracker
      id: aws.location.Tracker
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.TrackerArn') as tracker_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker' ;
  - TrackerConsumer:
      name: TrackerConsumer
      id: aws.location.TrackerConsumer
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer' ;
