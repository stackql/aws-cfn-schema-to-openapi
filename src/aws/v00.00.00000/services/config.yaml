openapi: 3.0.0
info:
  title: Config
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Value
        - Key
    AggregationAuthorization:
      type: object
      properties:
        AuthorizedAccountId:
          description: The 12-digit account ID of the account authorized to aggregate data.
          type: string
          pattern: ^\d{12}$
        AuthorizedAwsRegion:
          description: The region authorized to collect aggregated data.
          type: string
          minLength: 1
          maxLength: 64
        AggregationAuthorizationArn:
          description: The ARN of the AggregationAuthorization.
          type: string
        Tags:
          description: The tags for the AggregationAuthorization.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-stackql-resource-name: aggregation_authorization
      x-stackql-primaryIdentifier:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-create-only-properties:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-read-only-properties:
        - AggregationAuthorizationArn
      x-required-permissions:
        create:
          - config:DescribeAggregationAuthorizations
          - config:PutAggregationAuthorization
          - config:TagResource
        update:
          - config:DescribeAggregationAuthorizations
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
        read:
          - config:DescribeAggregationAuthorizations
          - config:ListTagsForResource
        delete:
          - config:DescribeAggregationAuthorizations
          - config:DeleteAggregationAuthorization
          - config:UntagResource
        list:
          - config:DescribeAggregationAuthorizations
    Scope:
      type: object
      description: Defines which resources trigger an evaluation for an CC rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
      additionalProperties: false
      properties:
        TagKey:
          type: string
          description: The tag key that is applied to only those AWS resources that you want to trigger an evaluation for the rule.
        ComplianceResourceTypes:
          type: array
          description: The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for ``ComplianceResourceId``.
          uniqueItems: true
          items:
            type: string
        TagValue:
          type: string
          description: The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for ``TagValue``, you must also specify a value for ``TagKey``.
        ComplianceResourceId:
          type: string
          description: The ID of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for ``ComplianceResourceTypes``.
    CustomPolicyDetails:
      type: object
      description: Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
      additionalProperties: false
      properties:
        EnableDebugLogDelivery:
          type: boolean
          description: The boolean expression for enabling debug logging for your CC Custom Policy rule. The default value is ``false``.
        PolicyText:
          type: string
          description: The policy definition containing the logic for your CC Custom Policy rule.
        PolicyRuntime:
          type: string
          description: The runtime system for your CC Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by CC Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-guard).
    SourceDetail:
      type: object
      description: Provides the source and the message types that trigger CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for ``SourceDetail`` only for custom rules.
      additionalProperties: false
      properties:
        EventSource:
          type: string
          description: The source of the event, such as an AWS service, that triggers CC to evaluate your AWS resources.
        MaximumExecutionFrequency:
          type: string
          description: |-
            The frequency at which you want CC to run evaluations for a custom rule with a periodic trigger. If you specify a value for ``MaximumExecutionFrequency``, then ``MessageType`` must use the ``ScheduledNotification`` value.
              By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
             Based on the valid value you choose, CC runs evaluations once for each valid value. For example, if you choose ``Three_Hours``, CC runs evaluations once every three hours. In this case, ``Three_Hours`` is the frequency of this rule.
        MessageType:
          type: string
          description: |-
            The type of notification that triggers CC to run an evaluation for a rule. You can specify the following notification types:
              +   ``ConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers a configuration item as a result of a resource change.
              +   ``OversizedConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers an oversized configuration item. CC may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
              +   ``ScheduledNotification`` - Triggers a periodic evaluation at the frequency specified for ``MaximumExecutionFrequency``.
              +   ``ConfigurationSnapshotDeliveryCompleted`` - Triggers a periodic evaluation when CC delivers a configuration snapshot.
              
             If you want your custom rule to be triggered by configuration changes, specify two SourceDetail objects, one for ``ConfigurationItemChangeNotification`` and one for ``OversizedConfigurationItemChangeNotification``.
      required:
        - EventSource
        - MessageType
    Source:
      type: object
      description: Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
      additionalProperties: false
      properties:
        CustomPolicyDetails:
          description: Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to ``CUSTOM_POLICY``.
          $ref: '#/components/schemas/CustomPolicyDetails'
        SourceIdentifier:
          type: string
          description: |-
            For CC Managed rules, a predefined identifier from a list. For example, ``IAM_PASSWORD_POLICY`` is a managed rule. To reference a managed rule, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html).
             For CC Custom Lambda rules, the identifier is the Amazon Resource Name (ARN) of the rule's LAMlong function, such as ``arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name``.
             For CC Custom Policy rules, this field will be ignored.
        Owner:
          type: string
          description: |-
            Indicates whether AWS or the customer owns and manages the CC rule.
              CC Managed Rules are predefined rules owned by AWS. For more information, see [Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html) in the *developer guide*.
              CC Custom Rules are rules that you can develop either with Guard (``CUSTOM_POLICY``) or LAMlong (``CUSTOM_LAMBDA``). For more information, see [Custom Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html) in the *developer guide*.
        SourceDetails:
          type: array
          description: |-
            Provides the source and the message types that cause CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic.
             If the owner is set to ``CUSTOM_POLICY``, the only acceptable values for the CC rule trigger message type are ``ConfigurationItemChangeNotification`` and ``OversizedConfigurationItemChangeNotification``.
          uniqueItems: true
          items:
            description: Source and message type that can trigger the rule
            $ref: '#/components/schemas/SourceDetail'
      required:
        - Owner
    EvaluationModeConfiguration:
      type: object
      description: The configuration object for CC rule evaluation mode. The supported valid values are Detective or Proactive.
      additionalProperties: false
      properties:
        Mode:
          type: string
          description: The mode of an evaluation. The valid values are Detective or Proactive.
    ConfigRule:
      type: object
      properties:
        ConfigRuleId:
          type: string
          description: ''
        Description:
          type: string
          description: The description that you provide for the CC rule.
        Scope:
          description: |-
            Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
              The scope can be empty.
          $ref: '#/components/schemas/Scope'
        ConfigRuleName:
          type: string
          description: A name for the CC rule. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
        Arn:
          type: string
          description: ''
        Compliance:
          type: object
          description: Indicates whether an AWS resource or CC rule is compliant and provides the number of contributors that affect the compliance.
          additionalProperties: false
          properties:
            Type:
              type: string
              description: Compliance type determined by the Config rule
        MaximumExecutionFrequency:
          type: string
          description: |-
            The maximum frequency with which CC runs evaluations for a rule. You can specify a value for ``MaximumExecutionFrequency`` when:
              +  You are using an AWS managed rule that is triggered at a periodic frequency.
              +  Your custom rule is triggered when CC delivers the configuration snapshot. For more information, see [ConfigSnapshotDeliveryProperties](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html).
              
              By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
        Source:
          description: Provides the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
          $ref: '#/components/schemas/Source'
        InputParameters:
          type: string
          description: A string, in JSON format, that is passed to the CC rule Lambda function.
        EvaluationModes:
          type: array
          description: The modes the CC rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only.
          uniqueItems: false
          items:
            description: Mode of evaluation of AWS Config rule
            $ref: '#/components/schemas/EvaluationModeConfiguration'
      required:
        - Source
      x-stackql-resource-name: config_rule
      x-stackql-primaryIdentifier:
        - ConfigRuleName
      x-create-only-properties:
        - ConfigRuleName
      x-read-only-properties:
        - ConfigRuleId
        - Compliance/Type
        - Arn
      x-required-permissions:
        create:
          - config:PutConfigRule
          - config:DescribeConfigRules
        read:
          - config:DescribeConfigRules
          - config:DescribeComplianceByConfigRule
        delete:
          - config:DeleteConfigRule
          - config:DescribeConfigRules
        list:
          - config:DescribeConfigRules
        update:
          - config:PutConfigRule
          - config:DescribeConfigRules
    AccountAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        AccountIds:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - AccountIds
    OrganizationAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        RoleArn:
          type: string
      required:
        - RoleArn
    ConfigurationAggregator:
      type: object
      properties:
        AccountAggregationSources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccountAggregationSource'
        ConfigurationAggregatorName:
          description: The name of the aggregator.
          type: string
          pattern: '[\w\-]+'
          minLength: 1
          maxLength: 256
        ConfigurationAggregatorArn:
          description: The Amazon Resource Name (ARN) of the aggregator.
          type: string
        OrganizationAggregationSource:
          $ref: '#/components/schemas/OrganizationAggregationSource'
        Tags:
          description: The tags for the configuration aggregator.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: configuration_aggregator
      x-stackql-primaryIdentifier:
        - ConfigurationAggregatorName
      x-create-only-properties:
        - ConfigurationAggregatorName
      x-read-only-properties:
        - ConfigurationAggregatorArn
      x-required-permissions:
        create:
          - config:PutConfigurationAggregator
          - config:DescribeConfigurationAggregators
          - config:TagResource
          - iam:PassRole
          - organizations:EnableAWSServiceAccess
          - organizations:ListDelegatedAdministrators
        read:
          - config:DescribeConfigurationAggregators
          - config:ListTagsForResource
        update:
          - config:PutConfigurationAggregator
          - config:DescribeConfigurationAggregators
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
          - iam:PassRole
          - organizations:EnableAWSServiceAccess
          - organizations:ListDelegatedAdministrators
        delete:
          - config:DeleteConfigurationAggregator
          - config:UntagResource
        list:
          - config:DescribeConfigurationAggregators
    RecordingStrategy:
      type: object
      additionalProperties: false
      properties:
        UseOnly:
          type: string
      required:
        - UseOnly
    ExclusionByResourceTypes:
      type: object
      additionalProperties: false
      properties:
        ResourceTypes:
          type: array
          uniqueItems: true
          items:
            type: string
      required:
        - ResourceTypes
    RecordingModeOverride:
      type: object
      additionalProperties: false
      properties:
        ResourceTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        RecordingFrequency:
          type: string
        Description:
          type: string
      required:
        - ResourceTypes
        - RecordingFrequency
    RecordingGroup:
      type: object
      additionalProperties: false
      properties:
        IncludeGlobalResourceTypes:
          type: boolean
        ResourceTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        RecordingStrategy:
          $ref: '#/components/schemas/RecordingStrategy'
        ExclusionByResourceTypes:
          $ref: '#/components/schemas/ExclusionByResourceTypes'
        AllSupported:
          type: boolean
    RecordingMode:
      type: object
      additionalProperties: false
      properties:
        RecordingModeOverrides:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RecordingModeOverride'
        RecordingFrequency:
          type: string
      required:
        - RecordingFrequency
    ConfigurationRecorder:
      type: object
      properties:
        Id:
          type: string
        RecordingGroup:
          $ref: '#/components/schemas/RecordingGroup'
        RecordingMode:
          $ref: '#/components/schemas/RecordingMode'
        RoleARN:
          type: string
        Name:
          type: string
      required:
        - RoleARN
      x-stackql-resource-name: configuration_recorder
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    ParameterName:
      type: string
      minLength: 0
      maxLength: 255
    ParameterValue:
      type: string
      minLength: 0
      maxLength: 4096
    ConformancePackInputParameter:
      description: Input parameters in the form of key-value pairs for the conformance pack.
      type: object
      properties:
        ParameterName:
          $ref: '#/components/schemas/ParameterName'
        ParameterValue:
          $ref: '#/components/schemas/ParameterValue'
      required:
        - ParameterName
        - ParameterValue
    ConformancePack:
      type: object
      properties:
        ConformancePackName:
          description: Name of the conformance pack which will be assigned as the unique identifier.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 256
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body. You can only specify one of the template body or template S3Uri fields.
          type: string
          minLength: 1
          maxLength: 51200
        TemplateS3Uri:
          description: Location of file containing the template body which points to the conformance pack template that is located in an Amazon S3 bucket. You can only specify one of the template body or template S3Uri fields.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateSSMDocumentDetails:
          description: The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
          type: object
          additionalProperties: false
          properties:
            DocumentName:
              type: string
              minLength: 3
              maxLength: 128
            DocumentVersion:
              type: string
              minLength: 1
              maxLength: 128
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
      required:
        - ConformancePackName
      x-stackql-resource-name: conformance_pack
      x-stackql-primaryIdentifier:
        - ConformancePackName
      x-create-only-properties:
        - ConformancePackName
      x-required-permissions:
        create:
          - config:PutConformancePack
          - config:DescribeConformancePackStatus
          - config:DescribeConformancePacks
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        read:
          - config:DescribeConformancePacks
        update:
          - config:PutConformancePack
          - config:DescribeConformancePackStatus
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        delete:
          - config:DeleteConformancePack
          - config:DescribeConformancePackStatus
        list:
          - config:DescribeConformancePacks
    ConfigSnapshotDeliveryProperties:
      type: object
      additionalProperties: false
      properties:
        DeliveryFrequency:
          type: string
    DeliveryChannel:
      type: object
      properties:
        S3KeyPrefix:
          type: string
        ConfigSnapshotDeliveryProperties:
          $ref: '#/components/schemas/ConfigSnapshotDeliveryProperties'
        S3BucketName:
          type: string
        SnsTopicARN:
          type: string
        Id:
          type: string
        S3KmsKeyArn:
          type: string
        Name:
          type: string
      required:
        - S3BucketName
      x-stackql-resource-name: delivery_channel
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    OrganizationManagedRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        RuleIdentifier:
          type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - RuleIdentifier
    OrganizationCustomRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        LambdaFunctionArn:
          type: string
        OrganizationConfigRuleTriggerTypes:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - LambdaFunctionArn
        - OrganizationConfigRuleTriggerTypes
    OrganizationCustomPolicyRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Runtime:
          type: string
        PolicyText:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        OrganizationConfigRuleTriggerTypes:
          type: array
          uniqueItems: false
          items:
            type: string
        DebugLogDeliveryAccounts:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - Runtime
        - PolicyText
    OrganizationConfigRule:
      type: object
      properties:
        OrganizationCustomRuleMetadata:
          $ref: '#/components/schemas/OrganizationCustomRuleMetadata'
        OrganizationManagedRuleMetadata:
          $ref: '#/components/schemas/OrganizationManagedRuleMetadata'
        ExcludedAccounts:
          type: array
          uniqueItems: false
          items:
            type: string
        OrganizationConfigRuleName:
          type: string
        Id:
          type: string
        OrganizationCustomPolicyRuleMetadata:
          $ref: '#/components/schemas/OrganizationCustomPolicyRuleMetadata'
      required:
        - OrganizationConfigRuleName
      x-stackql-resource-name: organization_config_rule
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - OrganizationConfigRuleName
      x-read-only-properties:
        - Id
    AccountId:
      type: string
    OrganizationConformancePack:
      type: object
      properties:
        OrganizationConformancePackName:
          description: The name of the organization conformance pack.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 128
        TemplateS3Uri:
          description: Location of file containing the template body.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body.
          type: string
          minLength: 1
          maxLength: 51200
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for the delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
        ExcludedAccounts:
          description: A list of AWS accounts to be excluded from an organization conformance pack while deploying a conformance pack.
          type: array
          items:
            $ref: '#/components/schemas/AccountId'
          minItems: 0
          maxItems: 1000
      required:
        - OrganizationConformancePackName
      x-stackql-resource-name: organization_conformance_pack
      x-stackql-primaryIdentifier:
        - OrganizationConformancePackName
      x-create-only-properties:
        - OrganizationConformancePackName
      x-required-permissions:
        create:
          - config:PutOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - config:DescribeOrganizationConformancePacks
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - organizations:ListDelegatedAdministrators
          - organizations:EnableAWSServiceAccess
        read:
          - config:DescribeOrganizationConformancePacks
        delete:
          - config:DeleteOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - organizations:ListDelegatedAdministrators
        update:
          - config:PutOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - organizations:ListDelegatedAdministrators
          - organizations:EnableAWSServiceAccess
        list:
          - config:DescribeOrganizationConformancePacks
    ExecutionControls:
      type: object
      additionalProperties: false
      properties:
        SsmControls:
          $ref: '#/components/schemas/SsmControls'
    SsmControls:
      type: object
      additionalProperties: false
      properties:
        ErrorPercentage:
          type: integer
        ConcurrentExecutionRatePercentage:
          type: integer
    RemediationConfiguration:
      type: object
      properties:
        TargetVersion:
          type: string
        ExecutionControls:
          $ref: '#/components/schemas/ExecutionControls'
        Parameters:
          type: object
        TargetType:
          type: string
        ConfigRuleName:
          type: string
        ResourceType:
          type: string
        RetryAttemptSeconds:
          type: integer
        MaximumAutomaticAttempts:
          type: integer
        Id:
          type: string
        TargetId:
          type: string
        Automatic:
          type: boolean
      required:
        - TargetType
        - ConfigRuleName
        - TargetId
      x-stackql-resource-name: remediation_configuration
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - ConfigRuleName
      x-read-only-properties:
        - Id
    StoredQuery:
      type: object
      properties:
        QueryArn:
          type: string
          minLength: 1
          maxLength: 500
        QueryId:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^\S+$
        QueryName:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-zA-Z0-9-_]+$
        QueryDescription:
          type: string
          minLength: 0
          maxLength: 256
          pattern: '[\s\S]*'
        QueryExpression:
          type: string
          minLength: 1
          maxLength: 4096
          pattern: '[\s\S]*'
        Tags:
          description: The tags for the stored query.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - QueryName
        - QueryExpression
      x-stackql-resource-name: stored_query
      x-stackql-primaryIdentifier:
        - QueryName
      x-create-only-properties:
        - QueryName
      x-read-only-properties:
        - QueryId
        - QueryArn
      x-required-permissions:
        create:
          - config:PutStoredQuery
          - config:GetStoredQuery
          - config:TagResource
        read:
          - config:GetStoredQuery
          - config:ListTagsForResource
        update:
          - config:PutStoredQuery
          - config:GetStoredQuery
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
        delete:
          - config:DeleteStoredQuery
          - config:UntagResource
        list:
          - config:ListStoredQueries
  x-stackQL-resources:
    aggregation_authorizations:
      name: aggregation_authorizations
      id: aws.config.aggregation_authorizations
      x-cfn-schema-name: AggregationAuthorization
      x-type: list
      x-identifiers:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
    aggregation_authorization:
      name: aggregation_authorization
      id: aws.config.aggregation_authorization
      x-cfn-schema-name: AggregationAuthorization
      x-type: get
      x-identifiers:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region,
              JSON_EXTRACT(Properties, '$.AggregationAuthorizationArn') as aggregation_authorization_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
    config_rules:
      name: config_rules
      id: aws.config.config_rules
      x-cfn-schema-name: ConfigRule
      x-type: list
      x-identifiers:
        - ConfigRuleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigRule'
    config_rule:
      name: config_rule
      id: aws.config.config_rule
      x-cfn-schema-name: ConfigRule
      x-type: get
      x-identifiers:
        - ConfigRuleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigRuleId') as config_rule_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Scope') as scope,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Compliance') as compliance,
              JSON_EXTRACT(Properties, '$.MaximumExecutionFrequency') as maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.InputParameters') as input_parameters,
              JSON_EXTRACT(Properties, '$.EvaluationModes') as evaluation_modes
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigRule'
    configuration_aggregators:
      name: configuration_aggregators
      id: aws.config.configuration_aggregators
      x-cfn-schema-name: ConfigurationAggregator
      x-type: list
      x-identifiers:
        - ConfigurationAggregatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
    configuration_aggregator:
      name: configuration_aggregator
      id: aws.config.configuration_aggregator
      x-cfn-schema-name: ConfigurationAggregator
      x-type: get
      x-identifiers:
        - ConfigurationAggregatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountAggregationSources') as account_aggregation_sources,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorArn') as configuration_aggregator_arn,
              JSON_EXTRACT(Properties, '$.OrganizationAggregationSource') as organization_aggregation_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
    configuration_recorders:
      name: configuration_recorders
      id: aws.config.configuration_recorders
      x-cfn-schema-name: ConfigurationRecorder
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationRecorder'
    configuration_recorder:
      name: configuration_recorder
      id: aws.config.configuration_recorder
      x-cfn-schema-name: ConfigurationRecorder
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RecordingGroup') as recording_group,
              JSON_EXTRACT(Properties, '$.RecordingMode') as recording_mode,
              JSON_EXTRACT(Properties, '$.RoleARN') as role_ar_n,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationRecorder'
    conformance_packs:
      name: conformance_packs
      id: aws.config.conformance_packs
      x-cfn-schema-name: ConformancePack
      x-type: list
      x-identifiers:
        - ConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConformancePack'
    conformance_pack:
      name: conformance_pack
      id: aws.config.conformance_pack
      x-cfn-schema-name: ConformancePack
      x-type: get
      x-identifiers:
        - ConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateSSMDocumentDetails') as template_ss_mdocument_details,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConformancePack'
    delivery_channels:
      name: delivery_channels
      id: aws.config.delivery_channels
      x-cfn-schema-name: DeliveryChannel
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::DeliveryChannel'
    delivery_channel:
      name: delivery_channel
      id: aws.config.delivery_channel
      x-cfn-schema-name: DeliveryChannel
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.S3KeyPrefix') as s3_key_prefix,
              JSON_EXTRACT(Properties, '$.ConfigSnapshotDeliveryProperties') as config_snapshot_delivery_properties,
              JSON_EXTRACT(Properties, '$.S3BucketName') as s3_bucket_name,
              JSON_EXTRACT(Properties, '$.SnsTopicARN') as sns_topic_ar_n,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.S3KmsKeyArn') as s3_kms_key_arn,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::DeliveryChannel'
    organization_config_rules:
      name: organization_config_rules
      id: aws.config.organization_config_rules
      x-cfn-schema-name: OrganizationConfigRule
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConfigRule'
    organization_config_rule:
      name: organization_config_rule
      id: aws.config.organization_config_rule
      x-cfn-schema-name: OrganizationConfigRule
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata') as organization_custom_rule_metadata,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata') as organization_managed_rule_metadata,
              JSON_EXTRACT(Properties, '$.ExcludedAccounts') as excluded_accounts,
              JSON_EXTRACT(Properties, '$.OrganizationConfigRuleName') as organization_config_rule_name,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata') as organization_custom_policy_rule_metadata
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConfigRule'
    organization_conformance_packs:
      name: organization_conformance_packs
      id: aws.config.organization_conformance_packs
      x-cfn-schema-name: OrganizationConformancePack
      x-type: list
      x-identifiers:
        - OrganizationConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
    organization_conformance_pack:
      name: organization_conformance_pack
      id: aws.config.organization_conformance_pack
      x-cfn-schema-name: OrganizationConformancePack
      x-type: get
      x-identifiers:
        - OrganizationConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters,
              JSON_EXTRACT(Properties, '$.ExcludedAccounts') as excluded_accounts
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
    remediation_configurations:
      name: remediation_configurations
      id: aws.config.remediation_configurations
      x-cfn-schema-name: RemediationConfiguration
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::RemediationConfiguration'
    remediation_configuration:
      name: remediation_configuration
      id: aws.config.remediation_configuration
      x-cfn-schema-name: RemediationConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetVersion') as target_version,
              JSON_EXTRACT(Properties, '$.ExecutionControls') as execution_controls,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.RetryAttemptSeconds') as retry_attempt_seconds,
              JSON_EXTRACT(Properties, '$.MaximumAutomaticAttempts') as maximum_automatic_attempts,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TargetId') as target_id,
              JSON_EXTRACT(Properties, '$.Automatic') as automatic
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::RemediationConfiguration'
    stored_queries:
      name: stored_queries
      id: aws.config.stored_queries
      x-cfn-schema-name: StoredQuery
      x-type: list
      x-identifiers:
        - QueryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::StoredQuery'
    stored_query:
      name: stored_query
      id: aws.config.stored_query
      x-cfn-schema-name: StoredQuery
      x-type: get
      x-identifiers:
        - QueryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryArn') as query_arn,
              JSON_EXTRACT(Properties, '$.QueryId') as query_id,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name,
              JSON_EXTRACT(Properties, '$.QueryDescription') as query_description,
              JSON_EXTRACT(Properties, '$.QueryExpression') as query_expression,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::StoredQuery'
