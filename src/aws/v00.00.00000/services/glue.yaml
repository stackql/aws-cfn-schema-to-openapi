openapi: 3.0.0
info:
  title: Glue
  version: 1.0.0
paths: {}
components:
  schemas:
    XMLClassifier:
      type: object
      additionalProperties: false
      properties:
        RowTag:
          type: string
        Classification:
          type: string
        Name:
          type: string
      required:
        - RowTag
        - Classification
    JsonClassifier:
      type: object
      additionalProperties: false
      properties:
        JsonPath:
          type: string
        Name:
          type: string
      required:
        - JsonPath
    CsvClassifier:
      type: object
      additionalProperties: false
      properties:
        ContainsCustomDatatype:
          type: array
          uniqueItems: false
          items:
            type: string
        QuoteSymbol:
          type: string
        ContainsHeader:
          type: string
        Delimiter:
          type: string
        Header:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowSingleColumn:
          type: boolean
        CustomDatatypeConfigured:
          type: boolean
        DisableValueTrimming:
          type: boolean
        Name:
          type: string
    GrokClassifier:
      type: object
      additionalProperties: false
      properties:
        CustomPatterns:
          type: string
        GrokPattern:
          type: string
        Classification:
          type: string
        Name:
          type: string
      required:
        - GrokPattern
        - Classification
    Classifier:
      type: object
      properties:
        XMLClassifier:
          $ref: '#/components/schemas/XMLClassifier'
        CsvClassifier:
          $ref: '#/components/schemas/CsvClassifier'
        Id:
          type: string
        GrokClassifier:
          $ref: '#/components/schemas/GrokClassifier'
        JsonClassifier:
          $ref: '#/components/schemas/JsonClassifier'
      x-stackql-resource-name: classifier
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
    ConnectionInput:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        ConnectionType:
          type: string
        MatchCriteria:
          type: array
          uniqueItems: false
          items:
            type: string
        PhysicalConnectionRequirements:
          $ref: '#/components/schemas/PhysicalConnectionRequirements'
        ConnectionProperties:
          type: object
        Name:
          type: string
      required:
        - ConnectionType
    PhysicalConnectionRequirements:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        SecurityGroupIdList:
          type: array
          uniqueItems: false
          items:
            type: string
        SubnetId:
          type: string
    Connection:
      type: object
      properties:
        ConnectionInput:
          $ref: '#/components/schemas/ConnectionInput'
        CatalogId:
          type: string
        Id:
          type: string
      required:
        - ConnectionInput
        - CatalogId
      x-stackql-resource-name: connection
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - CatalogId
      x-read-only-properties:
        - Id
    S3Target:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
        SampleSize:
          type: integer
        Exclusions:
          type: array
          uniqueItems: false
          items:
            type: string
        DlqEventQueueArn:
          type: string
        EventQueueArn:
          type: string
    SchemaChangePolicy:
      type: object
      additionalProperties: false
      properties:
        UpdateBehavior:
          type: string
        DeleteBehavior:
          type: string
    IcebergTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Paths:
          type: array
          uniqueItems: false
          items:
            type: string
        Exclusions:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumTraversalDepth:
          type: integer
    Schedule:
      type: object
      additionalProperties: false
      properties:
        ScheduleExpression:
          type: string
    RecrawlPolicy:
      type: object
      additionalProperties: false
      properties:
        RecrawlBehavior:
          type: string
    MongoDBTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
    DeltaTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        CreateNativeDeltaTable:
          type: boolean
        WriteManifest:
          type: boolean
        DeltaTables:
          type: array
          uniqueItems: false
          items:
            type: string
    JdbcTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Path:
          type: string
        Exclusions:
          type: array
          uniqueItems: false
          items:
            type: string
    Targets:
      type: object
      additionalProperties: false
      properties:
        S3Targets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/S3Target'
        CatalogTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/CatalogTarget'
        DeltaTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DeltaTarget'
        MongoDBTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/MongoDBTarget'
        JdbcTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/JdbcTarget'
        DynamoDBTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DynamoDBTarget'
        IcebergTargets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/IcebergTarget'
    DynamoDBTarget:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
    CatalogTarget:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        DatabaseName:
          type: string
        DlqEventQueueArn:
          type: string
        Tables:
          type: array
          uniqueItems: false
          items:
            type: string
        EventQueueArn:
          type: string
    Crawler:
      type: object
      properties:
        Classifiers:
          type: array
          uniqueItems: false
          items:
            type: string
        Description:
          type: string
        SchemaChangePolicy:
          $ref: '#/components/schemas/SchemaChangePolicy'
        Configuration:
          type: string
        RecrawlPolicy:
          $ref: '#/components/schemas/RecrawlPolicy'
        DatabaseName:
          type: string
        Targets:
          $ref: '#/components/schemas/Targets'
        CrawlerSecurityConfiguration:
          type: string
        Name:
          type: string
        Role:
          type: string
        Schedule:
          $ref: '#/components/schemas/Schedule'
        Id:
          type: string
        TablePrefix:
          type: string
        Tags:
          type: object
      required:
        - Role
        - Targets
      x-stackql-resource-name: crawler
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    CustomEntityType:
      type: object
      properties:
        RegexString:
          type: string
        ContextWords:
          type: array
          uniqueItems: false
          items:
            type: string
        Id:
          type: string
        Tags:
          type: object
        Name:
          type: string
      x-stackql-resource-name: custom_entity_type
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
    DatabaseIdentifier:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        Region:
          type: string
        CatalogId:
          type: string
    PrincipalPrivileges:
      type: object
      additionalProperties: false
      properties:
        Permissions:
          type: array
          uniqueItems: false
          items:
            type: string
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
    DataLakePrincipal:
      type: object
      additionalProperties: false
      properties:
        DataLakePrincipalIdentifier:
          type: string
    FederatedDatabase:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        Identifier:
          type: string
    DatabaseInput:
      type: object
      additionalProperties: false
      properties:
        LocationUri:
          type: string
        CreateTableDefaultPermissions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PrincipalPrivileges'
        Description:
          type: string
        Parameters:
          type: object
        TargetDatabase:
          $ref: '#/components/schemas/DatabaseIdentifier'
        FederatedDatabase:
          $ref: '#/components/schemas/FederatedDatabase'
        Name:
          type: string
    Database:
      type: object
      properties:
        CatalogId:
          type: string
        DatabaseInput:
          $ref: '#/components/schemas/DatabaseInput'
        Id:
          type: string
      required:
        - DatabaseInput
        - CatalogId
      x-stackql-resource-name: database
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - CatalogId
      x-read-only-properties:
        - Id
    ConnectionPasswordEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyId:
          type: string
        ReturnConnectionPasswordEncrypted:
          type: boolean
    EncryptionAtRest:
      type: object
      additionalProperties: false
      properties:
        CatalogEncryptionMode:
          type: string
        CatalogEncryptionServiceRole:
          type: string
        SseAwsKmsKeyId:
          type: string
    DataCatalogEncryptionSettings:
      type: object
      properties:
        CatalogId:
          type: string
        DataCatalogEncryptionSettings:
          $ref: '#/components/schemas/DataCatalogEncryptionSettings'
        Id:
          type: string
      required:
        - DataCatalogEncryptionSettings
        - CatalogId
      x-stackql-resource-name: data_catalog_encryption_settings
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - CatalogId
      x-read-only-properties:
        - Id
    DataQualityTargetTable:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        TableName:
          type: string
    DataQualityRuleset:
      type: object
      properties:
        Ruleset:
          type: string
        Description:
          type: string
        TargetTable:
          $ref: '#/components/schemas/DataQualityTargetTable'
        Id:
          type: string
        ClientToken:
          type: string
        Tags:
          type: object
        Name:
          type: string
      x-stackql-resource-name: data_quality_ruleset
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
    DevEndpoint:
      type: object
      properties:
        ExtraJarsS3Path:
          type: string
        PublicKey:
          type: string
        NumberOfNodes:
          type: integer
        Arguments:
          type: object
        SubnetId:
          type: string
        PublicKeys:
          type: array
          uniqueItems: false
          items:
            type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        RoleArn:
          type: string
        WorkerType:
          type: string
        EndpointName:
          type: string
        GlueVersion:
          type: string
        ExtraPythonLibsS3Path:
          type: string
        SecurityConfiguration:
          type: string
        Id:
          type: string
        NumberOfWorkers:
          type: integer
        Tags:
          type: object
      required:
        - RoleArn
      x-stackql-resource-name: dev_endpoint
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - EndpointName
      x-read-only-properties:
        - Id
    NotificationProperty:
      type: object
      additionalProperties: false
      properties:
        NotifyDelayAfter:
          type: integer
    JobCommand:
      type: object
      additionalProperties: false
      properties:
        Runtime:
          type: string
        ScriptLocation:
          type: string
        PythonVersion:
          type: string
        Name:
          type: string
    ExecutionProperty:
      type: object
      additionalProperties: false
      properties:
        MaxConcurrentRuns:
          type: number
    ConnectionsList:
      type: object
      additionalProperties: false
      properties:
        Connections:
          type: array
          uniqueItems: false
          items:
            type: string
    Job:
      type: object
      properties:
        Connections:
          $ref: '#/components/schemas/ConnectionsList'
        MaxRetries:
          type: number
        Description:
          type: string
        Timeout:
          type: integer
        AllocatedCapacity:
          type: number
        Name:
          type: string
        Role:
          type: string
        DefaultArguments:
          type: object
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
        WorkerType:
          type: string
        ExecutionClass:
          type: string
        LogUri:
          type: string
        Command:
          $ref: '#/components/schemas/JobCommand'
        GlueVersion:
          type: string
        ExecutionProperty:
          $ref: '#/components/schemas/ExecutionProperty'
        SecurityConfiguration:
          type: string
        Id:
          type: string
        NumberOfWorkers:
          type: integer
        Tags:
          type: object
        MaxCapacity:
          type: number
        NonOverridableArguments:
          type: object
      required:
        - Role
        - Command
      x-stackql-resource-name: job
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    GlueTables:
      type: object
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
        DatabaseName:
          type: string
        TableName:
          type: string
        CatalogId:
          type: string
      required:
        - TableName
        - DatabaseName
    TransformEncryption:
      type: object
      additionalProperties: false
      properties:
        TaskRunSecurityConfigurationName:
          type: string
        MLUserDataEncryption:
          $ref: '#/components/schemas/MLUserDataEncryption'
    MLUserDataEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyId:
          type: string
        MLUserDataEncryptionMode:
          type: string
      required:
        - MLUserDataEncryptionMode
    TransformParameters:
      type: object
      additionalProperties: false
      properties:
        TransformType:
          type: string
        FindMatchesParameters:
          $ref: '#/components/schemas/FindMatchesParameters'
      required:
        - TransformType
    InputRecordTables:
      type: object
      additionalProperties: false
      properties:
        GlueTables:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/GlueTables'
    FindMatchesParameters:
      type: object
      additionalProperties: false
      properties:
        PrecisionRecallTradeoff:
          type: number
        EnforceProvidedLabels:
          type: boolean
        PrimaryKeyColumnName:
          type: string
        AccuracyCostTradeoff:
          type: number
      required:
        - PrimaryKeyColumnName
    MLTransform:
      type: object
      properties:
        MaxRetries:
          type: integer
        Description:
          type: string
        TransformEncryption:
          $ref: '#/components/schemas/TransformEncryption'
        Timeout:
          type: integer
        Name:
          type: string
        Role:
          type: string
        WorkerType:
          type: string
        GlueVersion:
          type: string
        TransformParameters:
          $ref: '#/components/schemas/TransformParameters'
        Id:
          type: string
        InputRecordTables:
          $ref: '#/components/schemas/InputRecordTables'
        NumberOfWorkers:
          type: integer
        Tags:
          type: object
        MaxCapacity:
          type: number
      required:
        - Role
        - TransformParameters
        - InputRecordTables
      x-stackql-resource-name: ml_transform
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - InputRecordTables
      x-read-only-properties:
        - Id
    SchemaReference:
      type: object
      additionalProperties: false
      properties:
        SchemaId:
          $ref: '#/components/schemas/SchemaId'
        SchemaVersionId:
          type: string
        SchemaVersionNumber:
          type: integer
    Order:
      type: object
      additionalProperties: false
      properties:
        Column:
          type: string
        SortOrder:
          type: integer
      required:
        - Column
        - SortOrder
    SkewedInfo:
      type: object
      additionalProperties: false
      properties:
        SkewedColumnValues:
          type: array
          uniqueItems: false
          items:
            type: string
        SkewedColumnValueLocationMaps:
          type: object
        SkewedColumnNames:
          type: array
          uniqueItems: false
          items:
            type: string
    Column:
      type: object
      additionalProperties: false
      properties:
        Comment:
          type: string
        Type:
          type: string
        Name:
          type: string
      required:
        - Name
    StorageDescriptor:
      type: object
      additionalProperties: false
      properties:
        StoredAsSubDirectories:
          type: boolean
        Parameters:
          type: object
        BucketColumns:
          type: array
          uniqueItems: false
          items:
            type: string
        NumberOfBuckets:
          type: integer
        OutputFormat:
          type: string
        Columns:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Column'
        SerdeInfo:
          $ref: '#/components/schemas/SerdeInfo'
        SortColumns:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Order'
        Compressed:
          type: boolean
        SchemaReference:
          $ref: '#/components/schemas/SchemaReference'
        SkewedInfo:
          $ref: '#/components/schemas/SkewedInfo'
        InputFormat:
          type: string
        Location:
          type: string
    SchemaId:
      type: object
      additionalProperties: false
      properties:
        RegistryName:
          type: string
        SchemaName:
          type: string
        SchemaArn:
          type: string
    SerdeInfo:
      type: object
      additionalProperties: false
      properties:
        Parameters:
          type: object
        SerializationLibrary:
          type: string
        Name:
          type: string
    PartitionInput:
      type: object
      additionalProperties: false
      properties:
        StorageDescriptor:
          $ref: '#/components/schemas/StorageDescriptor'
        Values:
          type: array
          uniqueItems: false
          items:
            type: string
        Parameters:
          type: object
      required:
        - Values
    Partition:
      type: object
      properties:
        DatabaseName:
          type: string
        TableName:
          type: string
        Id:
          type: string
        CatalogId:
          type: string
        PartitionInput:
          $ref: '#/components/schemas/PartitionInput'
      required:
        - TableName
        - DatabaseName
        - CatalogId
        - PartitionInput
      x-stackql-resource-name: partition
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - TableName
        - DatabaseName
        - CatalogId
      x-read-only-properties:
        - Id
    Tag:
      type: object
      properties:
        Key:
          description: A key to identify the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: Corresponding tag value for the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Registry:
      type: object
      description: Identifier for the registry which the schema is part of.
      properties:
        Name:
          description: Name of the registry in which the schema will be created.
          type: string
          maxLength: 255
          minLength: 1
        Arn:
          description: Amazon Resource Name for the Registry.
          type: string
          pattern: arn:aws(-(cn|us-gov|iso(-[bef])?))?:glue:.*
      additionalProperties: false
    SchemaVersion:
      type: object
      properties:
        Schema:
          $ref: '#/components/schemas/Schema'
        SchemaDefinition:
          type: string
          description: Complete definition of the schema in plain-text.
          minLength: 1
          maxLength: 170000
        VersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
      required:
        - Schema
        - SchemaDefinition
      x-stackql-resource-name: schema_version
      x-stackql-primaryIdentifier:
        - VersionId
      x-create-only-properties:
        - Schema
        - SchemaDefinition
      x-read-only-properties:
        - VersionId
      x-required-permissions:
        create:
          - glue:RegisterSchemaVersion
          - glue:GetSchemaVersion
          - glue:GetSchemaByDefinition
        read:
          - glue:GetSchemaVersion
        delete:
          - glue:DeleteSchemaVersions
          - glue:GetSchemaVersion
        list:
          - glue:ListSchemaVersions
    Schema:
      description: Identifier for the schema where the schema version will be created.
      type: object
      properties:
        SchemaArn:
          description: Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):glue:.*
        SchemaName:
          description: Name of the schema. This parameter requires RegistryName to be provided.
          type: string
          minLength: 1
          maxLength: 255
        RegistryName:
          description: Name of the registry to identify where the Schema is located.
          type: string
          maxLength: 255
          minLength: 1
      additionalProperties: false
    SchemaVersionMetadata:
      type: object
      properties:
        SchemaVersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
        Key:
          type: string
          description: Metadata key
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: Metadata value
          minLength: 1
          maxLength: 256
      required:
        - SchemaVersionId
        - Key
        - Value
      x-stackql-resource-name: schema_version_metadata
      x-stackql-primaryIdentifier:
        - SchemaVersionId
        - Key
        - Value
      x-create-only-properties:
        - SchemaVersionId
        - Key
        - Value
      x-required-permissions:
        create:
          - glue:putSchemaVersionMetadata
        read:
          - glue:querySchemaVersionMetadata
        delete:
          - glue:removeSchemaVersionMetadata
        list:
          - glue:querySchemaVersionMetadata
    S3Encryptions:
      type: object
      additionalProperties: false
    EncryptionConfiguration:
      type: object
      additionalProperties: false
      properties:
        S3Encryptions:
          $ref: '#/components/schemas/S3Encryptions'
        JobBookmarksEncryption:
          $ref: '#/components/schemas/JobBookmarksEncryption'
        CloudWatchEncryption:
          $ref: '#/components/schemas/CloudWatchEncryption'
    CloudWatchEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyArn:
          type: string
        CloudWatchEncryptionMode:
          type: string
    JobBookmarksEncryption:
      type: object
      additionalProperties: false
      properties:
        KmsKeyArn:
          type: string
        JobBookmarksEncryptionMode:
          type: string
    SecurityConfiguration:
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        Name:
          type: string
        Id:
          type: string
      required:
        - EncryptionConfiguration
        - Name
      x-stackql-resource-name: security_configuration
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    TableIdentifier:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        Region:
          type: string
        CatalogId:
          type: string
        Name:
          type: string
    TableInput:
      type: object
      additionalProperties: false
      properties:
        Owner:
          type: string
        ViewOriginalText:
          type: string
        Description:
          type: string
        TableType:
          type: string
        Parameters:
          type: object
        ViewExpandedText:
          type: string
        StorageDescriptor:
          $ref: '#/components/schemas/StorageDescriptor'
        TargetTable:
          $ref: '#/components/schemas/TableIdentifier'
        PartitionKeys:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Column'
        Retention:
          type: integer
        Name:
          type: string
    MetadataOperation:
      type: object
      additionalProperties: false
    OpenTableFormatInput:
      type: object
      additionalProperties: false
      properties:
        IcebergInput:
          $ref: '#/components/schemas/IcebergInput'
    IcebergInput:
      type: object
      additionalProperties: false
      properties:
        MetadataOperation:
          $ref: '#/components/schemas/MetadataOperation'
        Version:
          type: string
    Table:
      type: object
      properties:
        DatabaseName:
          type: string
        TableInput:
          $ref: '#/components/schemas/TableInput'
        OpenTableFormatInput:
          $ref: '#/components/schemas/OpenTableFormatInput'
        Id:
          type: string
        CatalogId:
          type: string
      required:
        - TableInput
        - DatabaseName
        - CatalogId
      x-stackql-resource-name: table
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - DatabaseName
        - CatalogId
      x-read-only-properties:
        - Id
    TableOptimizerConfiguration:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        RoleArn:
          type: string
      required:
        - Enabled
        - RoleArn
    TableOptimizer:
      type: object
      properties:
        DatabaseName:
          type: string
        TableName:
          type: string
        Type:
          type: string
        TableOptimizerConfiguration:
          $ref: '#/components/schemas/TableOptimizerConfiguration'
        Id:
          type: string
        CatalogId:
          type: string
      required:
        - TableName
        - Type
        - DatabaseName
        - TableOptimizerConfiguration
        - CatalogId
      x-stackql-resource-name: table_optimizer
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - TableName
        - DatabaseName
        - Type
        - CatalogId
      x-read-only-properties:
        - Id
    Condition:
      type: object
      additionalProperties: false
      properties:
        JobName:
          type: string
        CrawlerName:
          type: string
        State:
          type: string
        CrawlState:
          type: string
        LogicalOperator:
          type: string
    Action:
      type: object
      additionalProperties: false
      properties:
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
        CrawlerName:
          type: string
        Timeout:
          type: integer
        JobName:
          type: string
        Arguments:
          type: object
        SecurityConfiguration:
          type: string
    EventBatchingCondition:
      type: object
      additionalProperties: false
      properties:
        BatchSize:
          type: integer
        BatchWindow:
          type: integer
      required:
        - BatchSize
    Predicate:
      type: object
      additionalProperties: false
      properties:
        Logical:
          type: string
        Conditions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Condition'
    Trigger:
      type: object
      properties:
        Type:
          type: string
        StartOnCreation:
          type: boolean
        Description:
          type: string
        Actions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Action'
        EventBatchingCondition:
          $ref: '#/components/schemas/EventBatchingCondition'
        WorkflowName:
          type: string
        Schedule:
          type: string
        Id:
          type: string
        Tags:
          type: object
        Name:
          type: string
        Predicate:
          $ref: '#/components/schemas/Predicate'
      required:
        - Type
        - Actions
      x-stackql-resource-name: trigger
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
        - WorkflowName
        - Type
      x-read-only-properties:
        - Id
    Workflow:
      type: object
      properties:
        Description:
          type: string
        Id:
          type: string
        Tags:
          type: object
        DefaultRunProperties:
          type: object
        Name:
          type: string
        MaxConcurrentRuns:
          type: integer
      x-stackql-resource-name: workflow
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
  x-stackQL-resources:
    classifiers:
      name: classifiers
      id: aws.glue.classifiers
      x-cfn-schema-name: Classifier
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Classifier'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Classifier'
    classifier:
      name: classifier
      id: aws.glue.classifier
      x-cfn-schema-name: Classifier
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.XMLClassifier') as x_ml_classifier,
              JSON_EXTRACT(Properties, '$.CsvClassifier') as csv_classifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.GrokClassifier') as grok_classifier,
              JSON_EXTRACT(Properties, '$.JsonClassifier') as json_classifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Classifier'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'XMLClassifier') as x_ml_classifier,
                json_extract_path_text(Properties, 'CsvClassifier') as csv_classifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'GrokClassifier') as grok_classifier,
                json_extract_path_text(Properties, 'JsonClassifier') as json_classifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Classifier'
    connections:
      name: connections
      id: aws.glue.connections
      x-cfn-schema-name: Connection
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Connection'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Connection'
    connection:
      name: connection
      id: aws.glue.connection
      x-cfn-schema-name: Connection
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectionInput') as connection_input,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Connection'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectionInput') as connection_input,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Connection'
    crawlers:
      name: crawlers
      id: aws.glue.crawlers
      x-cfn-schema-name: Crawler
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Crawler'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Crawler'
    crawler:
      name: crawler
      id: aws.glue.crawler
      x-cfn-schema-name: Crawler
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Classifiers') as classifiers,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SchemaChangePolicy') as schema_change_policy,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.RecrawlPolicy') as recrawl_policy,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.CrawlerSecurityConfiguration') as crawler_security_configuration,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TablePrefix') as table_prefix,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Crawler'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Classifiers') as classifiers,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'SchemaChangePolicy') as schema_change_policy,
                json_extract_path_text(Properties, 'Configuration') as configuration,
                json_extract_path_text(Properties, 'RecrawlPolicy') as recrawl_policy,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'Targets') as targets,
                json_extract_path_text(Properties, 'CrawlerSecurityConfiguration') as crawler_security_configuration,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Role') as role,
                json_extract_path_text(Properties, 'Schedule') as schedule,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'TablePrefix') as table_prefix,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Crawler'
    custom_entity_types:
      name: custom_entity_types
      id: aws.glue.custom_entity_types
      x-cfn-schema-name: CustomEntityType
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::CustomEntityType'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::CustomEntityType'
    custom_entity_type:
      name: custom_entity_type
      id: aws.glue.custom_entity_type
      x-cfn-schema-name: CustomEntityType
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegexString') as regex_string,
              JSON_EXTRACT(Properties, '$.ContextWords') as context_words,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::CustomEntityType'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegexString') as regex_string,
                json_extract_path_text(Properties, 'ContextWords') as context_words,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::CustomEntityType'
    databases:
      name: databases
      id: aws.glue.databases
      x-cfn-schema-name: Database
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Database'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Database'
    database:
      name: database
      id: aws.glue.database
      x-cfn-schema-name: Database
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseInput') as database_input,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Database'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                json_extract_path_text(Properties, 'DatabaseInput') as database_input,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Database'
    data_catalog_encryption_settings:
      name: data_catalog_encryption_settings
      id: aws.glue.data_catalog_encryption_settings
      x-cfn-schema-name: DataCatalogEncryptionSettings
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.DataCatalogEncryptionSettings') as data_catalog_encryption_settings,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DataCatalogEncryptionSettings'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                json_extract_path_text(Properties, 'DataCatalogEncryptionSettings') as data_catalog_encryption_settings,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DataCatalogEncryptionSettings'
    data_quality_rulesets:
      name: data_quality_rulesets
      id: aws.glue.data_quality_rulesets
      x-cfn-schema-name: DataQualityRuleset
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::DataQualityRuleset'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::DataQualityRuleset'
    data_quality_ruleset:
      name: data_quality_ruleset
      id: aws.glue.data_quality_ruleset
      x-cfn-schema-name: DataQualityRuleset
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Ruleset') as ruleset,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TargetTable') as target_table,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DataQualityRuleset'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Ruleset') as ruleset,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'TargetTable') as target_table,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ClientToken') as client_token,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DataQualityRuleset'
    dev_endpoints:
      name: dev_endpoints
      id: aws.glue.dev_endpoints
      x-cfn-schema-name: DevEndpoint
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::DevEndpoint'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::DevEndpoint'
    dev_endpoint:
      name: dev_endpoint
      id: aws.glue.dev_endpoint
      x-cfn-schema-name: DevEndpoint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ExtraJarsS3Path') as extra_jars_s3_path,
              JSON_EXTRACT(Properties, '$.PublicKey') as public_key,
              JSON_EXTRACT(Properties, '$.NumberOfNodes') as number_of_nodes,
              JSON_EXTRACT(Properties, '$.Arguments') as arguments,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.PublicKeys') as public_keys,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,
              JSON_EXTRACT(Properties, '$.EndpointName') as endpoint_name,
              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,
              JSON_EXTRACT(Properties, '$.ExtraPythonLibsS3Path') as extra_python_libs_s3_path,
              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as security_configuration,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as number_of_workers,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DevEndpoint'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ExtraJarsS3Path') as extra_jars_s3_path,
                json_extract_path_text(Properties, 'PublicKey') as public_key,
                json_extract_path_text(Properties, 'NumberOfNodes') as number_of_nodes,
                json_extract_path_text(Properties, 'Arguments') as arguments,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'PublicKeys') as public_keys,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'WorkerType') as worker_type,
                json_extract_path_text(Properties, 'EndpointName') as endpoint_name,
                json_extract_path_text(Properties, 'GlueVersion') as glue_version,
                json_extract_path_text(Properties, 'ExtraPythonLibsS3Path') as extra_python_libs_s3_path,
                json_extract_path_text(Properties, 'SecurityConfiguration') as security_configuration,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'NumberOfWorkers') as number_of_workers,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::DevEndpoint'
    jobs:
      name: jobs
      id: aws.glue.jobs
      x-cfn-schema-name: Job
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Job'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Job'
    job:
      name: job
      id: aws.glue.job
      x-cfn-schema-name: Job
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Connections') as connections,
              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.AllocatedCapacity') as allocated_capacity,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.DefaultArguments') as default_arguments,
              JSON_EXTRACT(Properties, '$.NotificationProperty') as notification_property,
              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,
              JSON_EXTRACT(Properties, '$.ExecutionClass') as execution_class,
              JSON_EXTRACT(Properties, '$.LogUri') as log_uri,
              JSON_EXTRACT(Properties, '$.Command') as command,
              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,
              JSON_EXTRACT(Properties, '$.ExecutionProperty') as execution_property,
              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as security_configuration,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as number_of_workers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(Properties, '$.NonOverridableArguments') as non_overridable_arguments
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Job'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Connections') as connections,
                json_extract_path_text(Properties, 'MaxRetries') as max_retries,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Timeout') as timeout,
                json_extract_path_text(Properties, 'AllocatedCapacity') as allocated_capacity,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Role') as role,
                json_extract_path_text(Properties, 'DefaultArguments') as default_arguments,
                json_extract_path_text(Properties, 'NotificationProperty') as notification_property,
                json_extract_path_text(Properties, 'WorkerType') as worker_type,
                json_extract_path_text(Properties, 'ExecutionClass') as execution_class,
                json_extract_path_text(Properties, 'LogUri') as log_uri,
                json_extract_path_text(Properties, 'Command') as command,
                json_extract_path_text(Properties, 'GlueVersion') as glue_version,
                json_extract_path_text(Properties, 'ExecutionProperty') as execution_property,
                json_extract_path_text(Properties, 'SecurityConfiguration') as security_configuration,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'NumberOfWorkers') as number_of_workers,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'MaxCapacity') as max_capacity,
                json_extract_path_text(Properties, 'NonOverridableArguments') as non_overridable_arguments
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Job'
    ml_transforms:
      name: ml_transforms
      id: aws.glue.ml_transforms
      x-cfn-schema-name: MLTransform
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::MLTransform'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::MLTransform'
    ml_transform:
      name: ml_transform
      id: aws.glue.ml_transform
      x-cfn-schema-name: MLTransform
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TransformEncryption') as transform_encryption,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,
              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,
              JSON_EXTRACT(Properties, '$.TransformParameters') as transform_parameters,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InputRecordTables') as input_record_tables,
              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as number_of_workers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::MLTransform'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MaxRetries') as max_retries,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'TransformEncryption') as transform_encryption,
                json_extract_path_text(Properties, 'Timeout') as timeout,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Role') as role,
                json_extract_path_text(Properties, 'WorkerType') as worker_type,
                json_extract_path_text(Properties, 'GlueVersion') as glue_version,
                json_extract_path_text(Properties, 'TransformParameters') as transform_parameters,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'InputRecordTables') as input_record_tables,
                json_extract_path_text(Properties, 'NumberOfWorkers') as number_of_workers,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'MaxCapacity') as max_capacity
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::MLTransform'
    partitions:
      name: partitions
      id: aws.glue.partitions
      x-cfn-schema-name: Partition
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Partition'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Partition'
    partition:
      name: partition
      id: aws.glue.partition
      x-cfn-schema-name: Partition
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.PartitionInput') as partition_input
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Partition'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                json_extract_path_text(Properties, 'PartitionInput') as partition_input
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Partition'
    schema_versions:
      name: schema_versions
      id: aws.glue.schema_versions
      x-cfn-schema-name: SchemaVersion
      x-type: list
      x-identifiers:
        - VersionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VersionId') as version_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VersionId') as version_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
    schema_version:
      name: schema_version
      id: aws.glue.schema_version
      x-cfn-schema-name: SchemaVersion
      x-type: get
      x-identifiers:
        - VersionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Schema') as schema,
              JSON_EXTRACT(Properties, '$.SchemaDefinition') as schema_definition,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Schema') as schema,
                json_extract_path_text(Properties, 'SchemaDefinition') as schema_definition,
                json_extract_path_text(Properties, 'VersionId') as version_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
    schema_version_metadata:
      name: schema_version_metadata
      id: aws.glue.schema_version_metadata
      x-cfn-schema-name: SchemaVersionMetadata
      x-type: get
      x-identifiers:
        - SchemaVersionId
        - Key
        - Value
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SchemaVersionId') as schema_version_id,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SchemaVersionId') as schema_version_id,
                json_extract_path_text(Properties, 'Key') as key,
                json_extract_path_text(Properties, 'Value') as value
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
    security_configurations:
      name: security_configurations
      id: aws.glue.security_configurations
      x-cfn-schema-name: SecurityConfiguration
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SecurityConfiguration'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SecurityConfiguration'
    security_configuration:
      name: security_configuration
      id: aws.glue.security_configuration
      x-cfn-schema-name: SecurityConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SecurityConfiguration'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SecurityConfiguration'
    tables:
      name: tables
      id: aws.glue.tables
      x-cfn-schema-name: Table
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Table'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Table'
    table:
      name: table
      id: aws.glue.table
      x-cfn-schema-name: Table
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableInput') as table_input,
              JSON_EXTRACT(Properties, '$.OpenTableFormatInput') as open_table_format_input,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Table'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableInput') as table_input,
                json_extract_path_text(Properties, 'OpenTableFormatInput') as open_table_format_input,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Table'
    table_optimizers:
      name: table_optimizers
      id: aws.glue.table_optimizers
      x-cfn-schema-name: TableOptimizer
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::TableOptimizer'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::TableOptimizer'
    table_optimizer:
      name: table_optimizer
      id: aws.glue.table_optimizer
      x-cfn-schema-name: TableOptimizer
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.TableOptimizerConfiguration') as table_optimizer_configuration,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::TableOptimizer'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'TableOptimizerConfiguration') as table_optimizer_configuration,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::TableOptimizer'
    triggers:
      name: triggers
      id: aws.glue.triggers
      x-cfn-schema-name: Trigger
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Trigger'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Trigger'
    trigger:
      name: trigger
      id: aws.glue.trigger
      x-cfn-schema-name: Trigger
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.StartOnCreation') as start_on_creation,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.EventBatchingCondition') as event_batching_condition,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Predicate') as predicate
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Trigger'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'StartOnCreation') as start_on_creation,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Actions') as actions,
                json_extract_path_text(Properties, 'EventBatchingCondition') as event_batching_condition,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(Properties, 'Schedule') as schedule,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Predicate') as predicate
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Trigger'
    workflows:
      name: workflows
      id: aws.glue.workflows
      x-cfn-schema-name: Workflow
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Workflow'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Workflow'
    workflow:
      name: workflow
      id: aws.glue.workflow
      x-cfn-schema-name: Workflow
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.DefaultRunProperties') as default_run_properties,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.MaxConcurrentRuns') as max_concurrent_runs
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Workflow'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'DefaultRunProperties') as default_run_properties,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'MaxConcurrentRuns') as max_concurrent_runs
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Workflow'
