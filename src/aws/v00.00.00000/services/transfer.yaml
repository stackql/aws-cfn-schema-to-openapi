openapi: 3.0.0
info:
  title: Transfer
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: Creates a key-value pair for a specific resource.
      type: object
      properties:
        Key:
          type: string
          description: The name assigned to the tag that you create.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: Contains one or more values that you assigned to the key name you create.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Agreement:
      type: object
      properties:
        Description:
          description: A textual description for the agreement.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 1
          maxLength: 200
        ServerId:
          description: A unique identifier for the server.
          type: string
          pattern: ^s-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LocalProfileId:
          description: A unique identifier for the local profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        PartnerProfileId:
          description: A unique identifier for the partner profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        BaseDirectory:
          description: Specifies the base directory for the agreement.
          type: string
          pattern: ^$|/.*
          maxLength: 1024
        AccessRole:
          description: Specifies the access role for the agreement.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        Status:
          description: Specifies the status of the agreement.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        Tags:
          description: Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AgreementId:
          description: A unique identifier for the agreement.
          type: string
          pattern: ^a-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      x-stackql-resource-name: agreement
      x-stackql-primaryIdentifier:
        - AgreementId
        - ServerId
      x-create-only-properties:
        - ServerId
      x-read-only-properties:
        - AgreementId
        - Arn
      x-required-permissions:
        create:
          - transfer:CreateAgreement
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeAgreement
        update:
          - transfer:UpdateAgreement
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteAgreement
        list:
          - transfer:ListAgreements
    Certificate:
      type: object
      properties:
        Usage:
          description: Specifies the usage type for the certificate.
          type: string
          enum:
            - SIGNING
            - ENCRYPTION
        Certificate:
          description: Specifies the certificate body to be imported.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 16384
        CertificateChain:
          description: Specifies the certificate chain to be imported.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 2097152
        PrivateKey:
          description: Specifies the private key for the certificate.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 16384
        ActiveDate:
          description: Specifies the active date for the certificate.
          type: string
        InactiveDate:
          description: Specifies the inactive date for the certificate.
          type: string
        Description:
          description: A textual description for the certificate.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 1
          maxLength: 200
        Tags:
          description: Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        CertificateId:
          description: A unique identifier for the certificate.
          type: string
          pattern: ^cert-([0-9a-f]{17})$
          minLength: 22
          maxLength: 22
        Status:
          description: A status description for the certificate.
          type: string
          enum:
            - ACTIVE
            - PENDING
            - INACTIVE
        Type:
          description: Describing the type of certificate. With or without a private key.
          type: string
          enum:
            - CERTIFICATE
            - CERTIFICATE_WITH_PRIVATE_KEY
        Serial:
          description: Specifies Certificate's serial.
          type: string
          pattern: ^[\p{XDigit}{2}:?]*
          minLength: 0
          maxLength: 48
        NotBeforeDate:
          description: Specifies the not before date for the certificate.
          type: string
        NotAfterDate:
          description: Specifies the not after date for the certificate.
          type: string
      required:
        - Certificate
        - Usage
      x-stackql-resource-name: certificate
      x-stackql-primaryIdentifier:
        - CertificateId
      x-create-only-properties:
        - Certificate
        - CertificateChain
        - PrivateKey
      x-read-only-properties:
        - Arn
        - CertificateId
        - Status
        - Type
        - Serial
        - NotAfterDate
        - NotBeforeDate
      x-required-permissions:
        create:
          - transfer:ImportCertificate
          - transfer:TagResource
        read:
          - transfer:DescribeCertificate
        update:
          - transfer:UpdateCertificate
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteCertificate
        list:
          - transfer:ListCertificates
    SftpConnectorTrustedHostKey:
      description: The public host key for the external server to which you are connecting.
      type: string
      minLength: 1
      maxLength: 2048
    Connector:
      type: object
      properties:
        AccessRole:
          description: Specifies the access role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        As2Config:
          description: Configuration for an AS2 connector.
          type: object
          properties:
            LocalProfileId:
              type: string
              description: A unique identifier for the local profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            PartnerProfileId:
              type: string
              description: A unique identifier for the partner profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            MessageSubject:
              type: string
              description: The message subject for this AS2 connector configuration.
              pattern: ^[\p{Print}\p{Blank}]+
              minLength: 1
              maxLength: 1024
            Compression:
              type: string
              description: Compression setting for this AS2 connector configuration.
              enum:
                - ZLIB
                - DISABLED
            EncryptionAlgorithm:
              type: string
              description: Encryption algorithm for this AS2 connector configuration.
              enum:
                - AES128_CBC
                - AES192_CBC
                - AES256_CBC
                - NONE
            SigningAlgorithm:
              type: string
              description: Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
            MdnSigningAlgorithm:
              type: string
              description: MDN Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
                - DEFAULT
            MdnResponse:
              type: string
              description: MDN Response setting for this AS2 connector configuration.
              enum:
                - SYNC
                - NONE
            BasicAuthSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
              minLength: 0
              maxLength: 2048
          additionalProperties: false
        SftpConfig:
          description: Configuration for an SFTP connector.
          type: object
          properties:
            UserSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
              minLength: 1
              maxLength: 2048
            TrustedHostKeys:
              description: List of public host keys, for the external server to which you are connecting.
              type: array
              maxItems: 10
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
          additionalProperties: false
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the connector.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ConnectorId:
          description: A unique identifier for the connector.
          type: string
          pattern: ^c-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LoggingRole:
          description: Specifies the logging role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        Tags:
          description: Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Url:
          description: URL for Connector
          type: string
          maxLength: 255
      required:
        - AccessRole
        - Url
      x-stackql-resource-name: connector
      x-stackql-primaryIdentifier:
        - ConnectorId
      x-read-only-properties:
        - Arn
        - ConnectorId
      x-required-permissions:
        create:
          - transfer:CreateConnector
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeConnector
        update:
          - transfer:UpdateConnector
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteConnector
        list:
          - transfer:ListConnectors
    CertificateId:
      description: A unique identifier for the certificate.
      type: string
      pattern: ^cert-([0-9a-f]{17})$
      minLength: 22
      maxLength: 22
    Profile:
      type: object
      properties:
        As2Id:
          description: AS2 identifier agreed with a trading partner.
          type: string
          minLength: 1
          maxLength: 128
        ProfileType:
          description: Enum specifying whether the profile is local or associated with a trading partner.
          type: string
          enum:
            - LOCAL
            - PARTNER
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          maxItems: 50
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CertificateIds:
          description: List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CertificateId'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the profile.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ProfileId:
          description: A unique identifier for the profile
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
      required:
        - As2Id
        - ProfileType
      x-stackql-resource-name: profile
      x-stackql-primaryIdentifier:
        - ProfileId
      x-create-only-properties:
        - ProfileType
      x-read-only-properties:
        - Arn
        - ProfileId
      x-required-permissions:
        create:
          - transfer:CreateProfile
          - transfer:TagResource
        read:
          - transfer:DescribeProfile
        update:
          - transfer:UpdateProfile
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteProfile
        list:
          - transfer:ListProfiles
    StructuredLogDestination:
      type: object
      additionalProperties: false
    IdentityProviderDetails:
      type: object
      additionalProperties: false
      properties:
        Function:
          type: string
        DirectoryId:
          type: string
        Url:
          type: string
        InvocationRole:
          type: string
        SftpAuthenticationMethods:
          type: string
    ProtocolDetails:
      type: object
      additionalProperties: false
      properties:
        As2Transports:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/As2Transport'
        PassiveIp:
          type: string
        SetStatOption:
          type: string
        TlsSessionResumptionMode:
          type: string
    S3StorageOptions:
      type: object
      additionalProperties: false
      properties:
        DirectoryListingOptimization:
          type: string
    WorkflowDetails:
      type: object
      additionalProperties: false
      properties:
        OnUpload:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/WorkflowDetail'
        OnPartialUpload:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/WorkflowDetail'
    WorkflowDetail:
      type: object
      additionalProperties: false
      properties:
        WorkflowId:
          type: string
        ExecutionRole:
          type: string
      required:
        - WorkflowId
        - ExecutionRole
    Protocol:
      type: object
      additionalProperties: false
    EndpointDetails:
      type: object
      additionalProperties: false
      properties:
        AddressAllocationIds:
          type: array
          uniqueItems: false
          items:
            type: string
        VpcId:
          type: string
        VpcEndpointId:
          type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
    As2Transport:
      type: object
      additionalProperties: false
    Server:
      type: object
      properties:
        LoggingRole:
          type: string
        Protocols:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Protocol'
        IdentityProviderDetails:
          $ref: '#/components/schemas/IdentityProviderDetails'
        EndpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        StructuredLogDestinations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/StructuredLogDestination'
        PreAuthenticationLoginBanner:
          type: string
        ServerId:
          type: string
        PostAuthenticationLoginBanner:
          type: string
        EndpointType:
          type: string
        SecurityPolicyName:
          type: string
        ProtocolDetails:
          $ref: '#/components/schemas/ProtocolDetails'
        S3StorageOptions:
          $ref: '#/components/schemas/S3StorageOptions'
        WorkflowDetails:
          $ref: '#/components/schemas/WorkflowDetails'
        Arn:
          type: string
        Domain:
          type: string
        IdentityProviderType:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Certificate:
          type: string
      x-stackql-resource-name: server
      x-stackql-primaryIdentifier:
        - ServerId
      x-create-only-properties:
        - IdentityProviderType
        - Domain
      x-read-only-properties:
        - ServerId
        - Arn
    SshPublicKey:
      type: object
      additionalProperties: false
    PosixProfile:
      type: object
      additionalProperties: false
      properties:
        Uid:
          type: number
        SecondaryGids:
          type: array
          uniqueItems: false
          items:
            type: number
        Gid:
          type: number
      required:
        - Uid
        - Gid
    HomeDirectoryMapEntry:
      type: object
      additionalProperties: false
      properties:
        Entry:
          type: string
        Target:
          type: string
        Type:
          type: string
      required:
        - Entry
        - Target
    User:
      type: object
      properties:
        Policy:
          type: string
        Role:
          type: string
        HomeDirectory:
          type: string
        HomeDirectoryType:
          type: string
        ServerId:
          type: string
        UserName:
          type: string
        HomeDirectoryMappings:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/HomeDirectoryMapEntry'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        SshPublicKeys:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/SshPublicKey'
        Id:
          type: string
        Arn:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Role
        - ServerId
        - UserName
      x-stackql-resource-name: user
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - ServerId
        - UserName
      x-read-only-properties:
        - Id
        - Arn
    S3Tag:
      description: Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
      type: object
      properties:
        Key:
          description: The name assigned to the tag that you create.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value that corresponds to the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    EfsInputFileLocation:
      description: Specifies the details for an EFS file.
      type: object
      properties:
        FileSystemId:
          description: Specifies the EFS filesystem that contains the file.
          type: string
          pattern: ^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$
          minLength: 0
          maxLength: 128
        Path:
          description: The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
          type: string
          pattern: ^[^\x00]+$
          minLength: 1
          maxLength: 65536
      additionalProperties: false
    S3InputFileLocation:
      description: Specifies the details for a S3 file.
      type: object
      properties:
        Bucket:
          description: Specifies the S3 bucket that contains the file.
          type: string
          pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
          minLength: 3
          maxLength: 63
        Key:
          description: The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
          type: string
          pattern: .*
          minLength: 0
          maxLength: 1024
      additionalProperties: false
    InputFileLocation:
      description: Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
        EfsFileLocation:
          $ref: '#/components/schemas/EfsInputFileLocation'
      additionalProperties: false
    S3FileLocation:
      description: Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
      additionalProperties: false
    WorkflowStep:
      description: The basic building block of a workflow.
      type: object
      properties:
        CopyStepDetails:
          description: Details for a step that performs a file copy.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/S3FileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        CustomStepDetails:
          description: Details for a step that invokes a lambda function.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Target:
              description: The ARN for the lambda function that is being called.
              type: string
              pattern: arn:[a-z-]+:lambda:.*$
              minLength: 0
              maxLength: 170
            TimeoutSeconds:
              description: Timeout, in seconds, for the step.
              type: integer
              minimum: 1
              maximum: 1800
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        DecryptStepDetails:
          description: Details for a step that performs a file decryption.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/InputFileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Type:
              description: Specifies which encryption method to use.
              type: string
              enum:
                - PGP
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        DeleteStepDetails:
          description: Details for a step that deletes the file.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        TagStepDetails:
          description: Details for a step that creates one or more tags.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Tags:
              description: Array that contains from 1 to 10 key/value pairs.
              type: array
              maxItems: 10
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/S3Tag'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        Type:
          type: string
          enum:
            - COPY
            - CUSTOM
            - DECRYPT
            - DELETE
            - TAG
      additionalProperties: false
    Workflow:
      type: object
      properties:
        OnExceptionSteps:
          description: Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Steps:
          description: Specifies the details for the steps that are in the specified workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Tags:
          description: Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Description:
          description: A textual description for the workflow.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 0
          maxLength: 256
        WorkflowId:
          description: A unique identifier for the workflow.
          type: string
          pattern: ^w-([a-z0-9]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the workflow.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - Steps
      x-stackql-resource-name: workflow
      x-stackql-primaryIdentifier:
        - WorkflowId
      x-create-only-properties:
        - Steps
        - OnExceptionSteps
        - Description
      x-read-only-properties:
        - WorkflowId
        - Arn
      x-required-permissions:
        create:
          - transfer:CreateWorkflow
          - transfer:TagResource
        read:
          - transfer:DescribeWorkflow
        delete:
          - transfer:DeleteWorkflow
        list:
          - transfer:ListWorkflows
        update:
          - transfer:UnTagResource
          - transfer:TagResource
  x-stackQL-resources:
    agreements:
      name: agreements
      id: aws.transfer.agreements
      x-cfn-schema-name: Agreement
      x-type: list
      x-identifiers:
        - AgreementId
        - ServerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.ServerId') as server_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(Properties, 'ServerId') as server_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
    agreement:
      name: agreement
      id: aws.transfer.agreement
      x-cfn-schema-name: Agreement
      x-type: get
      x-identifiers:
        - AgreementId
        - ServerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.LocalProfileId') as local_profile_id,
              JSON_EXTRACT(Properties, '$.PartnerProfileId') as partner_profile_id,
              JSON_EXTRACT(Properties, '$.BaseDirectory') as base_directory,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ServerId') as server_id,
                json_extract_path_text(Properties, 'LocalProfileId') as local_profile_id,
                json_extract_path_text(Properties, 'PartnerProfileId') as partner_profile_id,
                json_extract_path_text(Properties, 'BaseDirectory') as base_directory,
                json_extract_path_text(Properties, 'AccessRole') as access_role,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
    certificates:
      name: certificates
      id: aws.transfer.certificates
      x-cfn-schema-name: Certificate
      x-type: list
      x-identifiers:
        - CertificateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateId') as certificate_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
    certificate:
      name: certificate
      id: aws.transfer.certificate
      x-cfn-schema-name: Certificate
      x-type: get
      x-identifiers:
        - CertificateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Usage') as usage,
              JSON_EXTRACT(Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(Properties, '$.ActiveDate') as active_date,
              JSON_EXTRACT(Properties, '$.InactiveDate') as inactive_date,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Serial') as serial,
              JSON_EXTRACT(Properties, '$.NotBeforeDate') as not_before_date,
              JSON_EXTRACT(Properties, '$.NotAfterDate') as not_after_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Usage') as usage,
                json_extract_path_text(Properties, 'Certificate') as certificate,
                json_extract_path_text(Properties, 'CertificateChain') as certificate_chain,
                json_extract_path_text(Properties, 'PrivateKey') as private_key,
                json_extract_path_text(Properties, 'ActiveDate') as active_date,
                json_extract_path_text(Properties, 'InactiveDate') as inactive_date,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CertificateId') as certificate_id,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Serial') as serial,
                json_extract_path_text(Properties, 'NotBeforeDate') as not_before_date,
                json_extract_path_text(Properties, 'NotAfterDate') as not_after_date
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
    connectors:
      name: connectors
      id: aws.transfer.connectors
      x-cfn-schema-name: Connector
      x-type: list
      x-identifiers:
        - ConnectorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectorId') as connector_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
    connector:
      name: connector
      id: aws.transfer.connector
      x-cfn-schema-name: Connector
      x-type: get
      x-identifiers:
        - ConnectorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.As2Config') as as2_config,
              JSON_EXTRACT(Properties, '$.SftpConfig') as sftp_config,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_id,
              JSON_EXTRACT(Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Url') as url
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessRole') as access_role,
                json_extract_path_text(Properties, 'As2Config') as as2_config,
                json_extract_path_text(Properties, 'SftpConfig') as sftp_config,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ConnectorId') as connector_id,
                json_extract_path_text(Properties, 'LoggingRole') as logging_role,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Url') as url
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
    profiles:
      name: profiles
      id: aws.transfer.profiles
      x-cfn-schema-name: Profile
      x-type: list
      x-identifiers:
        - ProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProfileId') as profile_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
    profile:
      name: profile
      id: aws.transfer.profile
      x-cfn-schema-name: Profile
      x-type: get
      x-identifiers:
        - ProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.As2Id') as as2_id,
              JSON_EXTRACT(Properties, '$.ProfileType') as profile_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CertificateIds') as certificate_ids,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'As2Id') as as2_id,
                json_extract_path_text(Properties, 'ProfileType') as profile_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'CertificateIds') as certificate_ids,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
    servers:
      name: servers
      id: aws.transfer.servers
      x-cfn-schema-name: Server
      x-type: list
      x-identifiers:
        - ServerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerId') as server_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Server'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerId') as server_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Server'
    server:
      name: server
      id: aws.transfer.server
      x-cfn-schema-name: Server
      x-type: get
      x-identifiers:
        - ServerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(Properties, '$.Protocols') as protocols,
              JSON_EXTRACT(Properties, '$.IdentityProviderDetails') as identity_provider_details,
              JSON_EXTRACT(Properties, '$.EndpointDetails') as endpoint_details,
              JSON_EXTRACT(Properties, '$.StructuredLogDestinations') as structured_log_destinations,
              JSON_EXTRACT(Properties, '$.PreAuthenticationLoginBanner') as pre_authentication_login_banner,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.PostAuthenticationLoginBanner') as post_authentication_login_banner,
              JSON_EXTRACT(Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(Properties, '$.SecurityPolicyName') as security_policy_name,
              JSON_EXTRACT(Properties, '$.ProtocolDetails') as protocol_details,
              JSON_EXTRACT(Properties, '$.S3StorageOptions') as s3_storage_options,
              JSON_EXTRACT(Properties, '$.WorkflowDetails') as workflow_details,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.IdentityProviderType') as identity_provider_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Certificate') as certificate
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Server'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LoggingRole') as logging_role,
                json_extract_path_text(Properties, 'Protocols') as protocols,
                json_extract_path_text(Properties, 'IdentityProviderDetails') as identity_provider_details,
                json_extract_path_text(Properties, 'EndpointDetails') as endpoint_details,
                json_extract_path_text(Properties, 'StructuredLogDestinations') as structured_log_destinations,
                json_extract_path_text(Properties, 'PreAuthenticationLoginBanner') as pre_authentication_login_banner,
                json_extract_path_text(Properties, 'ServerId') as server_id,
                json_extract_path_text(Properties, 'PostAuthenticationLoginBanner') as post_authentication_login_banner,
                json_extract_path_text(Properties, 'EndpointType') as endpoint_type,
                json_extract_path_text(Properties, 'SecurityPolicyName') as security_policy_name,
                json_extract_path_text(Properties, 'ProtocolDetails') as protocol_details,
                json_extract_path_text(Properties, 'S3StorageOptions') as s3_storage_options,
                json_extract_path_text(Properties, 'WorkflowDetails') as workflow_details,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Domain') as domain,
                json_extract_path_text(Properties, 'IdentityProviderType') as identity_provider_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Certificate') as certificate
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Server'
    users:
      name: users
      id: aws.transfer.users
      x-cfn-schema-name: User
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::User'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::User'
    user:
      name: user
      id: aws.transfer.user
      x-cfn-schema-name: User
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.HomeDirectory') as home_directory,
              JSON_EXTRACT(Properties, '$.HomeDirectoryType') as home_directory_type,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.HomeDirectoryMappings') as home_directory_mappings,
              JSON_EXTRACT(Properties, '$.PosixProfile') as posix_profile,
              JSON_EXTRACT(Properties, '$.SshPublicKeys') as ssh_public_keys,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::User'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Policy') as policy,
                json_extract_path_text(Properties, 'Role') as role,
                json_extract_path_text(Properties, 'HomeDirectory') as home_directory,
                json_extract_path_text(Properties, 'HomeDirectoryType') as home_directory_type,
                json_extract_path_text(Properties, 'ServerId') as server_id,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'HomeDirectoryMappings') as home_directory_mappings,
                json_extract_path_text(Properties, 'PosixProfile') as posix_profile,
                json_extract_path_text(Properties, 'SshPublicKeys') as ssh_public_keys,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::User'
    workflows:
      name: workflows
      id: aws.transfer.workflows
      x-cfn-schema-name: Workflow
      x-type: list
      x-identifiers:
        - WorkflowId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowId') as workflow_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
    workflow:
      name: workflow
      id: aws.transfer.workflow
      x-cfn-schema-name: Workflow
      x-type: get
      x-identifiers:
        - WorkflowId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OnExceptionSteps') as on_exception_steps,
              JSON_EXTRACT(Properties, '$.Steps') as steps,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OnExceptionSteps') as on_exception_steps,
                json_extract_path_text(Properties, 'Steps') as steps,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'WorkflowId') as workflow_id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
