openapi: 3.0.0
info:
  title: FSx
  version: 1.0.0
paths: {}
components:
  schemas:
    EventType:
      type: string
      enum:
        - NEW
        - CHANGED
        - DELETED
    EventTypes:
      type: array
      x-insertionOrder: false
      uniqueItems: true
      items:
        $ref: '#/components/schemas/EventType'
      maxItems: 3
    AutoImportPolicy:
      description: |-
        Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
      type: object
      additionalProperties: false
      properties:
        Events:
          $ref: '#/components/schemas/EventTypes'
          description: |-
            The ``AutoImportPolicy`` can have the following event values:
              +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
              +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
              +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
              
             You can define any combination of event types for your ``AutoImportPolicy``.
      required:
        - Events
    AutoExportPolicy:
      description: |-
        Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
      type: object
      additionalProperties: false
      properties:
        Events:
          $ref: '#/components/schemas/EventTypes'
          description: |-
            The ``AutoExportPolicy`` can have the following event values:
              +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
              +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
              +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
              
             You can define any combination of event types for your ``AutoExportPolicy``.
      required:
        - Events
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    S3:
      description: The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
      type: object
      additionalProperties: false
      properties:
        AutoImportPolicy:
          $ref: '#/components/schemas/AutoImportPolicy'
          description: |-
            Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
             The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        AutoExportPolicy:
          $ref: '#/components/schemas/AutoExportPolicy'
          description: |-
            Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
             The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
    DataRepositoryAssociation:
      type: object
      properties:
        AssociationId:
          type: string
          description: ''
        ResourceARN:
          type: string
          description: ''
        FileSystemId:
          type: string
          description: The ID of the file system on which the data repository association is configured.
        FileSystemPath:
          type: string
          description: >-
            A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as ``/ns1/``) or subdirectory (such as ``/ns1/subdir/``) that will be mapped 1-1 with ``DataRepositoryPath``. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path ``/ns1/``, then you cannot link another data repository with file system path
            ``/ns1/ns2``.
             This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
              If you specify only a forward slash (``/``) as the file system path, you can link only one data repository to the file system. You can only specify "/" as the file system path for the first data repository associated with a file system.
        DataRepositoryPath:
          type: string
          description: The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format ``s3://myBucket/myPrefix/``. This path specifies where in the S3 data repository files will be imported from or exported to.
        BatchImportMetaDataOnCreate:
          type: boolean
          description: A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to ``true``.
        ImportedFileChunkSize:
          type: integer
          description: |-
            For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system or cache.
             The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        S3:
          description: The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
          $ref: '#/components/schemas/S3'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: |-
            An array of key-value pairs to apply to this resource.
             For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
      required:
        - FileSystemId
        - FileSystemPath
        - DataRepositoryPath
      x-stackql-resource-name: data_repository_association
      x-stackql-primaryIdentifier:
        - AssociationId
      x-create-only-properties:
        - FileSystemId
        - FileSystemPath
        - DataRepositoryPath
        - BatchImportMetaDataOnCreate
      x-read-only-properties:
        - AssociationId
        - ResourceARN
      x-required-permissions:
        create:
          - fsx:CreateDataRepositoryAssociation
          - fsx:DescribeDataRepositoryAssociations
          - fsx:TagResource
          - s3:ListBucket
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - iam:CreateServiceLinkedRole
          - iam:PutRolePolicy
        read:
          - fsx:DescribeDataRepositoryAssociations
        update:
          - fsx:DescribeDataRepositoryAssociations
          - fsx:UpdateDataRepositoryAssociation
          - fsx:TagResource
          - fsx:UntagResource
          - s3:ListBucket
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - iam:CreateServiceLinkedRole
          - iam:PutRolePolicy
        delete:
          - fsx:DescribeDataRepositoryAssociations
          - fsx:DeleteDataRepositoryAssociation
        list:
          - fsx:DescribeDataRepositoryAssociations
    OpenZFSConfiguration:
      type: object
      additionalProperties: false
      properties:
        ReadOnly:
          type: boolean
        Options:
          type: array
          uniqueItems: false
          items:
            type: string
        DataCompressionType:
          type: string
        NfsExports:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/NfsExports'
        StorageCapacityQuotaGiB:
          type: integer
        CopyTagsToSnapshots:
          type: boolean
        ParentVolumeId:
          type: string
        StorageCapacityReservationGiB:
          type: integer
        RecordSizeKiB:
          type: integer
        OriginSnapshot:
          $ref: '#/components/schemas/OriginSnapshot'
        UserAndGroupQuotas:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/UserAndGroupQuotas'
      required:
        - ParentVolumeId
    SelfManagedActiveDirectoryConfiguration:
      type: object
      additionalProperties: false
      properties:
        FileSystemAdministratorsGroup:
          type: string
        UserName:
          type: string
        DomainName:
          type: string
        OrganizationalUnitDistinguishedName:
          type: string
        DnsIps:
          type: array
          uniqueItems: false
          items:
            type: string
        Password:
          type: string
    AuditLogConfiguration:
      type: object
      additionalProperties: false
      properties:
        FileAccessAuditLogLevel:
          type: string
        FileShareAccessAuditLogLevel:
          type: string
        AuditLogDestination:
          type: string
      required:
        - FileAccessAuditLogLevel
        - FileShareAccessAuditLogLevel
    DiskIopsConfiguration:
      type: object
      additionalProperties: false
      properties:
        Mode:
          type: string
        Iops:
          type: integer
    LustreConfiguration:
      type: object
      additionalProperties: false
      properties:
        DriveCacheType:
          type: string
        AutoImportPolicy:
          type: string
        ImportedFileChunkSize:
          type: integer
        DeploymentType:
          type: string
        DataCompressionType:
          type: string
        ImportPath:
          type: string
        WeeklyMaintenanceStartTime:
          type: string
        DailyAutomaticBackupStartTime:
          type: string
        CopyTagsToBackups:
          type: boolean
        ExportPath:
          type: string
        PerUnitStorageThroughput:
          type: integer
        AutomaticBackupRetentionDays:
          type: integer
    NfsExports:
      type: object
      additionalProperties: false
      properties:
        ClientConfigurations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ClientConfigurations'
      required:
        - ClientConfigurations
    OntapConfiguration:
      type: object
      additionalProperties: false
      properties:
        JunctionPath:
          type: string
        StorageVirtualMachineId:
          type: string
        TieringPolicy:
          $ref: '#/components/schemas/TieringPolicy'
        SizeInMegabytes:
          type: string
        VolumeStyle:
          type: string
        SizeInBytes:
          type: string
        SecurityStyle:
          type: string
        SnaplockConfiguration:
          $ref: '#/components/schemas/SnaplockConfiguration'
        AggregateConfiguration:
          $ref: '#/components/schemas/AggregateConfiguration'
        SnapshotPolicy:
          type: string
        StorageEfficiencyEnabled:
          type: string
        CopyTagsToBackups:
          type: string
        OntapVolumeType:
          type: string
      required:
        - StorageVirtualMachineId
    ClientConfigurations:
      type: object
      additionalProperties: false
      properties:
        Clients:
          type: string
        Options:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - Options
        - Clients
    RootVolumeConfiguration:
      type: object
      additionalProperties: false
      properties:
        ReadOnly:
          type: boolean
        DataCompressionType:
          type: string
        NfsExports:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/NfsExports'
        CopyTagsToSnapshots:
          type: boolean
        RecordSizeKiB:
          type: integer
        UserAndGroupQuotas:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/UserAndGroupQuotas'
    WindowsConfiguration:
      type: object
      additionalProperties: false
      properties:
        SelfManagedActiveDirectoryConfiguration:
          $ref: '#/components/schemas/SelfManagedActiveDirectoryConfiguration'
        AuditLogConfiguration:
          $ref: '#/components/schemas/AuditLogConfiguration'
        ActiveDirectoryId:
          type: string
        DeploymentType:
          type: string
        Aliases:
          type: array
          uniqueItems: false
          items:
            type: string
        ThroughputCapacity:
          type: integer
        WeeklyMaintenanceStartTime:
          type: string
        DiskIopsConfiguration:
          $ref: '#/components/schemas/DiskIopsConfiguration'
        CopyTagsToBackups:
          type: boolean
        DailyAutomaticBackupStartTime:
          type: string
        AutomaticBackupRetentionDays:
          type: integer
        PreferredSubnetId:
          type: string
      required:
        - ThroughputCapacity
    UserAndGroupQuotas:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        Id:
          type: integer
        StorageCapacityQuotaGiB:
          type: integer
      required:
        - Type
        - Id
        - StorageCapacityQuotaGiB
    FileSystem:
      type: object
      properties:
        StorageType:
          type: string
        KmsKeyId:
          type: string
        StorageCapacity:
          type: integer
        RootVolumeId:
          type: string
        LustreConfiguration:
          $ref: '#/components/schemas/LustreConfiguration'
        BackupId:
          type: string
        OntapConfiguration:
          $ref: '#/components/schemas/OntapConfiguration'
        DNSName:
          type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        WindowsConfiguration:
          $ref: '#/components/schemas/WindowsConfiguration'
        FileSystemTypeVersion:
          type: string
        OpenZFSConfiguration:
          $ref: '#/components/schemas/OpenZFSConfiguration'
        ResourceARN:
          type: string
        FileSystemType:
          type: string
        Id:
          type: string
        LustreMountName:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - FileSystemType
        - SubnetIds
      x-stackql-resource-name: file_system
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - KmsKeyId
        - SecurityGroupIds
        - FileSystemTypeVersion
        - FileSystemType
        - SubnetIds
        - BackupId
      x-read-only-properties:
        - ResourceARN
        - Id
        - LustreMountName
        - RootVolumeId
        - DNSName
    Snapshot:
      type: object
      properties:
        ResourceARN:
          type: string
        VolumeId:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - VolumeId
        - Name
      x-stackql-resource-name: snapshot
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - VolumeId
      x-read-only-properties:
        - ResourceARN
        - Id
    ActiveDirectoryConfiguration:
      type: object
      additionalProperties: false
      properties:
        SelfManagedActiveDirectoryConfiguration:
          $ref: '#/components/schemas/SelfManagedActiveDirectoryConfiguration'
        NetBiosName:
          type: string
    StorageVirtualMachine:
      type: object
      properties:
        ResourceARN:
          type: string
        SvmAdminPassword:
          type: string
        StorageVirtualMachineId:
          type: string
        ActiveDirectoryConfiguration:
          $ref: '#/components/schemas/ActiveDirectoryConfiguration'
        RootVolumeSecurityStyle:
          type: string
        FileSystemId:
          type: string
        UUID:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - FileSystemId
        - Name
      x-stackql-resource-name: storage_virtual_machine
      x-stackql-primaryIdentifier:
        - StorageVirtualMachineId
      x-create-only-properties:
        - Name
        - RootVolumeSecurityStyle
        - FileSystemId
      x-read-only-properties:
        - ResourceARN
        - UUID
        - StorageVirtualMachineId
    TieringPolicy:
      type: object
      additionalProperties: false
      properties:
        CoolingPeriod:
          type: integer
        Name:
          type: string
    SnaplockRetentionPeriod:
      type: object
      additionalProperties: false
      properties:
        MinimumRetention:
          $ref: '#/components/schemas/RetentionPeriod'
        DefaultRetention:
          $ref: '#/components/schemas/RetentionPeriod'
        MaximumRetention:
          $ref: '#/components/schemas/RetentionPeriod'
      required:
        - DefaultRetention
        - MaximumRetention
        - MinimumRetention
    RetentionPeriod:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: integer
        Type:
          type: string
      required:
        - Type
    SnaplockConfiguration:
      type: object
      additionalProperties: false
      properties:
        AuditLogVolume:
          type: string
        VolumeAppendModeEnabled:
          type: string
        AutocommitPeriod:
          $ref: '#/components/schemas/AutocommitPeriod'
        RetentionPeriod:
          $ref: '#/components/schemas/SnaplockRetentionPeriod'
        PrivilegedDelete:
          type: string
        SnaplockType:
          type: string
      required:
        - SnaplockType
    OriginSnapshot:
      type: object
      additionalProperties: false
      properties:
        SnapshotARN:
          type: string
        CopyStrategy:
          type: string
      required:
        - CopyStrategy
        - SnapshotARN
    AggregateConfiguration:
      type: object
      additionalProperties: false
      properties:
        Aggregates:
          type: array
          uniqueItems: false
          items:
            type: string
        ConstituentsPerAggregate:
          type: integer
    AutocommitPeriod:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: integer
        Type:
          type: string
      required:
        - Type
    Volume:
      type: object
      properties:
        OpenZFSConfiguration:
          $ref: '#/components/schemas/OpenZFSConfiguration'
        ResourceARN:
          type: string
        VolumeId:
          type: string
        VolumeType:
          type: string
        BackupId:
          type: string
        OntapConfiguration:
          $ref: '#/components/schemas/OntapConfiguration'
        UUID:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Name
      x-stackql-resource-name: volume
      x-stackql-primaryIdentifier:
        - VolumeId
      x-create-only-properties:
        - BackupId
        - VolumeType
      x-read-only-properties:
        - ResourceARN
        - VolumeId
        - UUID
  x-stackQL-resources:
    data_repository_associations:
      name: data_repository_associations
      id: aws.fsx.data_repository_associations
      x-cfn-schema-name: DataRepositoryAssociation
      x-type: list
      x-identifiers:
        - AssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::DataRepositoryAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationId') as association_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::DataRepositoryAssociation'
    data_repository_association:
      name: data_repository_association
      id: aws.fsx.data_repository_association
      x-cfn-schema-name: DataRepositoryAssociation
      x-type: get
      x-identifiers:
        - AssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.ResourceARN') as resource_ar_n,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,
              JSON_EXTRACT(Properties, '$.FileSystemPath') as file_system_path,
              JSON_EXTRACT(Properties, '$.DataRepositoryPath') as data_repository_path,
              JSON_EXTRACT(Properties, '$.BatchImportMetaDataOnCreate') as batch_import_meta_data_on_create,
              JSON_EXTRACT(Properties, '$.ImportedFileChunkSize') as imported_file_chunk_size,
              JSON_EXTRACT(Properties, '$.S3') as s3,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::DataRepositoryAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationId') as association_id,
                json_extract_path_text(Properties, 'ResourceARN') as resource_ar_n,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id,
                json_extract_path_text(Properties, 'FileSystemPath') as file_system_path,
                json_extract_path_text(Properties, 'DataRepositoryPath') as data_repository_path,
                json_extract_path_text(Properties, 'BatchImportMetaDataOnCreate') as batch_import_meta_data_on_create,
                json_extract_path_text(Properties, 'ImportedFileChunkSize') as imported_file_chunk_size,
                json_extract_path_text(Properties, 'S3') as s3,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::DataRepositoryAssociation'
    file_systems:
      name: file_systems
      id: aws.fsx.file_systems
      x-cfn-schema-name: FileSystem
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::FileSystem'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::FileSystem'
    file_system:
      name: file_system
      id: aws.fsx.file_system
      x-cfn-schema-name: FileSystem
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.StorageCapacity') as storage_capacity,
              JSON_EXTRACT(Properties, '$.RootVolumeId') as root_volume_id,
              JSON_EXTRACT(Properties, '$.LustreConfiguration') as lustre_configuration,
              JSON_EXTRACT(Properties, '$.BackupId') as backup_id,
              JSON_EXTRACT(Properties, '$.OntapConfiguration') as ontap_configuration,
              JSON_EXTRACT(Properties, '$.DNSName') as d_ns_name,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.WindowsConfiguration') as windows_configuration,
              JSON_EXTRACT(Properties, '$.FileSystemTypeVersion') as file_system_type_version,
              JSON_EXTRACT(Properties, '$.OpenZFSConfiguration') as open_zf_sconfiguration,
              JSON_EXTRACT(Properties, '$.ResourceARN') as resource_ar_n,
              JSON_EXTRACT(Properties, '$.FileSystemType') as file_system_type,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LustreMountName') as lustre_mount_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::FileSystem'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StorageType') as storage_type,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'StorageCapacity') as storage_capacity,
                json_extract_path_text(Properties, 'RootVolumeId') as root_volume_id,
                json_extract_path_text(Properties, 'LustreConfiguration') as lustre_configuration,
                json_extract_path_text(Properties, 'BackupId') as backup_id,
                json_extract_path_text(Properties, 'OntapConfiguration') as ontap_configuration,
                json_extract_path_text(Properties, 'DNSName') as d_ns_name,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'WindowsConfiguration') as windows_configuration,
                json_extract_path_text(Properties, 'FileSystemTypeVersion') as file_system_type_version,
                json_extract_path_text(Properties, 'OpenZFSConfiguration') as open_zf_sconfiguration,
                json_extract_path_text(Properties, 'ResourceARN') as resource_ar_n,
                json_extract_path_text(Properties, 'FileSystemType') as file_system_type,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'LustreMountName') as lustre_mount_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::FileSystem'
    snapshots:
      name: snapshots
      id: aws.fsx.snapshots
      x-cfn-schema-name: Snapshot
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::Snapshot'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::Snapshot'
    snapshot:
      name: snapshot
      id: aws.fsx.snapshot
      x-cfn-schema-name: Snapshot
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceARN') as resource_ar_n,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::Snapshot'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResourceARN') as resource_ar_n,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::Snapshot'
    storage_virtual_machines:
      name: storage_virtual_machines
      id: aws.fsx.storage_virtual_machines
      x-cfn-schema-name: StorageVirtualMachine
      x-type: list
      x-identifiers:
        - StorageVirtualMachineId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StorageVirtualMachineId') as storage_virtual_machine_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::StorageVirtualMachine'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StorageVirtualMachineId') as storage_virtual_machine_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::StorageVirtualMachine'
    storage_virtual_machine:
      name: storage_virtual_machine
      id: aws.fsx.storage_virtual_machine
      x-cfn-schema-name: StorageVirtualMachine
      x-type: get
      x-identifiers:
        - StorageVirtualMachineId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceARN') as resource_ar_n,
              JSON_EXTRACT(Properties, '$.SvmAdminPassword') as svm_admin_password,
              JSON_EXTRACT(Properties, '$.StorageVirtualMachineId') as storage_virtual_machine_id,
              JSON_EXTRACT(Properties, '$.ActiveDirectoryConfiguration') as active_directory_configuration,
              JSON_EXTRACT(Properties, '$.RootVolumeSecurityStyle') as root_volume_security_style,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,
              JSON_EXTRACT(Properties, '$.UUID') as u_ui_d,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::StorageVirtualMachine'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResourceARN') as resource_ar_n,
                json_extract_path_text(Properties, 'SvmAdminPassword') as svm_admin_password,
                json_extract_path_text(Properties, 'StorageVirtualMachineId') as storage_virtual_machine_id,
                json_extract_path_text(Properties, 'ActiveDirectoryConfiguration') as active_directory_configuration,
                json_extract_path_text(Properties, 'RootVolumeSecurityStyle') as root_volume_security_style,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id,
                json_extract_path_text(Properties, 'UUID') as u_ui_d,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::StorageVirtualMachine'
    volumes:
      name: volumes
      id: aws.fsx.volumes
      x-cfn-schema-name: Volume
      x-type: list
      x-identifiers:
        - VolumeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::Volume'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VolumeId') as volume_
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::FSx::Volume'
    volume:
      name: volume
      id: aws.fsx.volume
      x-cfn-schema-name: Volume
      x-type: get
      x-identifiers:
        - VolumeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OpenZFSConfiguration') as open_zf_sconfiguration,
              JSON_EXTRACT(Properties, '$.ResourceARN') as resource_ar_n,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.VolumeType') as volume_type,
              JSON_EXTRACT(Properties, '$.BackupId') as backup_id,
              JSON_EXTRACT(Properties, '$.OntapConfiguration') as ontap_configuration,
              JSON_EXTRACT(Properties, '$.UUID') as u_ui_d,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::Volume'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OpenZFSConfiguration') as open_zf_sconfiguration,
                json_extract_path_text(Properties, 'ResourceARN') as resource_ar_n,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'VolumeType') as volume_type,
                json_extract_path_text(Properties, 'BackupId') as backup_id,
                json_extract_path_text(Properties, 'OntapConfiguration') as ontap_configuration,
                json_extract_path_text(Properties, 'UUID') as u_ui_d,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::FSx::Volume'
