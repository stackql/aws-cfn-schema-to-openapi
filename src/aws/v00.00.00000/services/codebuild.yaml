openapi: 3.0.0
info:
  title: CodeBuild
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    Fleet:
      type: object
      properties:
        Name:
          type: string
          minLength: 2
          maxLength: 128
        BaseCapacity:
          type: integer
          minimum: 1
        EnvironmentType:
          type: string
          enum:
            - WINDOWS_SERVER_2019_CONTAINER
            - WINDOWS_SERVER_2022_CONTAINER
            - LINUX_CONTAINER
            - LINUX_GPU_CONTAINER
            - ARM_CONTAINER
        ComputeType:
          type: string
          enum:
            - BUILD_GENERAL1_SMALL
            - BUILD_GENERAL1_MEDIUM
            - BUILD_GENERAL1_LARGE
            - BUILD_GENERAL1_2XLARGE
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          type: string
          minLength: 1
      x-stackql-resource-name: fleet
      x-stackql-primaryIdentifier:
        - Arn
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - codebuild:BatchGetFleets
          - codebuild:CreateFleet
        delete:
          - codebuild:BatchGetFleets
          - codebuild:DeleteFleet
        read:
          - codebuild:BatchGetFleets
        list:
          - codebuild:ListFleets
        update:
          - codebuild:BatchGetFleets
          - codebuild:UpdateFleet
    ProjectSourceVersion:
      type: object
      additionalProperties: false
      properties:
        SourceIdentifier:
          type: string
        SourceVersion:
          type: string
      required:
        - SourceIdentifier
    VpcConfig:
      type: object
      additionalProperties: false
      properties:
        Subnets:
          type: array
          uniqueItems: false
          items:
            type: string
        VpcId:
          type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
    SourceAuth:
      type: object
      additionalProperties: false
      properties:
        Resource:
          type: string
        Type:
          type: string
      required:
        - Type
    RegistryCredential:
      type: object
      additionalProperties: false
      properties:
        Credential:
          type: string
        CredentialProvider:
          type: string
      required:
        - Credential
        - CredentialProvider
    FilterGroup:
      type: object
      additionalProperties: false
    Source:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        ReportBuildStatus:
          type: boolean
        Auth:
          $ref: '#/components/schemas/SourceAuth'
        SourceIdentifier:
          type: string
        BuildSpec:
          type: string
        GitCloneDepth:
          type: integer
        BuildStatusConfig:
          $ref: '#/components/schemas/BuildStatusConfig'
        GitSubmodulesConfig:
          $ref: '#/components/schemas/GitSubmodulesConfig'
        InsecureSsl:
          type: boolean
        Location:
          type: string
      required:
        - Type
    ProjectCache:
      type: object
      additionalProperties: false
      properties:
        Modes:
          type: array
          uniqueItems: false
          items:
            type: string
        Type:
          type: string
        Location:
          type: string
      required:
        - Type
    Artifacts:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Type:
          type: string
        ArtifactIdentifier:
          type: string
        OverrideArtifactName:
          type: boolean
        Packaging:
          type: string
        EncryptionDisabled:
          type: boolean
        Location:
          type: string
        Name:
          type: string
        NamespaceType:
          type: string
      required:
        - Type
    LogsConfig:
      type: object
      additionalProperties: false
      properties:
        CloudWatchLogs:
          $ref: '#/components/schemas/CloudWatchLogsConfig'
        S3Logs:
          $ref: '#/components/schemas/S3LogsConfig'
    BatchRestrictions:
      type: object
      additionalProperties: false
      properties:
        ComputeTypesAllowed:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumBuildsAllowed:
          type: integer
    ProjectBuildBatchConfig:
      type: object
      additionalProperties: false
      properties:
        CombineArtifacts:
          type: boolean
        ServiceRole:
          type: string
        BatchReportMode:
          type: string
        TimeoutInMins:
          type: integer
        Restrictions:
          $ref: '#/components/schemas/BatchRestrictions'
    CloudWatchLogsConfig:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        GroupName:
          type: string
        StreamName:
          type: string
      required:
        - Status
    Environment:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        EnvironmentVariables:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
        Fleet:
          $ref: '#/components/schemas/ProjectFleet'
        PrivilegedMode:
          type: boolean
        ImagePullCredentialsType:
          type: string
        Image:
          type: string
        RegistryCredential:
          $ref: '#/components/schemas/RegistryCredential'
        ComputeType:
          type: string
        Certificate:
          type: string
      required:
        - Type
        - Image
        - ComputeType
    EnvironmentVariable:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Type:
          type: string
        Name:
          type: string
      required:
        - Value
        - Name
    ProjectFileSystemLocation:
      type: object
      additionalProperties: false
      properties:
        MountPoint:
          type: string
        Type:
          type: string
        Identifier:
          type: string
        MountOptions:
          type: string
        Location:
          type: string
      required:
        - MountPoint
        - Type
        - Identifier
        - Location
    ProjectTriggers:
      type: object
      additionalProperties: false
      properties:
        BuildType:
          type: string
        FilterGroups:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/FilterGroup'
        Webhook:
          type: boolean
    BuildStatusConfig:
      type: object
      additionalProperties: false
      properties:
        Context:
          type: string
        TargetUrl:
          type: string
    GitSubmodulesConfig:
      type: object
      additionalProperties: false
      properties:
        FetchSubmodules:
          type: boolean
      required:
        - FetchSubmodules
    S3LogsConfig:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        EncryptionDisabled:
          type: boolean
        Location:
          type: string
      required:
        - Status
    ProjectFleet:
      type: object
      additionalProperties: false
      properties:
        FleetArn:
          type: string
    Project:
      type: object
      properties:
        Description:
          type: string
        ResourceAccessRole:
          type: string
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        SecondarySources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Source'
        EncryptionKey:
          type: string
        SecondaryArtifacts:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Artifacts'
        Source:
          $ref: '#/components/schemas/Source'
        Name:
          type: string
        LogsConfig:
          $ref: '#/components/schemas/LogsConfig'
        ServiceRole:
          type: string
        QueuedTimeoutInMinutes:
          type: integer
        SecondarySourceVersions:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ProjectSourceVersion'
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        SourceVersion:
          type: string
        Triggers:
          $ref: '#/components/schemas/ProjectTriggers'
        Artifacts:
          $ref: '#/components/schemas/Artifacts'
        BadgeEnabled:
          type: boolean
        FileSystemLocations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ProjectFileSystemLocation'
        Environment:
          $ref: '#/components/schemas/Environment'
        ConcurrentBuildLimit:
          type: integer
        Visibility:
          type: string
        Id:
          type: string
        Arn:
          type: string
        BuildBatchConfig:
          $ref: '#/components/schemas/ProjectBuildBatchConfig'
        TimeoutInMinutes:
          type: integer
        Cache:
          $ref: '#/components/schemas/ProjectCache'
      required:
        - Artifacts
        - ServiceRole
        - Environment
        - Source
      x-stackql-resource-name: project
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
        - Arn
    S3ReportExportConfig:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Bucket:
          type: string
        Packaging:
          type: string
        EncryptionKey:
          type: string
        BucketOwner:
          type: string
        EncryptionDisabled:
          type: boolean
      required:
        - Bucket
    ReportExportConfig:
      type: object
      additionalProperties: false
      properties:
        S3Destination:
          $ref: '#/components/schemas/S3ReportExportConfig'
        ExportConfigType:
          type: string
      required:
        - ExportConfigType
    ReportGroup:
      type: object
      properties:
        Type:
          type: string
        ExportConfig:
          $ref: '#/components/schemas/ReportExportConfig'
        Id:
          type: string
        Arn:
          type: string
        DeleteReports:
          type: boolean
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Type
        - ExportConfig
      x-stackql-resource-name: report_group
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
        - Type
      x-read-only-properties:
        - Id
        - Arn
    SourceCredential:
      type: object
      properties:
        ServerType:
          type: string
        Token:
          type: string
        AuthType:
          type: string
        Id:
          type: string
        Username:
          type: string
      required:
        - ServerType
        - Token
        - AuthType
      x-stackql-resource-name: source_credential
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - ServerType
      x-read-only-properties:
        - Id
  x-stackQL-resources:
    fleets:
      name: fleets
      id: aws.codebuild.fleets
      x-cfn-schema-name: Fleet
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as a
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::Fleet'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as a
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::Fleet'
    fleet:
      name: fleet
      id: aws.codebuild.fleet
      x-cfn-schema-name: Fleet
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(Properties, '$.EnvironmentType') as environment_type,
              JSON_EXTRACT(Properties, '$.ComputeType') as compute_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::Fleet'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'BaseCapacity') as base_capacity,
                json_extract_path_text(Properties, 'EnvironmentType') as environment_type,
                json_extract_path_text(Properties, 'ComputeType') as compute_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::Fleet'
    projects:
      name: projects
      id: aws.codebuild.projects
      x-cfn-schema-name: Project
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::Project'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::Project'
    project:
      name: project
      id: aws.codebuild.project
      x-cfn-schema-name: Project
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ResourceAccessRole') as resource_access_role,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.SecondarySources') as secondary_sources,
              JSON_EXTRACT(Properties, '$.EncryptionKey') as encryption_key,
              JSON_EXTRACT(Properties, '$.SecondaryArtifacts') as secondary_artifacts,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LogsConfig') as logs_config,
              JSON_EXTRACT(Properties, '$.ServiceRole') as service_role,
              JSON_EXTRACT(Properties, '$.QueuedTimeoutInMinutes') as queued_timeout_in_minutes,
              JSON_EXTRACT(Properties, '$.SecondarySourceVersions') as secondary_source_versions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SourceVersion') as source_version,
              JSON_EXTRACT(Properties, '$.Triggers') as triggers,
              JSON_EXTRACT(Properties, '$.Artifacts') as artifacts,
              JSON_EXTRACT(Properties, '$.BadgeEnabled') as badge_enabled,
              JSON_EXTRACT(Properties, '$.FileSystemLocations') as file_system_locations,
              JSON_EXTRACT(Properties, '$.Environment') as environment,
              JSON_EXTRACT(Properties, '$.ConcurrentBuildLimit') as concurrent_build_limit,
              JSON_EXTRACT(Properties, '$.Visibility') as visibility,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.BuildBatchConfig') as build_batch_config,
              JSON_EXTRACT(Properties, '$.TimeoutInMinutes') as timeout_in_minutes,
              JSON_EXTRACT(Properties, '$.Cache') as cache
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::Project'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ResourceAccessRole') as resource_access_role,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'SecondarySources') as secondary_sources,
                json_extract_path_text(Properties, 'EncryptionKey') as encryption_key,
                json_extract_path_text(Properties, 'SecondaryArtifacts') as secondary_artifacts,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'LogsConfig') as logs_config,
                json_extract_path_text(Properties, 'ServiceRole') as service_role,
                json_extract_path_text(Properties, 'QueuedTimeoutInMinutes') as queued_timeout_in_minutes,
                json_extract_path_text(Properties, 'SecondarySourceVersions') as secondary_source_versions,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SourceVersion') as source_version,
                json_extract_path_text(Properties, 'Triggers') as triggers,
                json_extract_path_text(Properties, 'Artifacts') as artifacts,
                json_extract_path_text(Properties, 'BadgeEnabled') as badge_enabled,
                json_extract_path_text(Properties, 'FileSystemLocations') as file_system_locations,
                json_extract_path_text(Properties, 'Environment') as environment,
                json_extract_path_text(Properties, 'ConcurrentBuildLimit') as concurrent_build_limit,
                json_extract_path_text(Properties, 'Visibility') as visibility,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'BuildBatchConfig') as build_batch_config,
                json_extract_path_text(Properties, 'TimeoutInMinutes') as timeout_in_minutes,
                json_extract_path_text(Properties, 'Cache') as cache
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::Project'
    report_groups:
      name: report_groups
      id: aws.codebuild.report_groups
      x-cfn-schema-name: ReportGroup
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::ReportGroup'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::ReportGroup'
    report_group:
      name: report_group
      id: aws.codebuild.report_group
      x-cfn-schema-name: ReportGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.ExportConfig') as export_config,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DeleteReports') as delete_reports,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::ReportGroup'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'ExportConfig') as export_config,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DeleteReports') as delete_reports,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::ReportGroup'
    source_credentials:
      name: source_credentials
      id: aws.codebuild.source_credentials
      x-cfn-schema-name: SourceCredential
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::SourceCredential'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeBuild::SourceCredential'
    source_credential:
      name: source_credential
      id: aws.codebuild.source_credential
      x-cfn-schema-name: SourceCredential
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerType') as server_type,
              JSON_EXTRACT(Properties, '$.Token') as token,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Username') as username
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::SourceCredential'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerType') as server_type,
                json_extract_path_text(Properties, 'Token') as token,
                json_extract_path_text(Properties, 'AuthType') as auth_type,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Username') as username
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeBuild::SourceCredential'
