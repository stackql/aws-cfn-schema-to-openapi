openapi: 3.0.0
info:
  title: ElasticLoadBalancing
  version: 1.0.0
paths: {}
components:
  schemas:
    Listeners:
      type: object
      additionalProperties: false
      properties:
        PolicyNames:
          type: array
          uniqueItems: true
          items:
            type: string
        InstancePort:
          type: string
        LoadBalancerPort:
          type: string
        Protocol:
          type: string
        SSLCertificateId:
          type: string
        InstanceProtocol:
          type: string
      required:
        - InstancePort
        - LoadBalancerPort
        - Protocol
    ConnectionDrainingPolicy:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        Timeout:
          type: integer
      required:
        - Enabled
    Policies:
      type: object
      additionalProperties: false
      properties:
        Attributes:
          type: array
          uniqueItems: true
          items:
            type: object
        PolicyType:
          type: string
        LoadBalancerPorts:
          type: array
          uniqueItems: true
          items:
            type: string
        PolicyName:
          type: string
        InstancePorts:
          type: array
          uniqueItems: true
          items:
            type: string
      required:
        - PolicyType
        - PolicyName
        - Attributes
    AppCookieStickinessPolicy:
      type: object
      additionalProperties: false
      properties:
        CookieName:
          type: string
        PolicyName:
          type: string
      required:
        - PolicyName
        - CookieName
    LBCookieStickinessPolicy:
      type: object
      additionalProperties: false
      properties:
        CookieExpirationPeriod:
          type: string
        PolicyName:
          type: string
    HealthCheck:
      type: object
      additionalProperties: false
      properties:
        Target:
          type: string
        UnhealthyThreshold:
          type: string
        Timeout:
          type: string
        HealthyThreshold:
          type: string
        Interval:
          type: string
      required:
        - Target
        - UnhealthyThreshold
        - Timeout
        - HealthyThreshold
        - Interval
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    AccessLoggingPolicy:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        S3BucketName:
          type: string
        EmitInterval:
          type: integer
        S3BucketPrefix:
          type: string
      required:
        - Enabled
        - S3BucketName
    ConnectionSettings:
      type: object
      additionalProperties: false
      properties:
        IdleTimeout:
          type: integer
      required:
        - IdleTimeout
    LoadBalancer:
      type: object
      properties:
        SecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
        ConnectionDrainingPolicy:
          $ref: '#/components/schemas/ConnectionDrainingPolicy'
        Policies:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Policies'
        Scheme:
          type: string
        AvailabilityZones:
          type: array
          uniqueItems: true
          items:
            type: string
        SourceSecurityGroupOwnerAlias:
          type: string
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        CanonicalHostedZoneNameID:
          type: string
        CanonicalHostedZoneName:
          type: string
        DNSName:
          type: string
        AccessLoggingPolicy:
          $ref: '#/components/schemas/AccessLoggingPolicy'
        Instances:
          type: array
          uniqueItems: true
          items:
            type: string
        LoadBalancerName:
          type: string
        Listeners:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Listeners'
        Subnets:
          type: array
          uniqueItems: true
          items:
            type: string
        CrossZone:
          type: boolean
        AppCookieStickinessPolicy:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AppCookieStickinessPolicy'
        LBCookieStickinessPolicy:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LBCookieStickinessPolicy'
        Id:
          type: string
        SourceSecurityGroupGroupName:
          type: string
        ConnectionSettings:
          $ref: '#/components/schemas/ConnectionSettings'
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Listeners
      x-stackql-resource-name: load_balancer
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - LoadBalancerName
        - Scheme
      x-read-only-properties:
        - Id
        - CanonicalHostedZoneName
        - CanonicalHostedZoneNameID
        - SourceSecurityGroup.GroupName
        - DNSName
        - SourceSecurityGroup.OwnerAlias
  x-stackQL-resources:
    load_balancers:
      name: load_balancers
      id: aws.elasticloadbalancing.load_balancers
      x-cfn-schema-name: LoadBalancer
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancing::LoadBalancer'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancing::LoadBalancer'
    load_balancer:
      name: load_balancer
      id: aws.elasticloadbalancing.load_balancer
      x-cfn-schema-name: LoadBalancer
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.ConnectionDrainingPolicy') as connection_draining_policy,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.Scheme') as scheme,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupOwnerAlias') as source_security_group_owner_alias,
              JSON_EXTRACT(Properties, '$.HealthCheck') as health_check,
              JSON_EXTRACT(Properties, '$.CanonicalHostedZoneNameID') as canonical_hosted_zone_name_id,
              JSON_EXTRACT(Properties, '$.CanonicalHostedZoneName') as canonical_hosted_zone_name,
              JSON_EXTRACT(Properties, '$.DNSName') as d_ns_name,
              JSON_EXTRACT(Properties, '$.AccessLoggingPolicy') as access_logging_policy,
              JSON_EXTRACT(Properties, '$.Instances') as instances,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.Listeners') as listeners,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.CrossZone') as cross_zone,
              JSON_EXTRACT(Properties, '$.AppCookieStickinessPolicy') as app_cookie_stickiness_policy,
              JSON_EXTRACT(Properties, '$.LBCookieStickinessPolicy') as l_bcookie_stickiness_policy,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupGroupName') as source_security_group_group_name,
              JSON_EXTRACT(Properties, '$.ConnectionSettings') as connection_settings,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancing::LoadBalancer'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SecurityGroups') as security_groups,
                json_extract_path_text(Properties, 'ConnectionDrainingPolicy') as connection_draining_policy,
                json_extract_path_text(Properties, 'Policies') as policies,
                json_extract_path_text(Properties, 'Scheme') as scheme,
                json_extract_path_text(Properties, 'AvailabilityZones') as availability_zones,
                json_extract_path_text(Properties, 'SourceSecurityGroupOwnerAlias') as source_security_group_owner_alias,
                json_extract_path_text(Properties, 'HealthCheck') as health_check,
                json_extract_path_text(Properties, 'CanonicalHostedZoneNameID') as canonical_hosted_zone_name_id,
                json_extract_path_text(Properties, 'CanonicalHostedZoneName') as canonical_hosted_zone_name,
                json_extract_path_text(Properties, 'DNSName') as d_ns_name,
                json_extract_path_text(Properties, 'AccessLoggingPolicy') as access_logging_policy,
                json_extract_path_text(Properties, 'Instances') as instances,
                json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name,
                json_extract_path_text(Properties, 'Listeners') as listeners,
                json_extract_path_text(Properties, 'Subnets') as subnets,
                json_extract_path_text(Properties, 'CrossZone') as cross_zone,
                json_extract_path_text(Properties, 'AppCookieStickinessPolicy') as app_cookie_stickiness_policy,
                json_extract_path_text(Properties, 'LBCookieStickinessPolicy') as l_bcookie_stickiness_policy,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'SourceSecurityGroupGroupName') as source_security_group_group_name,
                json_extract_path_text(Properties, 'ConnectionSettings') as connection_settings,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancing::LoadBalancer'
