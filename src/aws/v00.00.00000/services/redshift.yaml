openapi: 3.0.0
info:
  title: Redshift
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    LoggingProperties:
      type: object
      additionalProperties: false
      properties:
        BucketName:
          type: string
        S3KeyPrefix:
          type: string
      required:
        - BucketName
    Endpoint:
      type: object
      properties:
        Address:
          type: string
        Port:
          type: integer
        VpcEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/VpcEndpoint'
          x-insertionOrder: false
      additionalProperties: false
    Cluster:
      type: object
      properties:
        ClusterIdentifier:
          description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
          type: string
          maxLength: 63
        MasterUsername:
          description: The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.
          type: string
          maxLength: 128
        MasterUserPassword:
          description: The password associated with the master user account for the cluster that is being created. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.
          type: string
          maxLength: 64
        NodeType:
          description: 'The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge'
          type: string
        AllowVersionUpgrade:
          description: Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True
          type: boolean
        AutomatedSnapshotRetentionPeriod:
          description: The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1
          type: integer
        AvailabilityZone:
          description: 'The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint'
          type: string
        ClusterParameterGroupName:
          description: The name of the parameter group to be associated with this cluster.
          type: string
          maxLength: 255
        ClusterType:
          description: The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required
          type: string
        ClusterVersion:
          description: The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.
          type: string
        ClusterSubnetGroupName:
          description: The name of a cluster subnet group to be associated with this cluster.
          type: string
        DBName:
          description: The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.
          type: string
        ElasticIp:
          description: The Elastic IP (EIP) address for the cluster.
          type: string
        Encrypted:
          description: If true, the data in the cluster is encrypted at rest.
          type: boolean
        HsmClientCertificateIdentifier:
          description: Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM
          type: string
        HsmConfigurationIdentifier:
          description: Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
          type: string
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
          type: string
        NumberOfNodes:
          description: The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.
          type: integer
        Port:
          description: The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings
          type: integer
        PreferredMaintenanceWindow:
          description: The weekly time range (in UTC) during which automated cluster maintenance can occur.
          type: string
        PubliclyAccessible:
          description: If true, the cluster can be accessed from a public network.
          type: boolean
        ClusterSecurityGroups:
          description: A list of security groups to be associated with this cluster.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        IamRoles:
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM roles in a single request
          type: array
          x-insertionOrder: false
          maxItems: 50
          items:
            type: string
        Tags:
          description: The list of tags for the cluster parameter group.
          type: array
          x-insertionOrder: false
          maxItems: 50
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        VpcSecurityGroupIds:
          description: A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        SnapshotClusterIdentifier:
          description: The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
          type: string
        SnapshotIdentifier:
          description: The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.
          type: string
        Id:
          type: string
        OwnerAccount:
          type: string
        LoggingProperties:
          $ref: '#/components/schemas/LoggingProperties'
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        DestinationRegion:
          description: 'The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference'
          type: string
        SnapshotCopyRetentionPeriod:
          description: |-
            The number of days to retain automated snapshots in the destination region after they are copied from the source region. 

             Default is 7. 

             Constraints: Must be at least 1 and no more than 35.
          type: integer
        SnapshotCopyGrantName:
          description: The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
          type: string
        ManualSnapshotRetentionPeriod:
          description: |-
            The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.

            The value must be either -1 or an integer between 1 and 3,653.
          type: integer
        SnapshotCopyManual:
          description: Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
          type: boolean
        AvailabilityZoneRelocation:
          description: The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
          type: boolean
        AvailabilityZoneRelocationStatus:
          description: The availability zone relocation status of the cluster
          type: string
        AquaConfigurationStatus:
          description: |
            The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.

            enabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.
            disabled - Don't use AQUA.
            auto - Amazon Redshift determines whether to use AQUA.
          type: string
        Classic:
          description: A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.
          type: boolean
        EnhancedVpcRouting:
          description: |-
            An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.

            If this option is true , enhanced VPC routing is enabled.

            Default: false
          type: boolean
        MaintenanceTrackName:
          description: The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
          type: string
        DeferMaintenance:
          description: A boolean indicating whether to enable the deferred maintenance window.
          type: boolean
        DeferMaintenanceIdentifier:
          description: A unique identifier for the deferred maintenance window.
          type: string
        DeferMaintenanceStartTime:
          description: A timestamp indicating the start time for the deferred maintenance window.
          type: string
        DeferMaintenanceEndTime:
          description: A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
          type: string
        DeferMaintenanceDuration:
          description: An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
          type: integer
        RevisionTarget:
          description: The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.
          type: string
        ResourceAction:
          description: The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster APIs
          type: string
        RotateEncryptionKey:
          description: A boolean indicating if we want to rotate Encryption Keys.
          type: boolean
      required:
        - MasterUserPassword
        - NodeType
        - MasterUsername
        - DBName
        - ClusterType
      x-stackql-resource-name: cluster
    Parameter:
      type: object
      additionalProperties: false
      properties:
        ParameterName:
          type: string
          description: The name of the parameter.
        ParameterValue:
          type: string
          description: The value of the parameter. If `ParameterName` is `wlm_json_configuration`, then the maximum size of `ParameterValue` is 8000 characters.
      required:
        - ParameterValue
        - ParameterName
    ClusterParameterGroup:
      type: object
      properties:
        ParameterGroupName:
          type: string
          description: The name of the cluster parameter group.
          maxLength: 255
        Description:
          type: string
          description: A description of the parameter group.
        ParameterGroupFamily:
          type: string
          description: The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.
        Parameters:
          type: array
          description: An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Parameter'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - ParameterGroupFamily
      x-stackql-resource-name: cluster_parameter_group
    ClusterSecurityGroup:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
      x-stackql-resource-name: cluster_security_group
    ClusterSecurityGroupIngress:
      type: object
      properties:
        Id:
          type: string
        CIDRIP:
          type: string
        ClusterSecurityGroupName:
          type: string
        EC2SecurityGroupName:
          type: string
        EC2SecurityGroupOwnerId:
          type: string
      required:
        - ClusterSecurityGroupName
      x-stackql-resource-name: cluster_security_group_ingress
    ClusterSubnetGroup:
      type: object
      properties:
        Description:
          description: The description of the parameter group.
          type: string
        SubnetIds:
          description: The list of VPC subnet IDs
          type: array
          x-insertionOrder: false
          maxItems: 20
          items:
            type: string
        Tags:
          description: The list of tags for the cluster parameter group.
          type: array
          x-insertionOrder: false
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
        ClusterSubnetGroupName:
          description: 'This name must be unique for all subnet groups that are created by your AWS account. If costumer do not provide it, cloudformation will generate it. Must not be "Default". '
          type: string
          maxLength: 255
      required:
        - Description
        - SubnetIds
      x-stackql-resource-name: cluster_subnet_group
    VpcSecurityGroup:
      description: Describes the members of a VPC security group.
      type: object
      properties:
        VpcSecurityGroupId:
          type: string
          description: The identifier of the VPC security group.
        Status:
          type: string
          description: The status of the VPC security group.
      additionalProperties: false
    NetworkInterface:
      type: object
      properties:
        NetworkInterfaceId:
          type: string
        SubnetId:
          type: string
        PrivateIpAddress:
          type: string
        AvailabilityZone:
          type: string
      additionalProperties: false
    EndpointAccess:
      type: object
      properties:
        Address:
          description: The DNS address of the endpoint.
          type: string
        ClusterIdentifier:
          description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
          type: string
        VpcSecurityGroups:
          description: A list of Virtual Private Cloud (VPC) security groups to be associated with the endpoint.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VpcSecurityGroup'
        ResourceOwner:
          description: The AWS account ID of the owner of the cluster.
          type: string
          pattern: ^\d{12}$
        EndpointStatus:
          description: The status of the endpoint.
          type: string
        EndpointName:
          description: The name of the endpoint.
          type: string
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,30}$
        EndpointCreateTime:
          description: The time (UTC) that the endpoint was created.
          type: string
        SubnetGroupName:
          description: The subnet group name where Amazon Redshift chooses to deploy the endpoint.
          type: string
          pattern: ^(?=^[a-zA-Z0-9-]+$).{1,255}$
        Port:
          description: The port number on which the cluster accepts incoming connections.
          type: integer
        VpcSecurityGroupIds:
          description: A list of vpc security group ids to apply to the created endpoint access.
          type: array
          x-insertionOrder: false
          items:
            type: string
        VpcEndpoint:
          description: The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
          type: object
          properties:
            VpcEndpointId:
              type: string
              description: The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
            VpcId:
              type: string
              description: The VPC identifier that the endpoint is associated.
            NetworkInterfaces:
              type: array
              x-insertionOrder: false
              description: One or more network interfaces of the endpoint. Also known as an interface endpoint.
              items:
                $ref: '#/components/schemas/NetworkInterface'
          additionalProperties: false
      required:
        - ClusterIdentifier
        - SubnetGroupName
        - EndpointName
        - VpcSecurityGroupIds
      x-stackql-resource-name: endpoint_access
    AwsAccount:
      type: string
      pattern: ^\d{12}$
    VpcId:
      type: string
      pattern: ^vpc-[A-Za-z0-9]{1,17}$
    EndpointAuthorization:
      type: object
      properties:
        Grantor:
          description: The AWS account ID of the cluster owner.
          $ref: '#/components/schemas/AwsAccount'
        Grantee:
          description: The AWS account ID of the grantee of the cluster.
          $ref: '#/components/schemas/AwsAccount'
        ClusterIdentifier:
          description: The cluster identifier.
          type: string
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,63}$
        AuthorizeTime:
          description: The time (UTC) when the authorization was created.
          type: string
        ClusterStatus:
          description: The status of the cluster.
          type: string
        Status:
          description: The status of the authorization action.
          type: string
        AllowedAllVPCs:
          description: Indicates whether all VPCs in the grantee account are allowed access to the cluster.
          type: boolean
        AllowedVPCs:
          description: The VPCs allowed access to the cluster.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VpcId'
        EndpointCount:
          description: The number of Redshift-managed VPC endpoints created for the authorization.
          type: integer
        Account:
          description: The target AWS account ID to grant or revoke access for.
          $ref: '#/components/schemas/AwsAccount'
        VpcIds:
          description: The virtual private cloud (VPC) identifiers to grant or revoke access to.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VpcId'
        Force:
          description: ' Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.'
          type: boolean
      required:
        - ClusterIdentifier
        - Account
      x-stackql-resource-name: endpoint_authorization
    EventSubscription:
      type: object
      properties:
        SubscriptionName:
          description: The name of the Amazon Redshift event notification subscription
          type: string
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,255}$
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
          type: string
        SourceType:
          description: The type of source that will be generating the events.
          type: string
          enum:
            - cluster
            - cluster-parameter-group
            - cluster-security-group
            - cluster-snapshot
            - scheduled-action
        SourceIds:
          description: A list of one or more identifiers of Amazon Redshift source objects.
          type: array
          x-insertionOrder: false
          items:
            type: string
        EventCategories:
          description: Specifies the Amazon Redshift event categories to be published by the event notification subscription.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            enum:
              - configuration
              - management
              - monitoring
              - security
              - pending
        Severity:
          description: Specifies the Amazon Redshift event severity to be published by the event notification subscription.
          type: string
          enum:
            - ERROR
            - INFO
        Enabled:
          description: A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CustomerAwsId:
          description: The AWS account associated with the Amazon Redshift event notification subscription.
          type: string
        CustSubscriptionId:
          description: The name of the Amazon Redshift event notification subscription.
          type: string
        Status:
          description: The status of the Amazon Redshift event notification subscription.
          type: string
          enum:
            - active
            - no-permission
            - topic-not-exist
        SubscriptionCreationTime:
          description: The date and time the Amazon Redshift event notification subscription was created.
          type: string
        SourceIdsList:
          description: A list of the sources that publish events to the Amazon Redshift event notification subscription.
          type: array
          x-insertionOrder: false
          items:
            type: string
        EventCategoriesList:
          description: The list of Amazon Redshift event categories specified in the event notification subscription.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
      required:
        - SubscriptionName
      x-stackql-resource-name: event_subscription
    ResizeClusterMessage:
      description: Describes a resize cluster operation. For example, a scheduled action to run the `ResizeCluster` API operation.
      type: object
      properties:
        ClusterIdentifier:
          type: string
        ClusterType:
          type: string
        NodeType:
          type: string
        NumberOfNodes:
          type: integer
        Classic:
          type: boolean
      required:
        - ClusterIdentifier
      additionalProperties: false
    PauseClusterMessage:
      description: Describes a pause cluster operation. For example, a scheduled action to run the `PauseCluster` API operation.
      type: object
      properties:
        ClusterIdentifier:
          type: string
      required:
        - ClusterIdentifier
      additionalProperties: false
    ResumeClusterMessage:
      description: Describes a resume cluster operation. For example, a scheduled action to run the `ResumeCluster` API operation.
      type: object
      properties:
        ClusterIdentifier:
          type: string
      required:
        - ClusterIdentifier
      additionalProperties: false
    ScheduledActionType:
      type: object
      oneOf:
        - properties:
            ResizeCluster:
              $ref: '#/components/schemas/ResizeClusterMessage'
          additionalProperties: false
        - properties:
            PauseCluster:
              $ref: '#/components/schemas/PauseClusterMessage'
          additionalProperties: false
        - properties:
            ResumeCluster:
              $ref: '#/components/schemas/ResumeClusterMessage'
          additionalProperties: false
    timestamp:
      type: string
    ScheduledAction:
      type: object
      properties:
        ScheduledActionName:
          description: The name of the scheduled action. The name must be unique within an account.
          type: string
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,60}$
        TargetAction:
          description: A JSON format string of the Amazon Redshift API operation with input parameters.
          $ref: '#/components/schemas/ScheduledActionType'
        Schedule:
          description: The schedule in `at( )` or `cron( )` format.
          type: string
        IamRole:
          description: The IAM role to assume to run the target action.
          type: string
        ScheduledActionDescription:
          description: The description of the scheduled action.
          type: string
          pattern: ^(?=^[\x09\x0a\x0d\x20-\xff]*$).{1,255}$
        StartTime:
          description: The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
          $ref: '#/components/schemas/timestamp'
        EndTime:
          description: The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
          $ref: '#/components/schemas/timestamp'
        Enable:
          description: If true, the schedule is enabled. If false, the scheduled action does not trigger.
          type: boolean
        State:
          description: The state of the scheduled action.
          type: string
          enum:
            - ACTIVE
            - DISABLED
        NextInvocations:
          description: List of times when the scheduled action will run.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/timestamp'
      required:
        - ScheduledActionName
      x-stackql-resource-name: scheduled_action
    LogExport:
      type: string
      enum:
        - useractivitylog
        - userlog
        - connectionlog
    Namespace:
      type: object
      properties:
        AdminUserPassword:
          description: The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
          type: string
          maxLength: 64
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+
        AdminUsername:
          description: The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
        DbName:
          description: The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
          maxLength: 127
        DefaultIamRoleArn:
          description: The default IAM role ARN for the namespace that is being created.
          type: string
        IamRoles:
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 512
            minLength: 0
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
          type: string
        LogExports:
          description: 'The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog'
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LogExport'
          maxItems: 16
          minItems: 0
        Namespace:
          $ref: '#/components/schemas/Namespace'
        NamespaceName:
          description: A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
          type: string
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9-]+$
        Tags:
          description: The list of tags for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        FinalSnapshotName:
          description: The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
          type: string
          pattern: '[a-z][a-z0-9]*(-[a-z0-9]+)*'
          maxLength: 255
        FinalSnapshotRetentionPeriod:
          description: The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
          type: integer
      required:
        - NamespaceName
      x-stackql-resource-name: namespace
    NamespaceStatus:
      type: string
      enum:
        - AVAILABLE
        - MODIFYING
        - DELETING
    ConfigParameter:
      type: object
      properties:
        ParameterKey:
          type: string
          maxLength: 255
          minLength: 0
        ParameterValue:
          type: string
          maxLength: 15000
          minLength: 0
      additionalProperties: false
    VpcEndpoint:
      type: object
      properties:
        VpcEndpointId:
          type: string
        VpcId:
          type: string
        NetworkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          x-insertionOrder: false
      additionalProperties: false
    Workgroup:
      type: object
      properties:
        WorkgroupName:
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        NamespaceName:
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        BaseCapacity:
          type: integer
        EnhancedVpcRouting:
          type: boolean
          default: false
        ConfigParameters:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigParameter'
          minItems: 1
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^sg-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        SubnetIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^subnet-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        PubliclyAccessible:
          type: boolean
          default: false
        Port:
          type: integer
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        Workgroup:
          $ref: '#/components/schemas/Workgroup'
      required:
        - WorkgroupName
      x-stackql-resource-name: workgroup
    WorkgroupStatus:
      type: string
      enum:
        - CREATING
        - AVAILABLE
        - MODIFYING
        - DELETING
x-stackql-views:
  - cluster:
      name: cluster
      id: aws.redshift.cluster
      x-cfn-schema-name: Cluster
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(Properties, '$.AllowVersionUpgrade') as allow_version_upgrade,
              JSON_EXTRACT(Properties, '$.AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.ClusterParameterGroupName') as cluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.ClusterType') as cluster_type,
              JSON_EXTRACT(Properties, '$.ClusterVersion') as cluster_version,
              JSON_EXTRACT(Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name,
              JSON_EXTRACT(Properties, '$.DBName') as d_bname,
              JSON_EXTRACT(Properties, '$.ElasticIp') as elastic_ip,
              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(Properties, '$.HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
              JSON_EXTRACT(Properties, '$.HsmConfigurationIdentifier') as hsm_configuration_identifier,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.NumberOfNodes') as number_of_nodes,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.ClusterSecurityGroups') as cluster_security_groups,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.SnapshotClusterIdentifier') as snapshot_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(Properties, '$.LoggingProperties.BucketName') as logging_properties_bucket_name,
              JSON_EXTRACT(Properties, '$.LoggingProperties.S3KeyPrefix') as logging_properties_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.Endpoint.Address') as endpoint_address,
              JSON_EXTRACT(Properties, '$.Endpoint.Port') as endpoint_port,
              JSON_EXTRACT(Properties, '$.Endpoint.VpcEndpoints') as endpoint_vpc_endpoints,
              JSON_EXTRACT(Properties, '$.DestinationRegion') as destination_region,
              JSON_EXTRACT(Properties, '$.SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period,
              JSON_EXTRACT(Properties, '$.SnapshotCopyGrantName') as snapshot_copy_grant_name,
              JSON_EXTRACT(Properties, '$.ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.SnapshotCopyManual') as snapshot_copy_manual,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneRelocation') as availability_zone_relocation,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
              JSON_EXTRACT(Properties, '$.AquaConfigurationStatus') as aqua_configuration_status,
              JSON_EXTRACT(Properties, '$.Classic') as classic,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.MaintenanceTrackName') as maintenance_track_name,
              JSON_EXTRACT(Properties, '$.DeferMaintenance') as defer_maintenance,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceIdentifier') as defer_maintenance_identifier,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceStartTime') as defer_maintenance_start_time,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceEndTime') as defer_maintenance_end_time,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceDuration') as defer_maintenance_duration,
              JSON_EXTRACT(Properties, '$.RevisionTarget') as revision_target,
              JSON_EXTRACT(Properties, '$.ResourceAction') as resource_action,
              JSON_EXTRACT(Properties, '$.RotateEncryptionKey') as rotate_encryption_key
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Cluster' ;
  - cluster_parameter_group:
      name: cluster_parameter_group
      id: aws.redshift.cluster_parameter_group
      x-cfn-schema-name: ClusterParameterGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ParameterGroupFamily') as parameter_group_family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterParameterGroup' ;
  - cluster_security_group:
      name: cluster_security_group
      id: aws.redshift.cluster_security_group
      x-cfn-schema-name: ClusterSecurityGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterSecurityGroup' ;
  - cluster_security_group_ingress:
      name: cluster_security_group_ingress
      id: aws.redshift.cluster_security_group_ingress
      x-cfn-schema-name: ClusterSecurityGroupIngress
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CIDRIP') as c_id_ri_p,
              JSON_EXTRACT(Properties, '$.ClusterSecurityGroupName') as cluster_security_group_name,
              JSON_EXTRACT(Properties, '$.EC2SecurityGroupName') as e_c2_security_group_name,
              JSON_EXTRACT(Properties, '$.EC2SecurityGroupOwnerId') as e_c2_security_group_owner_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterSecurityGroupIngress' ;
  - cluster_subnet_group:
      name: cluster_subnet_group
      id: aws.redshift.cluster_subnet_group
      x-cfn-schema-name: ClusterSubnetGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterSubnetGroup' ;
  - endpoint_access:
      name: endpoint_access
      id: aws.redshift.endpoint_access
      x-cfn-schema-name: EndpointAccess
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Address') as address,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroups') as vpc_security_groups,
              JSON_EXTRACT(Properties, '$.ResourceOwner') as resource_owner,
              JSON_EXTRACT(Properties, '$.EndpointStatus') as endpoint_status,
              JSON_EXTRACT(Properties, '$.EndpointName') as endpoint_name,
              JSON_EXTRACT(Properties, '$.EndpointCreateTime') as endpoint_create_time,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcEndpoint') as vpc_endpoint
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAccess' ;
  - endpoint_authorization:
      name: endpoint_authorization
      id: aws.redshift.endpoint_authorization
      x-cfn-schema-name: EndpointAuthorization
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.AuthorizeTime') as authorize_time,
              JSON_EXTRACT(Properties, '$.ClusterStatus') as cluster_status,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.AllowedAllVPCs') as allowed_all_vp_cs,
              JSON_EXTRACT(Properties, '$.AllowedVPCs') as allowed_vp_cs,
              JSON_EXTRACT(Properties, '$.EndpointCount') as endpoint_count,
              JSON_EXTRACT(Properties, '$.VpcIds') as vpc_ids,
              JSON_EXTRACT(Properties, '$.Force') as force
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAuthorization' ;
  - event_subscription:
      name: event_subscription
      id: aws.redshift.event_subscription
      x-cfn-schema-name: EventSubscription
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type,
              JSON_EXTRACT(Properties, '$.SourceIds') as source_ids,
              JSON_EXTRACT(Properties, '$.EventCategories') as event_categories,
              JSON_EXTRACT(Properties, '$.Severity') as severity,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CustomerAwsId') as customer_aws_id,
              JSON_EXTRACT(Properties, '$.CustSubscriptionId') as cust_subscription_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.SubscriptionCreationTime') as subscription_creation_time,
              JSON_EXTRACT(Properties, '$.SourceIdsList') as source_ids_list,
              JSON_EXTRACT(Properties, '$.EventCategoriesList') as event_categories_list
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EventSubscription' ;
  - scheduled_action:
      name: scheduled_action
      id: aws.redshift.scheduled_action
      x-cfn-schema-name: ScheduledAction
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ScheduledActionName') as scheduled_action_name,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.IamRole') as iam_role,
              JSON_EXTRACT(Properties, '$.ScheduledActionDescription') as scheduled_action_description,
              JSON_EXTRACT(Properties, '$.Enable') as enable,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.NextInvocations') as next_invocations
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ScheduledAction' ;
  - namespace:
      name: namespace
      id: aws.redshift.namespace
      x-cfn-schema-name: Namespace
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AdminUserPassword') as admin_user_password,
              JSON_EXTRACT(Properties, '$.AdminUsername') as admin_username,
              JSON_EXTRACT(Properties, '$.DbName') as db_name,
              JSON_EXTRACT(Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LogExports') as log_exports,
              JSON_EXTRACT(Properties, '$.Namespace.AdminUserPassword') as namespace_admin_user_password,
              JSON_EXTRACT(Properties, '$.Namespace.AdminUsername') as namespace_admin_username,
              JSON_EXTRACT(Properties, '$.Namespace.DbName') as namespace_db_name,
              JSON_EXTRACT(Properties, '$.Namespace.DefaultIamRoleArn') as namespace_default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.Namespace.IamRoles') as namespace_iam_roles,
              JSON_EXTRACT(Properties, '$.Namespace.KmsKeyId') as namespace_kms_key_id,
              JSON_EXTRACT(Properties, '$.Namespace.LogExports') as namespace_log_exports,
              JSON_EXTRACT(Properties, '$.Namespace.Namespace') as namespace_namespace,
              JSON_EXTRACT(Properties, '$.Namespace.NamespaceName') as namespace_namespace_name,
              JSON_EXTRACT(Properties, '$.Namespace.Tags') as namespace_tags,
              JSON_EXTRACT(Properties, '$.Namespace.FinalSnapshotName') as namespace_final_snapshot_name,
              JSON_EXTRACT(Properties, '$.Namespace.FinalSnapshotRetentionPeriod') as namespace_final_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Namespace' ;
  - workgroup:
      name: workgroup
      id: aws.redshift.workgroup
      x-cfn-schema-name: Workgroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.ConfigParameters') as config_parameters,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Workgroup.WorkgroupName') as workgroup_workgroup_name,
              JSON_EXTRACT(Properties, '$.Workgroup.NamespaceName') as workgroup_namespace_name,
              JSON_EXTRACT(Properties, '$.Workgroup.BaseCapacity') as workgroup_base_capacity,
              JSON_EXTRACT(Properties, '$.Workgroup.EnhancedVpcRouting') as workgroup_enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.Workgroup.ConfigParameters') as workgroup_config_parameters,
              JSON_EXTRACT(Properties, '$.Workgroup.SecurityGroupIds') as workgroup_security_group_ids,
              JSON_EXTRACT(Properties, '$.Workgroup.SubnetIds') as workgroup_subnet_ids,
              JSON_EXTRACT(Properties, '$.Workgroup.PubliclyAccessible') as workgroup_publicly_accessible,
              JSON_EXTRACT(Properties, '$.Workgroup.Port') as workgroup_port,
              JSON_EXTRACT(Properties, '$.Workgroup.Tags') as workgroup_tags,
              JSON_EXTRACT(Properties, '$.Workgroup.Workgroup') as workgroup_workgroup
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Workgroup' ;
