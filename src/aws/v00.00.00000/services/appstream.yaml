openapi: 3.0.0
info:
  title: AppStream
  version: 1.0.0
paths: {}
components:
  schemas:
    S3Location:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          type: string
        S3Key:
          type: string
      required:
        - S3Bucket
        - S3Key
    ScriptDetails:
      type: object
      properties:
        ScriptS3Location:
          $ref: '#/components/schemas/S3Location'
        ExecutablePath:
          type: string
        ExecutableParameters:
          type: string
        TimeoutInSeconds:
          type: integer
      additionalProperties: false
      required:
        - ScriptS3Location
        - ExecutablePath
        - TimeoutInSeconds
    Arn:
      type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    PackagingType:
      type: string
    AppBlock:
      type: object
      properties:
        Name:
          type: string
        Arn:
          $ref: '#/components/schemas/Arn'
        Description:
          type: string
        DisplayName:
          type: string
        SourceS3Location:
          $ref: '#/components/schemas/S3Location'
        SetupScriptDetails:
          $ref: '#/components/schemas/ScriptDetails'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        CreatedTime:
          type: string
        PackagingType:
          $ref: '#/components/schemas/PackagingType'
        PostSetupScriptDetails:
          $ref: '#/components/schemas/ScriptDetails'
      required:
        - Name
        - SourceS3Location
      x-stackql-resource-name: app_block
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - Name
        - DisplayName
        - Description
        - SourceS3Location
        - SetupScriptDetails
        - PackagingType
        - PostSetupScriptDetails
      x-read-only-properties:
        - Arn
        - CreatedTime
      x-required-permissions:
        create:
          - appstream:CreateAppBlock
          - appstream:TagResource
          - s3:GetObject
          - s3:ListBucket
          - s3:GetBucketOwnershipControls
        read:
          - appstream:DescribeAppBlocks
        delete:
          - appstream:DeleteAppBlock
    PlatformType:
      type: string
    AccessEndpoint:
      type: object
      additionalProperties: false
      properties:
        EndpointType:
          type: string
        VpceId:
          type: string
      required:
        - EndpointType
        - VpceId
    VpcConfig:
      type: object
      additionalProperties: false
      properties:
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
    AppBlockBuilder:
      type: object
      properties:
        Name:
          type: string
        Arn:
          $ref: '#/components/schemas/Arn'
        Description:
          type: string
        DisplayName:
          type: string
        Platform:
          $ref: '#/components/schemas/PlatformType'
        AccessEndpoints:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AccessEndpoint'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        EnableDefaultInternetAccess:
          type: boolean
        IamRoleArn:
          type: string
        CreatedTime:
          type: string
        InstanceType:
          type: string
        AppBlockArns:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Arn'
      required:
        - Name
        - Platform
        - InstanceType
        - VpcConfig
      x-stackql-resource-name: app_block_builder
      x-stackql-primaryIdentifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
        - CreatedTime
      x-required-permissions:
        create:
          - appstream:CreateAppBlockBuilder
          - appstream:DescribeAppBlockBuilders
          - appstream:StartAppBlockBuilder
          - appstream:AssociateAppBlockBuilderAppBlock
          - appstream:DescribeAppBlockBuilderAppBlockAssociations
          - appstream:TagResource
          - iam:PassRole
        read:
          - appstream:DescribeAppBlockBuilders
        update:
          - appstream:UpdateAppBlockBuilder
          - appstream:DescribeAppBlockBuilders
          - appstream:StartAppBlockBuilder
          - appstream:StopAppBlockBuilder
          - appstream:AssociateAppBlockBuilderAppBlock
          - appstream:DisassociateAppBlockBuilderAppBlock
          - appstream:DescribeAppBlockBuilderAppBlockAssociations
          - appstream:ListTagsForResource
          - appstream:TagResource
          - appstream:UntagResource
          - iam:PassRole
        delete:
          - appstream:DescribeAppBlockBuilders
          - appstream:DeleteAppBlockBuilder
          - appstream:DisassociateAppBlockBuilderAppBlock
          - appstream:DescribeAppBlockBuilderAppBlockAssociations
        list:
          - appstream:DescribeAppBlockBuilders
    ApplicationAttribute:
      type: string
    Application:
      type: object
      properties:
        Name:
          type: string
        DisplayName:
          type: string
        Description:
          type: string
        LaunchPath:
          type: string
        LaunchParameters:
          type: string
        WorkingDirectory:
          type: string
        InstanceFamilies:
          type: array
          uniqueItems: true
          items:
            type: string
          x-insertionOrder: false
        IconS3Location:
          $ref: '#/components/schemas/S3Location'
        Arn:
          $ref: '#/components/schemas/Arn'
        AppBlockArn:
          $ref: '#/components/schemas/Arn'
        Platforms:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PlatformType'
          x-insertionOrder: false
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        AttributesToDelete:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApplicationAttribute'
          x-insertionOrder: false
        CreatedTime:
          type: string
      required:
        - Name
        - IconS3Location
        - LaunchPath
        - Platforms
        - InstanceFamilies
        - AppBlockArn
      x-stackql-resource-name: application
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - Name
        - InstanceFamilies
        - Platforms
      x-read-only-properties:
        - Arn
        - CreatedTime
      x-required-permissions:
        create:
          - s3:GetObject
          - appstream:CreateApplication
          - appstream:TagResource
        read:
          - appstream:DescribeApplications
        update:
          - appstream:UpdateApplication
          - s3:GetObject
        delete:
          - appstream:DeleteApplication
    ApplicationEntitlementAssociation:
      type: object
      properties:
        StackName:
          type: string
        EntitlementName:
          type: string
        ApplicationIdentifier:
          type: string
      required:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      x-stackql-resource-name: application_entitlement_association
      x-stackql-primaryIdentifier:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      x-create-only-properties:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      x-required-permissions:
        create:
          - appstream:AssociateApplicationToEntitlement
          - appstream:ListEntitledApplications
        read:
          - appstream:ListEntitledApplications
        delete:
          - appstream:DisassociateApplicationFromEntitlement
          - appstream:ListEntitledApplications
    ApplicationFleetAssociation:
      type: object
      properties:
        FleetName:
          type: string
        ApplicationArn:
          $ref: '#/components/schemas/Arn'
      required:
        - FleetName
        - ApplicationArn
      x-stackql-resource-name: application_fleet_association
      x-stackql-primaryIdentifier:
        - FleetName
        - ApplicationArn
      x-create-only-properties:
        - FleetName
        - ApplicationArn
      x-required-permissions:
        create:
          - appstream:AssociateApplicationFleet
          - appstream:DescribeApplicationFleetAssociations
        read:
          - appstream:DescribeApplicationFleetAssociations
        delete:
          - appstream:DisassociateApplicationFleet
          - appstream:DescribeApplicationFleetAssociations
    ServiceAccountCredentials:
      type: object
      additionalProperties: false
      properties:
        AccountName:
          type: string
        AccountPassword:
          type: string
      required:
        - AccountName
        - AccountPassword
    CertificateBasedAuthProperties:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        CertificateAuthorityArn:
          type: string
    DirectoryConfig:
      type: object
      properties:
        OrganizationalUnitDistinguishedNames:
          type: array
          uniqueItems: false
          items:
            type: string
        ServiceAccountCredentials:
          $ref: '#/components/schemas/ServiceAccountCredentials'
        DirectoryName:
          type: string
        CertificateBasedAuthProperties:
          $ref: '#/components/schemas/CertificateBasedAuthProperties'
      required:
        - DirectoryName
        - OrganizationalUnitDistinguishedNames
        - ServiceAccountCredentials
      x-stackql-resource-name: directory_config
      x-stackql-primaryIdentifier:
        - DirectoryName
      x-create-only-properties:
        - DirectoryName
      x-required-permissions:
        create:
          - appstream:CreateDirectoryConfig
          - appstream:DeleteDirectoryConfig
          - appstream:DescribeDirectoryConfig
          - appstream:UpdateDirectoryConfig
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        update:
          - appstream:CreateDirectoryConfig
          - appstream:DeleteDirectoryConfig
          - appstream:DescribeDirectoryConfig
          - appstream:UpdateDirectoryConfig
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        read:
          - appstream:CreateDirectoryConfig
          - appstream:DeleteDirectoryConfig
          - appstream:DescribeDirectoryConfig
          - appstream:UpdateDirectoryConfig
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        delete:
          - appstream:CreateDirectoryConfig
          - appstream:DeleteDirectoryConfig
          - appstream:DescribeDirectoryConfig
          - appstream:UpdateDirectoryConfig
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        list:
          - appstream:CreateDirectoryConfig
          - appstream:DeleteDirectoryConfig
          - appstream:DescribeDirectoryConfig
          - appstream:UpdateDirectoryConfig
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
    Attribute:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      required:
        - Name
        - Value
      additionalProperties: false
    Entitlement:
      type: object
      properties:
        Name:
          type: string
        StackName:
          type: string
        Description:
          type: string
        AppVisibility:
          type: string
        Attributes:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Attribute'
        CreatedTime:
          type: string
        LastModifiedTime:
          type: string
      required:
        - Name
        - StackName
        - AppVisibility
        - Attributes
      x-stackql-resource-name: entitlement
      x-stackql-primaryIdentifier:
        - StackName
        - Name
      x-create-only-properties:
        - Name
        - StackName
      x-read-only-properties:
        - CreatedTime
        - LastModifiedTime
      x-required-permissions:
        create:
          - appstream:CreateEntitlement
        read:
          - appstream:DescribeEntitlements
        update:
          - appstream:UpdateEntitlement
        delete:
          - appstream:DeleteEntitlement
    ComputeCapacity:
      type: object
      additionalProperties: false
      properties:
        DesiredInstances:
          type: integer
        DesiredSessions:
          type: integer
    DomainJoinInfo:
      type: object
      additionalProperties: false
      properties:
        OrganizationalUnitDistinguishedName:
          type: string
        DirectoryName:
          type: string
    Fleet:
      type: object
      properties:
        Description:
          type: string
        ComputeCapacity:
          $ref: '#/components/schemas/ComputeCapacity'
        Platform:
          type: string
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        FleetType:
          type: string
        EnableDefaultInternetAccess:
          type: boolean
        DomainJoinInfo:
          $ref: '#/components/schemas/DomainJoinInfo'
        SessionScriptS3Location:
          $ref: '#/components/schemas/S3Location'
        Name:
          type: string
        ImageName:
          type: string
        MaxUserDurationInSeconds:
          type: integer
        IdleDisconnectTimeoutInSeconds:
          type: integer
        UsbDeviceFilterStrings:
          type: array
          uniqueItems: false
          items:
            type: string
        DisconnectTimeoutInSeconds:
          type: integer
        DisplayName:
          type: string
        StreamView:
          type: string
        IamRoleArn:
          type: string
        MaxSessionsPerInstance:
          type: integer
        Id:
          type: string
        InstanceType:
          type: string
        MaxConcurrentSessions:
          type: integer
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        ImageArn:
          type: string
      required:
        - InstanceType
        - Name
      x-stackql-resource-name: fleet
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
        - FleetType
      x-read-only-properties:
        - Id
    ImageBuilder:
      type: object
      properties:
        Description:
          type: string
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        EnableDefaultInternetAccess:
          type: boolean
        DomainJoinInfo:
          $ref: '#/components/schemas/DomainJoinInfo'
        AppstreamAgentVersion:
          type: string
        Name:
          type: string
        ImageName:
          type: string
        DisplayName:
          type: string
        IamRoleArn:
          type: string
        InstanceType:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        StreamingUrl:
          type: string
        ImageArn:
          type: string
        AccessEndpoints:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccessEndpoint'
      required:
        - InstanceType
        - Name
      x-stackql-resource-name: image_builder
      x-stackql-primaryIdentifier:
        - Name
      x-read-only-properties:
        - StreamingUrl
      x-required-permissions:
        create:
          - appstream:CreateImageBuilder
          - appstream:CreateImageBuilderStreamingURL
          - appstream:CreateStreamingURL
          - appstream:DeleteImageBuilder
          - appstream:DescribeImageBuilders
          - appstream:StartImageBuilder
          - appstream:StopImageBuilder
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        read:
          - appstream:CreateImageBuilder
          - appstream:CreateImageBuilderStreamingURL
          - appstream:CreateStreamingURL
          - appstream:DeleteImageBuilder
          - appstream:DescribeImageBuilders
          - appstream:StartImageBuilder
          - appstream:StopImageBuilder
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        delete:
          - appstream:CreateImageBuilder
          - appstream:CreateImageBuilderStreamingURL
          - appstream:CreateStreamingURL
          - appstream:DeleteImageBuilder
          - appstream:DescribeImageBuilders
          - appstream:StartImageBuilder
          - appstream:StopImageBuilder
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        list:
          - appstream:CreateImageBuilder
          - appstream:CreateImageBuilderStreamingURL
          - appstream:CreateStreamingURL
          - appstream:DeleteImageBuilder
          - appstream:DescribeImageBuilders
          - appstream:StartImageBuilder
          - appstream:StopImageBuilder
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
    StorageConnector:
      type: object
      additionalProperties: false
      properties:
        Domains:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceIdentifier:
          type: string
        ConnectorType:
          type: string
      required:
        - ConnectorType
    ApplicationSettings:
      type: object
      additionalProperties: false
      properties:
        SettingsGroup:
          type: string
        Enabled:
          type: boolean
      required:
        - Enabled
    StreamingExperienceSettings:
      type: object
      additionalProperties: false
      properties:
        PreferredProtocol:
          type: string
    UserSetting:
      type: object
      additionalProperties: false
      properties:
        Permission:
          type: string
        Action:
          type: string
        MaximumLength:
          type: integer
      required:
        - Action
        - Permission
    Stack:
      type: object
      properties:
        Description:
          type: string
        StorageConnectors:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/StorageConnector'
        DeleteStorageConnectors:
          type: boolean
        EmbedHostDomains:
          type: array
          uniqueItems: false
          items:
            type: string
        UserSettings:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/UserSetting'
        AttributesToDelete:
          type: array
          uniqueItems: false
          items:
            type: string
        RedirectURL:
          type: string
        StreamingExperienceSettings:
          $ref: '#/components/schemas/StreamingExperienceSettings'
        Name:
          type: string
        FeedbackURL:
          type: string
        ApplicationSettings:
          $ref: '#/components/schemas/ApplicationSettings'
        DisplayName:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        AccessEndpoints:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccessEndpoint'
      x-stackql-resource-name: stack
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
    StackFleetAssociation:
      type: object
      properties:
        Id:
          type: string
        FleetName:
          type: string
        StackName:
          type: string
      required:
        - FleetName
        - StackName
      x-stackql-resource-name: stack_fleet_association
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
    StackUserAssociation:
      type: object
      properties:
        Id:
          type: string
        SendEmailNotification:
          type: boolean
        UserName:
          type: string
        StackName:
          type: string
        AuthenticationType:
          type: string
      required:
        - StackName
        - UserName
        - AuthenticationType
      x-stackql-resource-name: stack_user_association
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - StackName
        - AuthenticationType
        - SendEmailNotification
        - UserName
      x-read-only-properties:
        - Id
    User:
      type: object
      properties:
        Id:
          type: string
        UserName:
          type: string
        FirstName:
          type: string
        MessageAction:
          type: string
        LastName:
          type: string
        AuthenticationType:
          type: string
      required:
        - UserName
        - AuthenticationType
      x-stackql-resource-name: user
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - FirstName
        - MessageAction
        - LastName
        - AuthenticationType
        - UserName
      x-read-only-properties:
        - Id
  x-stackQL-resources:
    app_blocks:
      name: app_blocks
      id: aws.appstream.app_blocks
      x-cfn-schema-name: AppBlock
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as a
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::AppBlock'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as a
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::AppBlock'
    app_block:
      name: app_block
      id: aws.appstream.app_block
      x-cfn-schema-name: AppBlock
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.SourceS3Location') as source_s3_location,
              JSON_EXTRACT(Properties, '$.SetupScriptDetails') as setup_script_details,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.PackagingType') as packaging_type,
              JSON_EXTRACT(Properties, '$.PostSetupScriptDetails') as post_setup_script_details
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::AppBlock'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'SourceS3Location') as source_s3_location,
                json_extract_path_text(Properties, 'SetupScriptDetails') as setup_script_details,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'CreatedTime') as created_time,
                json_extract_path_text(Properties, 'PackagingType') as packaging_type,
                json_extract_path_text(Properties, 'PostSetupScriptDetails') as post_setup_script_details
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::AppBlock'
    app_block_builders:
      name: app_block_builders
      id: aws.appstream.app_block_builders
      x-cfn-schema-name: AppBlockBuilder
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as na
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::AppBlockBuilder'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as na
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::AppBlockBuilder'
    app_block_builder:
      name: app_block_builder
      id: aws.appstream.app_block_builder
      x-cfn-schema-name: AppBlockBuilder
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.Platform') as platform,
              JSON_EXTRACT(Properties, '$.AccessEndpoints') as access_endpoints,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.EnableDefaultInternetAccess') as enable_default_internet_access,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.AppBlockArns') as app_block_arns
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::AppBlockBuilder'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'Platform') as platform,
                json_extract_path_text(Properties, 'AccessEndpoints') as access_endpoints,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'EnableDefaultInternetAccess') as enable_default_internet_access,
                json_extract_path_text(Properties, 'IamRoleArn') as iam_role_arn,
                json_extract_path_text(Properties, 'CreatedTime') as created_time,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'AppBlockArns') as app_block_arns
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::AppBlockBuilder'
    applications:
      name: applications
      id: aws.appstream.applications
      x-cfn-schema-name: Application
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as a
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Application'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as a
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Application'
    application:
      name: application
      id: aws.appstream.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LaunchPath') as launch_path,
              JSON_EXTRACT(Properties, '$.LaunchParameters') as launch_parameters,
              JSON_EXTRACT(Properties, '$.WorkingDirectory') as working_directory,
              JSON_EXTRACT(Properties, '$.InstanceFamilies') as instance_families,
              JSON_EXTRACT(Properties, '$.IconS3Location') as icon_s3_location,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AppBlockArn') as app_block_arn,
              JSON_EXTRACT(Properties, '$.Platforms') as platforms,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AttributesToDelete') as attributes_to_delete,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Application'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'LaunchPath') as launch_path,
                json_extract_path_text(Properties, 'LaunchParameters') as launch_parameters,
                json_extract_path_text(Properties, 'WorkingDirectory') as working_directory,
                json_extract_path_text(Properties, 'InstanceFamilies') as instance_families,
                json_extract_path_text(Properties, 'IconS3Location') as icon_s3_location,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AppBlockArn') as app_block_arn,
                json_extract_path_text(Properties, 'Platforms') as platforms,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AttributesToDelete') as attributes_to_delete,
                json_extract_path_text(Properties, 'CreatedTime') as created_time
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Application'
    application_entitlement_associations:
      name: application_entitlement_associations
      id: aws.appstream.application_entitlement_associations
      x-cfn-schema-name: ApplicationEntitlementAssociation
      x-type: list
      x-identifiers:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name,
              JSON_EXTRACT(Properties, '$.EntitlementName') as entitlement_name,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifi
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ApplicationEntitlementAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StackName') as stack_name,
                json_extract_path_text(Properties, 'EntitlementName') as entitlement_name,
                json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifi
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ApplicationEntitlementAssociation'
    application_entitlement_association:
      name: application_entitlement_association
      id: aws.appstream.application_entitlement_association
      x-cfn-schema-name: ApplicationEntitlementAssociation
      x-type: get
      x-identifiers:
        - StackName
        - EntitlementName
        - ApplicationIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name,
              JSON_EXTRACT(Properties, '$.EntitlementName') as entitlement_name,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ApplicationEntitlementAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StackName') as stack_name,
                json_extract_path_text(Properties, 'EntitlementName') as entitlement_name,
                json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ApplicationEntitlementAssociation'
    application_fleet_associations:
      name: application_fleet_associations
      id: aws.appstream.application_fleet_associations
      x-cfn-schema-name: ApplicationFleetAssociation
      x-type: list
      x-identifiers:
        - FleetName
        - ApplicationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FleetName') as fleet_name,
              JSON_EXTRACT(Properties, '$.ApplicationArn') as application_a
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ApplicationFleetAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FleetName') as fleet_name,
                json_extract_path_text(Properties, 'ApplicationArn') as application_a
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ApplicationFleetAssociation'
    application_fleet_association:
      name: application_fleet_association
      id: aws.appstream.application_fleet_association
      x-cfn-schema-name: ApplicationFleetAssociation
      x-type: get
      x-identifiers:
        - FleetName
        - ApplicationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FleetName') as fleet_name,
              JSON_EXTRACT(Properties, '$.ApplicationArn') as application_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ApplicationFleetAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FleetName') as fleet_name,
                json_extract_path_text(Properties, 'ApplicationArn') as application_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ApplicationFleetAssociation'
    directory_configs:
      name: directory_configs
      id: aws.appstream.directory_configs
      x-cfn-schema-name: DirectoryConfig
      x-type: list
      x-identifiers:
        - DirectoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DirectoryName') as directory_na
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::DirectoryConfig'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DirectoryName') as directory_na
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::DirectoryConfig'
    directory_config:
      name: directory_config
      id: aws.appstream.directory_config
      x-cfn-schema-name: DirectoryConfig
      x-type: get
      x-identifiers:
        - DirectoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationalUnitDistinguishedNames') as organizational_unit_distinguished_names,
              JSON_EXTRACT(Properties, '$.ServiceAccountCredentials') as service_account_credentials,
              JSON_EXTRACT(Properties, '$.DirectoryName') as directory_name,
              JSON_EXTRACT(Properties, '$.CertificateBasedAuthProperties') as certificate_based_auth_properties
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::DirectoryConfig'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OrganizationalUnitDistinguishedNames') as organizational_unit_distinguished_names,
                json_extract_path_text(Properties, 'ServiceAccountCredentials') as service_account_credentials,
                json_extract_path_text(Properties, 'DirectoryName') as directory_name,
                json_extract_path_text(Properties, 'CertificateBasedAuthProperties') as certificate_based_auth_properties
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::DirectoryConfig'
    entitlements:
      name: entitlements
      id: aws.appstream.entitlements
      x-cfn-schema-name: Entitlement
      x-type: list
      x-identifiers:
        - StackName
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name,
              JSON_EXTRACT(Properties, '$.Name') as na
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Entitlement'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StackName') as stack_name,
                json_extract_path_text(Properties, 'Name') as na
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Entitlement'
    entitlement:
      name: entitlement
      id: aws.appstream.entitlement
      x-cfn-schema-name: Entitlement
      x-type: get
      x-identifiers:
        - StackName
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AppVisibility') as app_visibility,
              JSON_EXTRACT(Properties, '$.Attributes') as attributes,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.LastModifiedTime') as last_modified_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Entitlement'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'StackName') as stack_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'AppVisibility') as app_visibility,
                json_extract_path_text(Properties, 'Attributes') as attributes,
                json_extract_path_text(Properties, 'CreatedTime') as created_time,
                json_extract_path_text(Properties, 'LastModifiedTime') as last_modified_time
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Entitlement'
    fleets:
      name: fleets
      id: aws.appstream.fleets
      x-cfn-schema-name: Fleet
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Fleet'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Fleet'
    fleet:
      name: fleet
      id: aws.appstream.fleet
      x-cfn-schema-name: Fleet
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ComputeCapacity') as compute_capacity,
              JSON_EXTRACT(Properties, '$.Platform') as platform,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.FleetType') as fleet_type,
              JSON_EXTRACT(Properties, '$.EnableDefaultInternetAccess') as enable_default_internet_access,
              JSON_EXTRACT(Properties, '$.DomainJoinInfo') as domain_join_info,
              JSON_EXTRACT(Properties, '$.SessionScriptS3Location') as session_script_s3_location,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ImageName') as image_name,
              JSON_EXTRACT(Properties, '$.MaxUserDurationInSeconds') as max_user_duration_in_seconds,
              JSON_EXTRACT(Properties, '$.IdleDisconnectTimeoutInSeconds') as idle_disconnect_timeout_in_seconds,
              JSON_EXTRACT(Properties, '$.UsbDeviceFilterStrings') as usb_device_filter_strings,
              JSON_EXTRACT(Properties, '$.DisconnectTimeoutInSeconds') as disconnect_timeout_in_seconds,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.StreamView') as stream_view,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.MaxSessionsPerInstance') as max_sessions_per_instance,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.MaxConcurrentSessions') as max_concurrent_sessions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ImageArn') as image_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Fleet'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ComputeCapacity') as compute_capacity,
                json_extract_path_text(Properties, 'Platform') as platform,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'FleetType') as fleet_type,
                json_extract_path_text(Properties, 'EnableDefaultInternetAccess') as enable_default_internet_access,
                json_extract_path_text(Properties, 'DomainJoinInfo') as domain_join_info,
                json_extract_path_text(Properties, 'SessionScriptS3Location') as session_script_s3_location,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ImageName') as image_name,
                json_extract_path_text(Properties, 'MaxUserDurationInSeconds') as max_user_duration_in_seconds,
                json_extract_path_text(Properties, 'IdleDisconnectTimeoutInSeconds') as idle_disconnect_timeout_in_seconds,
                json_extract_path_text(Properties, 'UsbDeviceFilterStrings') as usb_device_filter_strings,
                json_extract_path_text(Properties, 'DisconnectTimeoutInSeconds') as disconnect_timeout_in_seconds,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'StreamView') as stream_view,
                json_extract_path_text(Properties, 'IamRoleArn') as iam_role_arn,
                json_extract_path_text(Properties, 'MaxSessionsPerInstance') as max_sessions_per_instance,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'MaxConcurrentSessions') as max_concurrent_sessions,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'ImageArn') as image_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Fleet'
    image_builders:
      name: image_builders
      id: aws.appstream.image_builders
      x-cfn-schema-name: ImageBuilder
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as na
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ImageBuilder'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as na
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::ImageBuilder'
    image_builder:
      name: image_builder
      id: aws.appstream.image_builder
      x-cfn-schema-name: ImageBuilder
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.EnableDefaultInternetAccess') as enable_default_internet_access,
              JSON_EXTRACT(Properties, '$.DomainJoinInfo') as domain_join_info,
              JSON_EXTRACT(Properties, '$.AppstreamAgentVersion') as appstream_agent_version,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ImageName') as image_name,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.StreamingUrl') as streaming_url,
              JSON_EXTRACT(Properties, '$.ImageArn') as image_arn,
              JSON_EXTRACT(Properties, '$.AccessEndpoints') as access_endpoints
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ImageBuilder'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'EnableDefaultInternetAccess') as enable_default_internet_access,
                json_extract_path_text(Properties, 'DomainJoinInfo') as domain_join_info,
                json_extract_path_text(Properties, 'AppstreamAgentVersion') as appstream_agent_version,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ImageName') as image_name,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'IamRoleArn') as iam_role_arn,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'StreamingUrl') as streaming_url,
                json_extract_path_text(Properties, 'ImageArn') as image_arn,
                json_extract_path_text(Properties, 'AccessEndpoints') as access_endpoints
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::ImageBuilder'
    stacks:
      name: stacks
      id: aws.appstream.stacks
      x-cfn-schema-name: Stack
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Stack'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::Stack'
    stack:
      name: stack
      id: aws.appstream.stack
      x-cfn-schema-name: Stack
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StorageConnectors') as storage_connectors,
              JSON_EXTRACT(Properties, '$.DeleteStorageConnectors') as delete_storage_connectors,
              JSON_EXTRACT(Properties, '$.EmbedHostDomains') as embed_host_domains,
              JSON_EXTRACT(Properties, '$.UserSettings') as user_settings,
              JSON_EXTRACT(Properties, '$.AttributesToDelete') as attributes_to_delete,
              JSON_EXTRACT(Properties, '$.RedirectURL') as redirect_ur_l,
              JSON_EXTRACT(Properties, '$.StreamingExperienceSettings') as streaming_experience_settings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.FeedbackURL') as feedback_ur_l,
              JSON_EXTRACT(Properties, '$.ApplicationSettings') as application_settings,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AccessEndpoints') as access_endpoints
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Stack'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'StorageConnectors') as storage_connectors,
                json_extract_path_text(Properties, 'DeleteStorageConnectors') as delete_storage_connectors,
                json_extract_path_text(Properties, 'EmbedHostDomains') as embed_host_domains,
                json_extract_path_text(Properties, 'UserSettings') as user_settings,
                json_extract_path_text(Properties, 'AttributesToDelete') as attributes_to_delete,
                json_extract_path_text(Properties, 'RedirectURL') as redirect_ur_l,
                json_extract_path_text(Properties, 'StreamingExperienceSettings') as streaming_experience_settings,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'FeedbackURL') as feedback_ur_l,
                json_extract_path_text(Properties, 'ApplicationSettings') as application_settings,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AccessEndpoints') as access_endpoints
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::Stack'
    stack_fleet_associations:
      name: stack_fleet_associations
      id: aws.appstream.stack_fleet_associations
      x-cfn-schema-name: StackFleetAssociation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::StackFleetAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::StackFleetAssociation'
    stack_fleet_association:
      name: stack_fleet_association
      id: aws.appstream.stack_fleet_association
      x-cfn-schema-name: StackFleetAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.FleetName') as fleet_name,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::StackFleetAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'FleetName') as fleet_name,
                json_extract_path_text(Properties, 'StackName') as stack_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::StackFleetAssociation'
    stack_user_associations:
      name: stack_user_associations
      id: aws.appstream.stack_user_associations
      x-cfn-schema-name: StackUserAssociation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::StackUserAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::StackUserAssociation'
    stack_user_association:
      name: stack_user_association
      id: aws.appstream.stack_user_association
      x-cfn-schema-name: StackUserAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SendEmailNotification') as send_email_notification,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.StackName') as stack_name,
              JSON_EXTRACT(Properties, '$.AuthenticationType') as authentication_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::StackUserAssociation'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'SendEmailNotification') as send_email_notification,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'StackName') as stack_name,
                json_extract_path_text(Properties, 'AuthenticationType') as authentication_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::StackUserAssociation'
    users:
      name: users
      id: aws.appstream.users
      x-cfn-schema-name: User
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as 
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::User'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as 
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppStream::User'
    user:
      name: user
      id: aws.appstream.user
      x-cfn-schema-name: User
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.FirstName') as first_name,
              JSON_EXTRACT(Properties, '$.MessageAction') as message_action,
              JSON_EXTRACT(Properties, '$.LastName') as last_name,
              JSON_EXTRACT(Properties, '$.AuthenticationType') as authentication_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::User'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'FirstName') as first_name,
                json_extract_path_text(Properties, 'MessageAction') as message_action,
                json_extract_path_text(Properties, 'LastName') as last_name,
                json_extract_path_text(Properties, 'AuthenticationType') as authentication_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppStream::User'
