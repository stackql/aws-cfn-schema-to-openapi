openapi: 3.0.0
info:
  title: CloudWatch
  description: Additional stackql resources for CloudWatch
  version: 1.0.0
paths:
  /?__X-Amz-Target=Logs_20140328.GetLogEvents&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: GetLogEvents
      description: '<p>Lists log events from the specified log stream. You can list all of the log events or filter using a time range.</p> <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events). You can get additional log events by specifying one of the tokens in a subsequent call. This operation can return empty results while there are more log events available through the token.</p> <p>If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view data from the linked source accounts. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html">CloudWatch cross-account observability</a>.</p> <p>You can specify the log group to search by using either <code>logGroupIdentifier</code> or <code>logGroupName</code>. You must include one of these two parameters, but you can''t include both. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogEventsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogEventsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        # - name: X-Amz-Target
        #   in: header
        #   required: true
        #   schema:
        #     type: string
        #     enum:
        #       - Logs_20140328.GetLogEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.DescribeLogGroups&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: DescribeLogGroups
      description: '<p>Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name.</p> <p>CloudWatch Logs doesnâ€™t support IAM policies that control access to the <code>DescribeLogGroups</code> action by using the <code>aws:ResourceTag/<i>key-name</i> </code> condition key. Other CloudWatch Logs actions do support the use of the <code>aws:ResourceTag/<i>key-name</i> </code> condition key to control access. For more information about using tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling access to Amazon Web Services resources using tags</a>.</p> <p>If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view data from the linked source accounts. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html">CloudWatch cross-account observability</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogGroupsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogGroupsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        # - name: X-Amz-Target
        #   in: header
        #   required: true
        #   schema:
        #     type: string
        #     enum:
        #       - Logs_20140328.DescribeLogGroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.DescribeLogStreams&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: DescribeLogStreams
      description: '<p>Lists the log streams for the specified log group. You can list all the log streams or filter the results by prefix. You can also control how the results are ordered.</p> <p>You can specify the log group to search by using either <code>logGroupIdentifier</code> or <code>logGroupName</code>. You must include one of these two parameters, but you can''t include both. </p> <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p> <p>If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view data from the linked source accounts. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html">CloudWatch cross-account observability</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogStreamsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogStreamsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        # - name: X-Amz-Target
        #   in: header
        #   required: true
        #   schema:
        #     type: string
        #     enum:
        #       - Logs_20140328.DescribeLogStreams
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.CreateLogGroup&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: CreateLogGroup
      description: '<p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p> <p>You must use the following guidelines when naming a log group:</p> <ul> <li> <p>Log group names must be unique within a Region for an Amazon Web Services account.</p> </li> <li> <p>Log group names can be between 1 and 512 characters long.</p> </li> <li> <p>Log group names consist of the following characters: a-z, A-Z, 0-9, ''_'' (underscore), ''-'' (hyphen), ''/'' (forward slash), ''.'' (period), and ''#'' (number sign)</p> </li> </ul> <p>When you create a log group, by default the log events in the log group do not expire. To set a retention policy so that events expire and are deleted after a specified time, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html">PutRetentionPolicy</a>.</p> <p>If you associate an KMS key with the log group, ingested data is encrypted using the KMS key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested.</p> <p>If you attempt to associate a KMS key with the log group but the KMS key does not exist or the KMS key is disabled, you receive an <code>InvalidParameterException</code> error. </p> <important> <p>CloudWatch Logs supports only symmetric KMS keys. Do not associate an asymmetric KMS key with your log group. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric Keys</a>.</p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogGroupRequest'
      # parameters:
      #   - name: X-Amz-Target
      #     in: header
      #     required: true
      #     schema:
      #       type: string
      #       enum:
      #         - Logs_20140328.CreateLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.CreateLogStream&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: CreateLogStream
      description: '<p>Creates a log stream for the specified log group. A log stream is a sequence of log events that originate from a single source, such as an application instance or a resource that is being monitored.</p> <p>There is no limit on the number of log streams that you can create for a log group. There is a limit of 50 TPS on <code>CreateLogStream</code> operations, after which transactions are throttled.</p> <p>You must use the following guidelines when naming a log stream:</p> <ul> <li> <p>Log stream names must be unique within the log group.</p> </li> <li> <p>Log stream names can be between 1 and 512 characters long.</p> </li> <li> <p>Don''t use '':'' (colon) or ''*'' (asterisk) characters.</p> </li> </ul>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogStreamRequest'
      # parameters:
      #   - name: X-Amz-Target
      #     in: header
      #     required: true
      #     schema:
      #       type: string
      #       enum:
      #         - Logs_20140328.CreateLogStream
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.DeleteLogGroup&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: DeleteLogGroup
      description: Deletes the specified log group and permanently deletes all the archived log events associated with the log group.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogGroupRequest'
      # parameters:
      #   - name: X-Amz-Target
      #     in: header
      #     required: true
      #     schema:
      #       type: string
      #       enum:
      #         - Logs_20140328.DeleteLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=Logs_20140328.DeleteLogStream&__nativeEndpoint=true:
    servers:
      - url: 'https://logs.{region}.amazonaws.com'
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The Amazon CloudWatch Logs multi-region endpoint
    post:
      operationId: DeleteLogStream
      description: Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogStreamRequest'
      # parameters:
      #   - name: X-Amz-Target
      #     in: header
      #     required: true
      #     schema:
      #       type: string
      #       enum:
      #         - Logs_20140328.DeleteLogStream
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  schemas:
    AccountId:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    AccountIds:
      type: array
      items:
        $ref: '#/components/schemas/AccountId'
      minItems: 0
      maxItems: 20
    Arn:
      type: string
    CreateLogGroupRequest:
      type: object
      required:
        - logGroupName
      title: CreateLogGroupRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: The name of the log group.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/KmsKeyId'
            - description: >-
                The Amazon Resource Name (ARN) of the KMS key to use when
                encrypting log data. For more information, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Amazon
                Resource Names</a>.
        tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - description: >-
                <p>The key-value pairs to use for the tags.</p> <p>You can grant
                users access to certain log groups while preventing them from
                accessing other log groups. To do so, tag your groups and use
                IAM policies that refer to those tags. To assign tags when you
                create a log group, you must have either the
                <code>logs:TagResource</code> or <code>logs:TagLogGroup</code>
                permission. For more information about tagging, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
                Amazon Web Services resources</a>. For more information about
                using tags to control access, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling
                access to Amazon Web Services resources using tags</a>.</p>
    CreateLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      title: CreateLogStreamRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: The name of the log group.
        logStreamName:
          allOf:
            - $ref: '#/components/schemas/LogStreamName'
            - description: The name of the log stream.
    DataProtectionStatus:
      type: string
      enum:
        - ACTIVATED
        - DELETED
        - ARCHIVED
        - DISABLED
    Days:
      type: integer
      description: >-
        <p>The number of days to retain the log events in the specified log
        group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180,
        365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p>
        <p>To set a log group so that its log events do not expire, use <a
        href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html">DeleteRetentionPolicy</a>.
        </p>
    DeleteLogGroupRequest:
      type: object
      required:
        - logGroupName
      title: DeleteLogGroupRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: The name of the log group.
    DeleteLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      title: DeleteLogStreamRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: The name of the log group.
        logStreamName:
          allOf:
            - $ref: '#/components/schemas/LogStreamName'
            - description: The name of the log stream.
    Descending:
      type: boolean
    DescribeLimit:
      type: integer
      minimum: 1
      maximum: 50
    DescribeLogGroupsRequest:
      type: object
      title: DescribeLogGroupsRequest
      properties:
        accountIdentifiers:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - description: >-
                When <code>includeLinkedAccounts</code> is set to
                <code>True</code>, use this parameter to specify the list of
                accounts to search. You can specify as many as 20 account IDs in
                the array. 
        logGroupNamePrefix:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: >-
                <p>The prefix to match.</p> <note> <p>
                <code>logGroupNamePrefix</code> and
                <code>logGroupNamePattern</code> are mutually exclusive. Only
                one of these parameters can be passed. </p> </note>
        logGroupNamePattern:
          allOf:
            - $ref: '#/components/schemas/LogGroupNamePattern'
            - description: >-
                <p>If you specify a string for this parameter, the operation
                returns only log groups that have names that match the string
                based on a case-sensitive substring search. For example, if you
                specify <code>Foo</code>, log groups named <code>FooBar</code>,
                <code>aws/Foo</code>, and <code>GroupFoo</code> would match, but
                <code>foo</code>, <code>F/o/o</code> and <code>Froo</code> would
                not match.</p> <p>If you specify
                <code>logGroupNamePattern</code> in your request, then only
                <code>arn</code>, <code>creationTime</code>, and
                <code>logGroupName</code> are included in the response. </p>
                <note> <p> <code>logGroupNamePattern</code> and
                <code>logGroupNamePrefix</code> are mutually exclusive. Only one
                of these parameters can be passed. </p> </note>
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: >-
                The token for the next set of items to return. (You received
                this token from a previous call.)
        limit:
          allOf:
            - $ref: '#/components/schemas/DescribeLimit'
            - description: >-
                The maximum number of items returned. If you don't specify a
                value, the default is up to 50 items.
        includeLinkedAccounts:
          allOf:
            - $ref: '#/components/schemas/IncludeLinkedAccounts'
            - description: >-
                <p>If you are using a monitoring account, set this to
                <code>True</code> to have the operation return log groups in the
                accounts listed in <code>accountIdentifiers</code>.</p> <p>If
                this parameter is set to <code>true</code> and
                <code>accountIdentifiers</code> contains a null value, the
                operation returns all log groups in the monitoring account and
                all log groups in all source accounts that are linked to the
                monitoring account. </p>
    DescribeLogGroupsResponse:
      type: object
      properties:
        logGroups:
          $ref: '#/components/schemas/LogGroups'
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeLogStreamsRequest:
      type: object
      title: DescribeLogStreamsRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: >-
                <p>The name of the log group.</p> <note> <p> You must include
                either <code>logGroupIdentifier</code> or
                <code>logGroupName</code>, but not both. </p> </note>
        logGroupIdentifier:
          allOf:
            - $ref: '#/components/schemas/LogGroupIdentifier'
            - description: >-
                <p>Specify either the name or ARN of the log group to view. If
                the log group is in a source account and you are using a
                monitoring account, you must use the log group ARN.</p> <note>
                <p> You must include either <code>logGroupIdentifier</code> or
                <code>logGroupName</code>, but not both. </p> </note>
        logStreamNamePrefix:
          allOf:
            - $ref: '#/components/schemas/LogStreamName'
            - description: >-
                <p>The prefix to match.</p> <p>If <code>orderBy</code> is
                <code>LastEventTime</code>, you cannot specify this
                parameter.</p>
        orderBy:
          allOf:
            - $ref: '#/components/schemas/OrderBy'
            - description: >-
                <p>If the value is <code>LogStreamName</code>, the results are
                ordered by log stream name. If the value is
                <code>LastEventTime</code>, the results are ordered by the event
                time. The default value is <code>LogStreamName</code>.</p> <p>If
                you order the results by event time, you cannot specify the
                <code>logStreamNamePrefix</code> parameter.</p> <p>
                <code>lastEventTimestamp</code> represents the time of the most
                recent log event in the log stream in CloudWatch Logs. This
                number is expressed as the number of milliseconds after
                <code>Jan 1, 1970 00:00:00 UTC</code>.
                <code>lastEventTimestamp</code> updates on an eventual
                consistency basis. It typically updates in less than an hour
                from ingestion, but in rare situations might take longer.</p>
        descending:
          allOf:
            - $ref: '#/components/schemas/Descending'
            - description: >-
                If the value is true, results are returned in descending order.
                If the value is to false, results are returned in ascending
                order. The default value is false.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: >-
                The token for the next set of items to return. (You received
                this token from a previous call.)
        limit:
          allOf:
            - $ref: '#/components/schemas/DescribeLimit'
            - description: >-
                The maximum number of items returned. If you don't specify a
                value, the default is up to 50 items.
    DescribeLogStreamsResponse:
      type: object
      properties:
        logStreams:
          $ref: '#/components/schemas/LogStreams'
        nextToken:
          $ref: '#/components/schemas/NextToken'
    EventMessage:
      type: string
      minLength: 1
    EventsLimit:
      type: integer
      minimum: 1
      maximum: 10000
    FilterCount:
      type: integer
    GetLogEventsRequest:
      type: object
      required:
        - logStreamName
      title: GetLogEventsRequest
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: >-
                <p>The name of the log group.</p> <note> <p> You must include
                either <code>logGroupIdentifier</code> or
                <code>logGroupName</code>, but not both. </p> </note>
        logGroupIdentifier:
          allOf:
            - $ref: '#/components/schemas/LogGroupIdentifier'
            - description: >-
                <p>Specify either the name or ARN of the log group to view
                events from. If the log group is in a source account and you are
                using a monitoring account, you must use the log group ARN.</p>
                <note> <p> You must include either
                <code>logGroupIdentifier</code> or <code>logGroupName</code>,
                but not both. </p> </note>
        logStreamName:
          allOf:
            - $ref: '#/components/schemas/LogStreamName'
            - description: The name of the log stream.
        startTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The start of the time range, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events
                with a timestamp equal to this time or later than this time are
                included. Events with a timestamp earlier than this time are not
                included.
        endTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The end of the time range, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events
                with a timestamp equal to or later than this time are not
                included.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: >-
                The token for the next set of items to return. (You received
                this token from a previous call.)
        limit:
          allOf:
            - $ref: '#/components/schemas/EventsLimit'
            - description: >-
                The maximum number of log events returned. If you don't specify
                a limit, the default is as many log events as can fit in a
                response size of 1 MB (up to 10,000 log events).
        startFromHead:
          allOf:
            - $ref: '#/components/schemas/StartFromHead'
            - description: >-
                <p>If the value is true, the earliest log events are returned
                first. If the value is false, the latest log events are returned
                first. The default value is false.</p> <p>If you are using a
                previous <code>nextForwardToken</code> value as the
                <code>nextToken</code> in this operation, you must specify
                <code>true</code> for <code>startFromHead</code>.</p>
        unmask:
          allOf:
            - $ref: '#/components/schemas/Unmask'
            - description: >-
                <p>Specify <code>true</code> to display the log event fields
                with all sensitive data unmasked and visible. The default is
                <code>false</code>.</p> <p>To use this operation with this
                parameter, you must be signed into an account with the
                <code>logs:Unmask</code> permission.</p>
    GetLogEventsResponse:
      type: object
      properties:
        events:
          $ref: '#/components/schemas/OutputLogEvents'
        nextForwardToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: >-
                The token for the next set of items in the forward direction.
                The token expires after 24 hours. If you have reached the end of
                the stream, it returns the same token you passed in.
        nextBackwardToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: >-
                The token for the next set of items in the backward direction.
                The token expires after 24 hours. This token is not null. If you
                have reached the end of the stream, it returns the same token
                you passed in.
    IncludeLinkedAccounts:
      type: boolean
    InheritedProperties:
      type: array
      items:
        $ref: '#/components/schemas/InheritedProperty'
    InheritedProperty:
      type: string
      enum:
        - ACCOUNT_DATA_PROTECTION
    InvalidParameterException: {}
    KmsKeyId:
      type: string
      maxLength: 256
    LimitExceededException: {}
    LogGroup:
      type: object
      properties:
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/LogGroupName'
            - description: The name of the log group.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The creation time of the log group, expressed as the number of
                milliseconds after Jan 1, 1970 00:00:00 UTC.
        retentionInDays:
          $ref: '#/components/schemas/Days'
        metricFilterCount:
          allOf:
            - $ref: '#/components/schemas/FilterCount'
            - description: The number of metric filters.
        arn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The Amazon Resource Name (ARN) of the log group.
        storedBytes:
          allOf:
            - $ref: '#/components/schemas/StoredBytes'
            - description: The number of bytes stored.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/KmsKeyId'
            - description: >-
                The Amazon Resource Name (ARN) of the KMS key to use when
                encrypting log data.
        dataProtectionStatus:
          allOf:
            - $ref: '#/components/schemas/DataProtectionStatus'
            - description: >-
                Displays whether this log group has a protection policy, or
                whether it had one in the past. For more information, see <a
                href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html">PutDataProtectionPolicy</a>.
        inheritedProperties:
          allOf:
            - $ref: '#/components/schemas/InheritedProperties'
            - description: >-
                Displays all the properties that this log group has inherited
                from account-level settings.
      description: Represents a log group.
    LogGroupIdentifier:
      type: string
      pattern: '[\w#+=/:,.@-]*'
      minLength: 1
      maxLength: 2048
    LogGroupName:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    LogGroupNamePattern:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]*'
      minLength: 0
      maxLength: 512
    LogGroups:
      type: array
      items:
        $ref: '#/components/schemas/LogGroup'
    LogStream:
      type: object
      properties:
        logStreamName:
          allOf:
            - $ref: '#/components/schemas/LogStreamName'
            - description: The name of the log stream.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The creation time of the stream, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.
        firstEventTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The time of the first event, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.
        lastEventTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The time of the most recent log event in the log stream in
                CloudWatch Logs. This number is expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. The
                <code>lastEventTime</code> value updates on an eventual
                consistency basis. It typically updates in less than an hour
                from ingestion, but in rare situations might take longer.
        lastIngestionTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The ingestion time, expressed as the number of milliseconds
                after <code>Jan 1, 1970 00:00:00 UTC</code> The
                <code>lastIngestionTime</code> value updates on an eventual
                consistency basis. It typically updates in less than an hour
                after ingestion, but in rare situations might take longer.
        uploadSequenceToken:
          allOf:
            - $ref: '#/components/schemas/SequenceToken'
            - description: >-
                <p>The sequence token.</p> <important> <p>The sequence token is
                now ignored in <code>PutLogEvents</code> actions.
                <code>PutLogEvents</code> actions are always accepted regardless
                of receiving an invalid sequence token. You don't need to obtain
                <code>uploadSequenceToken</code> to use a
                <code>PutLogEvents</code> action.</p> </important>
        arn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The Amazon Resource Name (ARN) of the log stream.
        storedBytes:
          allOf:
            - $ref: '#/components/schemas/StoredBytes'
            - deprecated: true
              description: >-
                <p>The number of bytes stored.</p> <p> <b>Important:</b> As of
                June 17, 2019, this parameter is no longer supported for log
                streams, and is always reported as zero. This change applies
                only to log streams. The <code>storedBytes</code> parameter for
                log groups is not affected.</p>Starting on June 17, 2019, this
                parameter will be deprecated for log streams, and will be
                reported as zero. This change applies only to log streams. The
                storedBytes parameter for log groups is not affected.
      description: >-
        Represents a log stream, which is a sequence of log events from a single
        emitter of logs.
    LogStreamName:
      type: string
      pattern: '[^:*]*'
      minLength: 1
      maxLength: 512
    LogStreams:
      type: array
      items:
        $ref: '#/components/schemas/LogStream'
    NextToken:
      type: string
      description: >-
        The token for the next set of items to return. The token expires after
        24 hours.
      minLength: 1
    OperationAbortedException: {}
    OrderBy:
      type: string
      enum:
        - LogStreamName
        - LastEventTime
    OutputLogEvent:
      type: object
      properties:
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The time the event occurred, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.
        message:
          allOf:
            - $ref: '#/components/schemas/EventMessage'
            - description: The data contained in the log event.
        ingestionTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: >-
                The time the event was ingested, expressed as the number of
                milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.
      description: Represents a log event.
    OutputLogEvents:
      type: array
      items:
        $ref: '#/components/schemas/OutputLogEvent'
    ResourceAlreadyExistsException: {}
    ResourceNotFoundException: {}
    SequenceToken:
      type: string
      minLength: 1
    ServiceUnavailableException: {}
    StartFromHead:
      type: boolean
    StoredBytes:
      type: integer
      minimum: 0
    Tags:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagValue:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      maxLength: 256
    Timestamp:
      type: integer
      minimum: 0
    Unmask:
      type: boolean
  x-stackQL-resources:
    log_events:
      name: log_events
      x-cfn-schema-name: OutputLogEvent
      x-example-where-clause: "WHERE region = 'us-east-1' AND data___logStreamName = '<logStreamName>'"
      x-type: custom    
      id: aws.cloudwatch.log_events
      methods:
        GetLogEvents:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.GetLogEvents&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            objectKey: $.events
            openAPIDocKey: '200'
      sqlVerbs:
        delete: []
        insert: []
        select:
        - $ref: '#/components/x-stackQL-resources/log_events/methods/GetLogEvents'
        update: []
      title: log_events
    log_groups:
      name: log_groups
      x-cfn-schema-name: LogGroup
      x-example-where-clause: "WHERE region = 'us-east-1'"
      x-type: custom    
      id: aws.cloudwatch.log_groups
      methods:
        DescribeLogGroups:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.DescribeLogGroups&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            objectKey: $.logGroups
            openAPIDocKey: '200'
        DeleteLogGroup:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.DeleteLogGroup&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        CreateLogGroup:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.CreateLogGroup&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        delete: 
        - $ref: '#/components/x-stackQL-resources/log_groups/methods/DeleteLogGroup'
        insert:
        - $ref: '#/components/x-stackQL-resources/log_groups/methods/CreateLogGroup'
        select:
        - $ref: '#/components/x-stackQL-resources/log_groups/methods/DescribeLogGroups'
        update: []
      title: log_groups
    log_streams:
      name: log_streams
      x-cfn-schema-name: LogStream
      x-example-where-clause: "WHERE region = 'us-east-1'"
      x-type: custom    
      id: aws.cloudwatch.log_streams
      methods:
        DescribeLogGroups:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.DescribeLogStreams&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            objectKey: $.logStreams
            openAPIDocKey: '200'
        DeleteLogGroup:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.DeleteLogStream&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        CreateLogGroup:
          serviceName: logs
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=Logs_20140328.CreateLogStream&__nativeEndpoint=true/post'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        delete: 
        - $ref: '#/components/x-stackQL-resources/log_streams/methods/DeleteLogGroup'
        insert:
        - $ref: '#/components/x-stackQL-resources/log_streams/methods/CreateLogGroup'
        select:
        - $ref: '#/components/x-stackQL-resources/log_streams/methods/DescribeLogGroups'
        update: []
      title: log_streams            
x-stackQL-config:
  queryParamTranspose:
    algorithm: AWSCanonical
  requestTranslate:
    algorithm: drop_double_underscore_params