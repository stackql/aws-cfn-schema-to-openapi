openapi: 3.0.0
info:
  title: Transfer
  description: Additional stackql views for Transfer
  version: 1.0.0
paths: {}
components:
  schemas:
    region:
      type: string
      description: The AWS region
    servers:
      description: List of Transfer family servers in a region
      type: object
      additionalProperties: false
      properties:
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the server.
        domain:
          type: string
          description: The domain of the server
        endpoint_type:
          type: string
          description: The endpoint type of the server
        identity_provider_type:
          type: string
          description: The mode of authentication for a server. The default
        logging_role:
          type: string
          description: The logging role of the server
        server_id:
          type: string
          description: The server id
        state:
          type: string
          description: "Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED. OFFLINE indicates that the server exists, but that it is not available for file operations. ONLINE indicates that the server is available to perform file operations. STARTING indicates that the server's was instantiated, but the server is not yet available to perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both START_FAILED and STOP_FAILED are error conditions."
        user_count:
          type: integer
          description: The user count of the server
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>'
    server:
      description: Details of a Transfer family server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the server.        
        certificate:
          type: string
          description: The certificate of the server
        domain:
          type: string
          description: The domain of the server
        endpoint_details:
          type: object
          description: The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled server. With a VPC endpoint, you can restrict access to your server and resources only within your VPC. To control incoming internet traffic, invoke the UpdateServer API and attach an Elastic IP address to your server's endpoint.
        endpoint_type:
          type: string
          description: The endpoint type of the server
        host_key_fingerprint:
          type: string
          description: The host key fingerprint of the server
        identity_provider_details:
          type: object
          description: Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server's users. A server can have only one method of authentication.
        identity_provider_type:
          type: string
          description: The mode of authentication for a server. The default
        logging_role:
          type: string
          description: The logging role of the server
        post_authentication_login_banner:
          type: string
          description: The post authentication login banner of the server
        pre_authentication_login_banner:
          type: string
          description: The pre authentication login banner of the server
        protocol_details:
          type: object
          description: The protocol settings that are configured for your server
        protocols:
          type: array
          description: The protocols of the server
        s3_storage_options:
          type: object
          description: The S3 storage options of the server
        security_policy_name:
          type: string
          description: The security policy name of the server
        server_id:
          type: string
          description: The server id
        state:
          type: string
          description: "Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED. OFFLINE indicates that the server exists, but that it is not available for file operations. ONLINE indicates that the server is available to perform file operations. STARTING indicates that the server's was instantiated, but the server is not yet available to perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both START_FAILED and STOP_FAILED are error conditions."
        structured_log_destinations:
          type: array
          description: The structured log destinations of the server
        tags:
          type: array
          description: The tags of the server
        user_count:
          type: integer
          description: The user count of the server
        workflow_details:
          type: object
          description: Container for the WorkflowDetail data type. It is used by actions that trigger a workflow to begin execution.
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    server_tags:
      description: Details of a Transfer family server tags
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        region:
          $ref: '#/components/schemas/region'
        key:
          type: string
          description: The key of the tag
        value:
          type: string
          description: The value of the tag
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    user:
      description: Details for a Transfer family user in a server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        data__UserName:
          type: string
          description: The user name
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the user.
        home_directory: 
          type: string
          description: The home directory of the user
        home_directory_mappings:
          type: array
          description: Logical directory mappings that specify what Amazon S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "<bucket-name>/<prefix>" name of the Amazon S3 bucket and the "<prefix>" value for the Amazon S3 key in the <code>HomeDirectory</code> parameter. The following example will map the "<prefix>" value "<bucket-name>/<prefix>" to "<prefix>">. The "<prefix>" value does not need to be specified if it is the same as the "<bucket-name>". The mapping will be visible to the user in the "<prefix>" folder of their Amazon S3 storage. This is often referred to as 'logical directory mappings'. In the example, the user will see their Amazon S3 storage as the "<prefix>" folder in the "<bucket-name>" bucket.
        home_directory_type:
          type: string
          description: The type of home directory to provide for the user. If you set it to <code>PATH</code>, the user will see the immediate contents of their Amazon S3 storage location. If you set it to <code>LOGICAL</code>, you will provide mappings in the <code>HomeDirectoryMappings</code> for what they will see at the root of their Amazon S3 storage location.
        policy:
          type: string
          description: The policy of the user
        posix_profile:
          type: object
          description: The full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary group IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.
        role:
          type: string
          description: The role of the server
        ssh_public_keys:
          type: array
          description: The SSH public keys of the server
        tags:
          type: array
          description: The tags of the server
        user_name:
          type: string
          description: The user name
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>' AND data__UserName = '<my_user_name>'
    users:
      description: List of Transfer family users in a server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        user_name:
          type: string
          description: The user name
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the user.
        home_directory_type:
          type: string
          description: The home directory type for the user
        role:
          type: string
          description: The role of the server
        ssh_public_key_count:
          type: integer
          description: The SSH public key count of the server
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    user_public_keys:
      description: Details of a Transfer family server tags
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        data__UserName:
          type: string
          description: The user name
        region:
          $ref: '#/components/schemas/region'
        ssh_public_key_body:
          type: string
          description: The SSH public key body
        ssh_public_key_id:
          type: string
          description: The SSH public key id
        date_imported:
          type: string
          description: The date imported          
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>' AND data__UserName = '<my_user_name>'
  x-stackQL-resources:
    servers:
      name: servers
      id: aws.transfer.servers
      x-cfn-schema-name: servers
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              Arn as arn,
              Domain as domain,
              EndpointType as endpoint_type,
              IdentityProviderType as identity_provider_type,
              LoggingRole as logging_role,
              ServerId as server_id,
              State as state,
              UserCount as user_count,
              region
              FROM aws.transfer_api.servers
              WHERE region = 'us-east-1'
    server:
      name: server
      id: aws.transfer.server
      x-cfn-schema-name: server
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              Arn as arn,
              Certificate as certificate,
              Domain as domain,
              EndpointDetails as endpoint_details,
              EndpointType as endpoint_type,
              HostKeyFingerprint as host_key_fingerprint,
              IdentityProviderDetails as identity_provider_details,
              IdentityProviderType as identity_provider_type,
              LoggingRole as logging_role,
              PostAuthenticationLoginBanner as post_authentication_login_banner,
              PreAuthenticationLoginBanner as pre_authentication_login_banner,
              ProtocolDetails as protocol_details,
              Protocols as protocols,
              S3StorageOptions as s3_storage_options,
              SecurityPolicyName as security_policy_name,
              ServerId as server_id,
              State as state,
              StructuredLogDestinations as structured_log_destinations,
              Tags as tags,
              UserCount as user_count,
              WorkflowDetails as workflow_details,
              region
              FROM aws.transfer_api.servers
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
    server_tags:
      name: server_tags
      id: aws.transfer.server_tags
      x-cfn-schema-name: server_tags
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |- 
              SELECT
              data__ServerId,
              region,
              JSON_EXTRACT(json_each.value, '$.Key') as key,
              JSON_EXTRACT(json_each.value, '$.Value') as value
              FROM aws.transfer_api.servers, json_each(Tags)
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                  data__ServerId,
                  region,
                  json_array_elements_text(Tags)::jsonb ->> 'Key' as key,
                  json_array_elements_text(Tags)::jsonb ->> 'Value' as value
                FROM 
                  aws.transfer_api.servers
                WHERE 
                  region = 'us-east-1'
                  AND data__ServerId = 's-ab1234567890123cd'
    user:
      name: user
      id: aws.transfer.user
      x-cfn-schema-name: user
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              data__UserName,
              Arn as arn,
              HomeDirectory as home_directory,
              HomeDirectoryMappings as home_directory_mappings,
              HomeDirectoryType as home_directory_type,
              Policy as policy,
              PosixProfile as posix_profile,
              Role as role,
              SshPublicKeys as ssh_public_keys,
              Tags as tags,
              UserName as user_name,
              region
              FROM aws.transfer_api.users
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
              AND data__UserName = 'my_user_name'
    users:
      name: users
      id: aws.transfer.users
      x-cfn-schema-name: users
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              UserName as user_name,
              Arn as arn,
              HomeDirectoryType as home_directory_type,
              Role as role,
              SshPublicKeyCount as ssh_public_key_count,
              region
              FROM aws.transfer_api.users
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
    user_public_keys:
      name: user_public_keys
      id: aws.transfer.user_public_keys
      x-cfn-schema-name: user_public_keys
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |- 
              SELECT
              data__ServerId,
              data__UserName,
              region,
              JSON_EXTRACT(json_each.value, '$.SshPublicKeyBody') as ssh_public_key_body,
              JSON_EXTRACT(json_each.value, '$.SshPublicKeyId') as ssh_public_key_id,
              JSON_EXTRACT(json_each.value, '$.DateImported') as date_imported
              FROM aws.transfer_api.users, json_each(SshPublicKeys)
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
              AND data__UserName = 'my_user_name'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                  data__ServerId,
                  data__UserName,
                  region,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'SshPublicKeyBody' as ssh_public_key_body,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'SshPublicKeyId' as ssh_public_key_id,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'DateImported' as date_imported
                FROM 
                  aws.transfer_api.users
                WHERE 
                  region = 'us-east-1'
                  AND data__ServerId = 's-ab1234567890123cd'
                  AND data__UserName = 'my_user_name'