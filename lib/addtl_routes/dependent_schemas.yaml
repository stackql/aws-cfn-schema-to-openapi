components:
  schemas:
    AttachGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the group to attach the
                policy to.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                attach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
      required:
        - GroupName
        - PolicyArn
      title: AttachGroupPolicyRequest
      type: object
    AttachRolePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                attach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the role to attach the
                policy to.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
        - PolicyArn
      title: AttachRolePolicyRequest
      type: object
    AttachUserPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                attach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/userNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the IAM user to attach
                the policy to.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
        - PolicyArn
      title: AttachUserPolicyRequest
      type: object
    ConcurrentModificationException: {}
    CreatePolicyRequest:
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/policyDescriptionType'
            - description: >-
                <p>A friendly description of the policy.</p> <p>Typically used
                to store information about the permissions defined in the
                policy. For example, "Grants access to production DynamoDB
                tables."</p> <p>The policy description is immutable. After a
                value is assigned, it cannot be changed.</p>
        Path:
          allOf:
            - $ref: '#/components/schemas/policyPathType'
            - description: >-
                <p>The path for the policy.</p> <p>For more information about
                paths, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This
                parameter is optional. If it is not included, it defaults to a
                slash (/).</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of either a forward slash (/) by
                itself or a string that must begin and end with forward slashes.
                In addition, it can contain any ASCII character from the !
                (<code>\u0021</code>) through the DEL character
                (<code>\u007F</code>), including most punctuation characters,
                digits, and upper and lowercased letters.</p> <note> <p>You
                cannot use an asterisk (*) in the path name.</p> </note>
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The JSON policy document that you want to use as the content
                for the new policy.</p> <p>You must provide policies in JSON
                format in IAM. However, for CloudFormation templates formatted
                in YAML, you can provide the policy in JSON or YAML format.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p> <p>The maximum length of the
                policy document that you can pass in this operation, including
                whitespace, is listed below. To view the maximum character
                counts of a managed policy with no whitespaces, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM
                and STS character quotas</a>.</p> <p>To learn more about JSON
                policy grammar, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html">Grammar
                of the IAM JSON policy language</a> in the <i>IAM User
                Guide</i>. </p> <p>The <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a> used to
                validate this parameter is a string of characters consisting of
                the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through
                the end of the ASCII character range</p> </li> <li> <p>The
                printable characters in the Basic Latin and Latin-1 Supplement
                character set (through <code>\u00FF</code>)</p> </li> <li>
                <p>The special characters tab (<code>\u0009</code>), line feed
                (<code>\u000A</code>), and carriage return
                (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The friendly name of the policy.</p> <p>IAM user, group,
                role, and policy names must be unique within the account. Names
                are not distinguished by case. For example, you cannot create
                resources named both "MyResource" and "myresource".</p>
        Tags:
          allOf:
            - $ref: '#/components/schemas/tagListType'
            - description: >-
                <p>A list of tags that you want to attach to the new IAM
                customer managed policy. Each tag consists of a key name and an
                associated value. For more information about tagging, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging
                IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If
                any one of the tags is invalid or if you exceed the allowed
                maximum number of tags, then the entire request fails and the
                resource is not created.</p> </note>
      required:
        - PolicyName
        - PolicyDocument
      title: CreatePolicyRequest
      type: object
    CreatePolicyResponse:
      description: 'Contains the response to a successful <a>CreatePolicy</a> request. '
      properties:
        Policy:
          allOf:
            - $ref: '#/components/schemas/Policy'
            - description: A structure containing details about the new policy.
      type: object
    DeleteConflictException: {}
    DeleteGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name (friendly name, not ARN) identifying the group that
                the policy is embedded in.</p> <p>This parameter allows (through
                its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>)
                a string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name identifying the policy document to delete.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - GroupName
        - PolicyName
      title: DeleteGroupPolicyRequest
      type: object
    DeletePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                delete.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
      required:
        - PolicyArn
      title: DeletePolicyRequest
      type: object
    DeleteRolePolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the inline policy to delete from the specified
                IAM role.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name (friendly name, not ARN) identifying the role that
                the policy is embedded in.</p> <p>This parameter allows (through
                its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>)
                a string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
        - PolicyName
      title: DeleteRolePolicyRequest
      type: object
    DeleteUserPolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name identifying the policy document to delete.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: >-
                <p>The name (friendly name, not ARN) identifying the user that
                the policy is embedded in.</p> <p>This parameter allows (through
                its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>)
                a string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
        - PolicyName
      title: DeleteUserPolicyRequest
      type: object
    DetachGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the IAM group to detach
                the policy from.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                detach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
      required:
        - GroupName
        - PolicyArn
      title: DetachGroupPolicyRequest
      type: object
    DetachRolePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                detach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the IAM role to detach
                the policy from.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
        - PolicyArn
      title: DetachRolePolicyRequest
      type: object
    DetachUserPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the IAM policy you want to
                detach.</p> <p>For more information about ARNs, see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/userNameType'
            - description: >-
                <p>The name (friendly name, not ARN) of the IAM user to detach
                the policy from.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
        - PolicyArn
      title: DetachUserPolicyRequest
      type: object
    EntityAlreadyExistsException: {}
    GetGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name of the group the policy is associated with.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document to get.</p> <p>This parameter
                allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - GroupName
        - PolicyName
      title: GetGroupPolicyRequest
      type: object
    GetGroupPolicyResponse:
      description: 'Contains the response to a successful <a>GetGroupPolicy</a> request. '
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: The group the policy is associated with.
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>IAM stores policies in JSON
                format. However, resources that were created using
                CloudFormation templates can be formatted in YAML.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      type: object
    GetPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The Amazon Resource Name (ARN) of the managed policy that you
                want information about.</p> <p>For more information about ARNs,
                see <a
                href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                Resource Names (ARNs)</a> in the <i>Amazon Web Services General
                Reference</i>.</p>
      required:
        - PolicyArn
      title: GetPolicyRequest
      type: object
    GetPolicyResponse:
      description: 'Contains the response to a successful <a>GetPolicy</a> request. '
      properties:
        Policy:
          allOf:
            - $ref: '#/components/schemas/Policy'
            - description: A structure containing details about the policy.
      type: object
    GetRolePolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document to get.</p> <p>This parameter
                allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name of the role associated with the policy.</p> <p>This
                parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
        - PolicyName
      title: GetRolePolicyRequest
      type: object
    GetRolePolicyResponse:
      description: 'Contains the response to a successful <a>GetRolePolicy</a> request. '
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>IAM stores policies in JSON
                format. However, resources that were created using
                CloudFormation templates can be formatted in YAML.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: The role the policy is associated with.
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      type: object
    GetUserPolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document to get.</p> <p>This parameter
                allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: >-
                <p>The name of the user who the policy is associated with.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
        - PolicyName
      title: GetUserPolicyRequest
      type: object
    GetUserPolicyResponse:
      description: 'Contains the response to a successful <a>GetUserPolicy</a> request. '
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>IAM stores policies in JSON
                format. However, resources that were created using
                CloudFormation templates can be formatted in YAML.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: The user the policy is associated with.
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      type: object
    InvalidInputException: {}
    LimitExceededException: {}
    ListGroupPoliciesRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name of the group to list policies for.</p> <p>This
                parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: >-
                Use this parameter only when paginating results and only after
                you receive a response indicating that the results are
                truncated. Set it to the value of the <code>Marker</code>
                element in the response that you received to indicate where the
                next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum
                number of items you want in the response. If additional items
                exist beyond the maximum you specify, the
                <code>IsTruncated</code> response element is
                <code>true</code>.</p> <p>If you do not include this parameter,
                the number of items defaults to 100. Note that IAM might return
                fewer results, even when there are more results available. In
                that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to
                include in the subsequent call that tells the service where to
                continue from.</p>
      required:
        - GroupName
      title: ListGroupPoliciesRequest
      type: object
    ListGroupPoliciesResponse:
      description: 'Contains the response to a successful <a>ListGroupPolicies</a> request. '
      example:
        PolicyNames:
          - AdminRoot
          - KeyPolicy
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                A flag that indicates whether there are more items to return. If
                your results were truncated, you can make a subsequent
                pagination request using the <code>Marker</code> request
                parameter to retrieve more items. Note that IAM might return
                fewer than the <code>MaxItems</code> number of results even when
                there are more results available. We recommend that you check
                <code>IsTruncated</code> after every call to ensure that you
                receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: >-
                When <code>IsTruncated</code> is <code>true</code>, this element
                is present and contains the value to use for the
                <code>Marker</code> parameter in a subsequent pagination
                request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: >-
                <p>A list of policy names.</p> <p>This parameter allows (through
                its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>)
                a string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - PolicyNames
      type: object
    ListPoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: >-
                Use this parameter only when paginating results and only after
                you receive a response indicating that the results are
                truncated. Set it to the value of the <code>Marker</code>
                element in the response that you received to indicate where the
                next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum
                number of items you want in the response. If additional items
                exist beyond the maximum you specify, the
                <code>IsTruncated</code> response element is
                <code>true</code>.</p> <p>If you do not include this parameter,
                the number of items defaults to 100. Note that IAM might return
                fewer results, even when there are more results available. In
                that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to
                include in the subsequent call that tells the service where to
                continue from.</p>
        OnlyAttached:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                <p>A flag to filter the results to only the attached
                policies.</p> <p>When <code>OnlyAttached</code> is
                <code>true</code>, the returned list contains only the policies
                that are attached to an IAM user, group, or role. When
                <code>OnlyAttached</code> is <code>false</code>, or when the
                parameter is not included, all policies are returned.</p>
        PathPrefix:
          allOf:
            - $ref: '#/components/schemas/policyPathType'
            - description: >-
                The path prefix for filtering the results. This parameter is
                optional. If it is not included, it defaults to a slash (/),
                listing all policies. This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of either a forward slash (/) by
                itself or a string that must begin and end with forward slashes.
                In addition, it can contain any ASCII character from the !
                (<code>\u0021</code>) through the DEL character
                (<code>\u007F</code>), including most punctuation characters,
                digits, and upper and lowercased letters.
        PolicyUsageFilter:
          allOf:
            - $ref: '#/components/schemas/PolicyUsageType'
            - description: "<p>The policy usage method to use for filtering the results.</p> <p>To list only permissions policies, set\_<code>PolicyUsageFilter</code>\_to\_<code>PermissionsPolicy</code>. To list only the policies used to set permissions boundaries, set\_the value to\_<code>PermissionsBoundary</code>.</p> <p>This parameter is optional. If it is not included, all policies are returned. </p>"
        Scope:
          allOf:
            - $ref: '#/components/schemas/policyScopeType'
            - description: >-
                <p>The scope to use for filtering the results.</p> <p>To list
                only Amazon Web Services managed policies, set
                <code>Scope</code> to <code>AWS</code>. To list only the
                customer managed policies in your Amazon Web Services account,
                set <code>Scope</code> to <code>Local</code>.</p> <p>This
                parameter is optional. If it is not included, or if it is set to
                <code>All</code>, all policies are returned.</p>
      title: ListPoliciesRequest
      type: object
    ListPoliciesResponse:
      description: 'Contains the response to a successful <a>ListPolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                A flag that indicates whether there are more items to return. If
                your results were truncated, you can make a subsequent
                pagination request using the <code>Marker</code> request
                parameter to retrieve more items. Note that IAM might return
                fewer than the <code>MaxItems</code> number of results even when
                there are more results available. We recommend that you check
                <code>IsTruncated</code> after every call to ensure that you
                receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: >-
                When <code>IsTruncated</code> is <code>true</code>, this element
                is present and contains the value to use for the
                <code>Marker</code> parameter in a subsequent pagination
                request.
        Policies:
          allOf:
            - $ref: '#/components/schemas/policyListType'
            - description: A list of policies.
      type: object
    ListRolePoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: >-
                Use this parameter only when paginating results and only after
                you receive a response indicating that the results are
                truncated. Set it to the value of the <code>Marker</code>
                element in the response that you received to indicate where the
                next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum
                number of items you want in the response. If additional items
                exist beyond the maximum you specify, the
                <code>IsTruncated</code> response element is
                <code>true</code>.</p> <p>If you do not include this parameter,
                the number of items defaults to 100. Note that IAM might return
                fewer results, even when there are more results available. In
                that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to
                include in the subsequent call that tells the service where to
                continue from.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name of the role to list policies for.</p> <p>This
                parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
      title: ListRolePoliciesRequest
      type: object
    ListRolePoliciesResponse:
      description: 'Contains the response to a successful <a>ListRolePolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                A flag that indicates whether there are more items to return. If
                your results were truncated, you can make a subsequent
                pagination request using the <code>Marker</code> request
                parameter to retrieve more items. Note that IAM might return
                fewer than the <code>MaxItems</code> number of results even when
                there are more results available. We recommend that you check
                <code>IsTruncated</code> after every call to ensure that you
                receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: >-
                When <code>IsTruncated</code> is <code>true</code>, this element
                is present and contains the value to use for the
                <code>Marker</code> parameter in a subsequent pagination
                request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: A list of policy names.
      required:
        - PolicyNames
      type: object
    ListUserPoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: >-
                Use this parameter only when paginating results and only after
                you receive a response indicating that the results are
                truncated. Set it to the value of the <code>Marker</code>
                element in the response that you received to indicate where the
                next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum
                number of items you want in the response. If additional items
                exist beyond the maximum you specify, the
                <code>IsTruncated</code> response element is
                <code>true</code>.</p> <p>If you do not include this parameter,
                the number of items defaults to 100. Note that IAM might return
                fewer results, even when there are more results available. In
                that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to
                include in the subsequent call that tells the service where to
                continue from.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: >-
                <p>The name of the user to list policies for.</p> <p>This
                parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
      title: ListUserPoliciesRequest
      type: object
    ListUserPoliciesResponse:
      description: 'Contains the response to a successful <a>ListUserPolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                A flag that indicates whether there are more items to return. If
                your results were truncated, you can make a subsequent
                pagination request using the <code>Marker</code> request
                parameter to retrieve more items. Note that IAM might return
                fewer than the <code>MaxItems</code> number of results even when
                there are more results available. We recommend that you check
                <code>IsTruncated</code> after every call to ensure that you
                receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: >-
                When <code>IsTruncated</code> is <code>true</code>, this element
                is present and contains the value to use for the
                <code>Marker</code> parameter in a subsequent pagination
                request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: A list of policy names.
      required:
        - PolicyNames
      type: object
    MalformedPolicyDocumentException: {}
    NoSuchEntityException: {}
    Policy:
      description: >-
        <p>Contains information about a managed policy.</p> <p>This data type is
        used as a response element in the <a>CreatePolicy</a>, <a>GetPolicy</a>,
        and <a>ListPolicies</a> operations. </p> <p>For more information about
        managed policies, refer to <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
      properties:
        Arn:
          $ref: '#/components/schemas/arnType'
        AttachmentCount:
          allOf:
            - $ref: '#/components/schemas/attachmentCountType'
            - description: >-
                The number of entities (users, groups, and roles) that the
                policy is attached to.
        CreateDate:
          allOf:
            - $ref: '#/components/schemas/dateType'
            - description: >-
                The date and time, in <a
                href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                format</a>, when the policy was created.
        DefaultVersionId:
          allOf:
            - $ref: '#/components/schemas/policyVersionIdType'
            - description: >-
                The identifier for the version of the policy that is set as the
                default version.
        Description:
          allOf:
            - $ref: '#/components/schemas/policyDescriptionType'
            - description: >-
                <p>A friendly description of the policy.</p> <p>This element is
                included in the response to the <a>GetPolicy</a> operation. It
                is not included in the response to the <a>ListPolicies</a>
                operation. </p>
        IsAttachable:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: >-
                Specifies whether the policy can be attached to an IAM user,
                group, or role.
        Path:
          allOf:
            - $ref: '#/components/schemas/policyPathType'
            - description: >-
                <p>The path to the policy.</p> <p>For more information about
                paths, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                identifiers</a> in the <i>IAM User Guide</i>.</p>
        PermissionsBoundaryUsageCount:
          allOf:
            - $ref: '#/components/schemas/attachmentCountType'
            - description: >-
                <p>The number of entities (users and roles) for which the policy
                is used to set the permissions boundary. </p> <p>For more
                information about permissions boundaries, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions
                boundaries for IAM identities </a> in the <i>IAM User
                Guide</i>.</p>
        PolicyId:
          allOf:
            - $ref: '#/components/schemas/idType'
            - description: >-
                <p>The stable and unique string identifying the policy.</p>
                <p>For more information about IDs, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                identifiers</a> in the <i>IAM User Guide</i>.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The friendly name (not ARN) identifying the policy.
        Tags:
          allOf:
            - $ref: '#/components/schemas/tagListType'
            - description: >-
                A list of tags that are attached to the instance profile. For
                more information about tagging, see <a
                href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging
                IAM resources</a> in the <i>IAM User Guide</i>.
        UpdateDate:
          allOf:
            - $ref: '#/components/schemas/dateType'
            - description: >-
                <p>The date and time, in <a
                href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                format</a>, when the policy was last updated.</p> <p>When a
                policy has only one version, this field contains the date and
                time when the policy was created. When a policy has more than
                one version, this field contains the date and time when the most
                recent policy version was created.</p>
      type: object
    PolicyNotAttachableException: {}
    PolicyUsageType:
      description: >-
        <p>The policy usage type that indicates whether the policy is used as a
        permissions policy or as the permissions boundary for an entity.</p>
        <p>For more information about permissions boundaries, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions
        boundaries for IAM identities </a> in the <i>IAM User Guide</i>.</p>
      enum:
        - PermissionsPolicy
        - PermissionsBoundary
      type: string
    PutGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: >-
                <p>The name of the group to associate the policy with.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-.</p>
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON
                format in IAM. However, for CloudFormation templates formatted
                in YAML, you can provide the policy in JSON or YAML format.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to = IAM.</p> <p>The <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a> used to
                validate this parameter is a string of characters consisting of
                the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through
                the end of the ASCII character range</p> </li> <li> <p>The
                printable characters in the Basic Latin and Latin-1 Supplement
                character set (through <code>\u00FF</code>)</p> </li> <li>
                <p>The special characters tab (<code>\u0009</code>), line feed
                (<code>\u000A</code>), and carriage return
                (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document.</p> <p>This parameter allows
                (through its <a href="http://wikipedia.org/wiki/regex">regex
                pattern</a>) a string of characters consisting of upper and
                lowercase alphanumeric characters with no spaces. You can also
                include any of the following characters: _+=,.@-</p>
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      title: PutGroupPolicyRequest
      type: object
    PutRolePolicyRequest:
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON
                format in IAM. However, for CloudFormation templates formatted
                in YAML, you can provide the policy in JSON or YAML format.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p> <p>The <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a> used to
                validate this parameter is a string of characters consisting of
                the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through
                the end of the ASCII character range</p> </li> <li> <p>The
                printable characters in the Basic Latin and Latin-1 Supplement
                character set (through <code>\u00FF</code>)</p> </li> <li>
                <p>The special characters tab (<code>\u0009</code>), line feed
                (<code>\u000A</code>), and carriage return
                (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document.</p> <p>This parameter allows
                (through its <a href="http://wikipedia.org/wiki/regex">regex
                pattern</a>) a string of characters consisting of upper and
                lowercase alphanumeric characters with no spaces. You can also
                include any of the following characters: _+=,.@-</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: >-
                <p>The name of the role to associate the policy with.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      title: PutRolePolicyRequest
      type: object
    PutUserPolicyRequest:
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON
                format in IAM. However, for CloudFormation templates formatted
                in YAML, you can provide the policy in JSON or YAML format.
                CloudFormation always converts a YAML policy to JSON format
                before submitting it to IAM.</p> <p>The <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a> used to
                validate this parameter is a string of characters consisting of
                the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through
                the end of the ASCII character range</p> </li> <li> <p>The
                printable characters in the Basic Latin and Latin-1 Supplement
                character set (through <code>\u00FF</code>)</p> </li> <li>
                <p>The special characters tab (<code>\u0009</code>), line feed
                (<code>\u000A</code>), and carriage return
                (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: >-
                <p>The name of the policy document.</p> <p>This parameter allows
                (through its <a href="http://wikipedia.org/wiki/regex">regex
                pattern</a>) a string of characters consisting of upper and
                lowercase alphanumeric characters with no spaces. You can also
                include any of the following characters: _+=,.@-</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: >-
                <p>The name of the user to associate the policy with.</p>
                <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      title: PutUserPolicyRequest
      type: object
    ServiceFailureException: {}
    Tag:
      description: >-
        A structure that represents user-provided metadata that can be
        associated with an IAM resource. For more information about tagging, see
        <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging
        IAM resources</a> in the <i>IAM User Guide</i>.
      properties:
        Key:
          allOf:
            - $ref: '#/components/schemas/tagKeyType'
            - description: >-
                The key name that can be used to look up or retrieve the
                associated value. For example, <code>Department</code> or
                <code>Cost Center</code> are common choices.
        Value:
          allOf:
            - $ref: '#/components/schemas/tagValueType'
            - description: >-
                <p>The value associated with this tag. For example, tags with a
                key name of <code>Department</code> could have values such as
                <code>Human Resources</code>, <code>Accounting</code>, and
                <code>Support</code>. Tags with a key name of <code>Cost
                Center</code> might have values that consist of the number
                associated with the different cost centers in your company.
                Typically, many resources have tags with the same key name but
                with different values.</p> <note> <p>Amazon Web Services always
                interprets the tag <code>Value</code> as a single string. If you
                need to store an array, you can store comma-separated values in
                the string. However, you must interpret the value in your
                code.</p> </note>
      required:
        - Key
        - Value
      type: object
    TagPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The ARN of the IAM customer managed policy to which you want
                to add tags.</p> <p>This parameter allows (through its <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        Tags:
          allOf:
            - $ref: '#/components/schemas/tagListType'
            - description: >-
                The list of tags that you want to attach to the IAM customer
                managed policy. Each tag consists of a key name and an
                associated value.
      required:
        - PolicyArn
        - Tags
      title: TagPolicyRequest
      type: object
    UnmodifiableEntityException: {}
    UntagPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: >-
                <p>The ARN of the IAM customer managed policy from which you
                want to remove tags.</p> <p>This parameter allows (through its
                <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a
                string of characters consisting of upper and lowercase
                alphanumeric characters with no spaces. You can also include any
                of the following characters: _+=,.@-</p>
        TagKeys:
          allOf:
            - $ref: '#/components/schemas/tagKeyListType'
            - description: >-
                A list of key names as a simple array of strings. The tags with
                matching keys are removed from the specified policy.
      required:
        - PolicyArn
        - TagKeys
      title: UntagPolicyRequest
      type: object
    arnType:
      description: >-
        <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for
        Amazon Web Services resources.</p> <p>For more information about ARNs,
        go to <a
        href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
        Resource Names (ARNs)</a> in the <i>Amazon Web Services General
        Reference</i>. </p>
      maxLength: 2048
      minLength: 20
      type: string
    attachmentCountType:
      type: integer
    booleanType:
      type: boolean
    dateType:
      format: date-time
      type: string
    existingUserNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    groupNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    idType:
      maxLength: 128
      minLength: 16
      pattern: '[\w]+'
      type: string
    markerType:
      maxLength: 320
      minLength: 1
      pattern: '[\u0020-\u00FF]+'
      type: string
    maxItemsType:
      maximum: 1000
      minimum: 1
      type: integer
    policyDescriptionType:
      maxLength: 1000
      type: string
    policyDocumentType:
      maxLength: 131072
      minLength: 1
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      type: string
    policyListType:
      items:
        allOf:
          - $ref: '#/components/schemas/Policy'
          - xml:
              name: member
      type: array
    policyNameListType:
      description: >-
        <p>Contains a list of policy names.</p> <p>This data type is used as a
        response element in the <a>ListPolicies</a> operation.</p>
      items:
        allOf:
          - $ref: '#/components/schemas/policyNameType'
          - xml:
              name: member
      type: array
    policyNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    policyPathType:
      maxLength: 512
      minLength: 1
      pattern: ((/[A-Za-z0-9\.,\+@=_-]+)*)/
      type: string
    policyScopeType:
      enum:
        - All
        - AWS
        - Local
      type: string
    policyVersionIdType:
      pattern: v[1-9][0-9]*(\.[A-Za-z0-9-]*)?
      type: string
    responseMarkerType:
      type: string
    roleNameType:
      maxLength: 64
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    tagKeyListType:
      items:
        allOf:
          - $ref: '#/components/schemas/tagKeyType'
          - xml:
              name: member
      maxItems: 50
      type: array
    tagKeyType:
      maxLength: 128
      minLength: 1
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]+'
      type: string
    tagListType:
      items:
        allOf:
          - $ref: '#/components/schemas/Tag'
          - xml:
              name: member
      maxItems: 50
      type: array
    tagValueType:
      maxLength: 256
      minLength: 0
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]*'
      type: string
    userNameType:
      maxLength: 64
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
